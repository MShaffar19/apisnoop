* Generating Logs for Kapps
** draft
e2e tests were removed https://github.com/Azure/draft/pull/505
This commit made me sad:
https://github.com/Azure/draft/pull/505/commits/bb4004ffcc00525dbc81a1f67f441e5ba7097392
git checkout -b e2e a219fcfc27577e5321c409d5d6dd7f56b08d2088
#+BEGIN_SRC shell
apisnoop/create_ns_sa.sh draft-e2e
namespace "draft-e2e" created
serviceaccount "draft-e2e" created
clusterrolebinding.rbac.authorization.k8s.io "draft-e2e" created
User "draft-e2e" set.
Context "draft-e2e" created.
Switched to context "draft-e2e".
#+END_SRC

#+CALL: process(buffer="*draft-e2e-logs*",command="gcloud compute ssh k8s-apisnoop-2ba342b1-master-qjl9 --command \"sudo docker exec \\$(sudo docker ps -a | grep kube-apiserver-amd64 | awk '{print \\$1}') tail -f /var/log/kubernetes/audit/audit.log\" | tee ./draft-e2e.log")
** ksonnet
#+BEGIN_SRC
./create_ns_sa.sh ksonnet-apisnoop
namespace "ksonnet-apisnoop" created
serviceaccount "ksonnet-apisnoop" created
clusterrolebinding.rbac.authorization.k8s.io "ksonnet-apisnoop" created
User "ksonnet-apisnoop" set.
Context "ksonnet-apisnoop" created.
Switched to context "ksonnet-apisnoop".
#+END_SRC

#+CALL: process(buffer="*ksonnet-e2e-logs*",command="gcloud compute ssh k8s-apisnoop-2ba342b1-master-qjl9 --command \"sudo docker exec \\$(sudo docker ps -a | grep kube-apiserver-amd64 | awk '{print \\$1}') tail -f /var/log/kubernetes/audit/audit.log\" | tee ./ksonnet-e2e.log")

Bascially went through the tutorial:
[[https://ksonnet.io/docs/tutorial]]

However the main developer is supposed to get with me this week to fix e2e tests.
** helm
There is a PR for some e2e tests...
https://github.com/kubernetes/helm/pull/3636
so we're building this branch:
https://github.com/adamreese/helm/tree/test/e2e

Downloads taking forever.....
** skaffold

./create_ns_sa.sh skaffold-apisnoop

Pretty much went through the demo:

https://github.com/GoogleContainerTools/skaffold#iterative-development
#+CALL: process(buffer="*ksonnet-skaffold-logs*",command="gcloud compute ssh k8s-apisnoop-2ba342b1-master-qjl9 --command \"sudo docker exec \\$(sudo docker ps -a | grep kube-apiserver-amd64 | awk '{print \\$1}') tail -f /var/log/kubernetes/audit/audit.log\" | tee ./skaffold-e2e.log")

* Create a service account / namespace / context

#+NAME: apisnoop-ksonnet-setup
#+BEGIN_SRC bash 
KAPP=$1
cat <<-EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: apisnoop-$KAPP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: apisnoop-$KAPP
  name: apisnoop-$KAPP
  namespace: apisnoop-$KAPP
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    component: apisnoop-$KAPP
  name: apisnoop-$KAPP
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: apisnoop-$KAPP
subjects:
- kind: ServiceAccount
  name: apisnoop-$KAPP
  namespace: apisnoop-$KAPP
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    component: apisnoop-$KAPP
  name: apisnoop-$KAPP
  namespace: apisnoop-$KAPP
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
EOF
#+END_SRC

#+RESULTS: apisnoop-ksonnet-setup
| namespace                                    | apisnoop-ksonnet | created |
| serviceaccount                               | apisnoop-ksonnet | created |
| clusterrolebinding.rbac.authorization.k8s.io | apisnoop-ksonnet | created |
| clusterrole.rbac.authorization.k8s.io        | apisnoop-ksonnet | created |

#+NAME create_ns_sa 
#+BEGIN_SRC shell :tangle create_ns_sa.sh :shebang #!/bin/bash
  # create our ns and sa
  KAPP=$1
  kubectl create ns $KAPP
  kubectl create serviceaccount $KAPP --namespace $KAPP
  # RBAC setup
  cat <<-EOF | kubectl apply -f -
  apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: $KAPP
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-admin
  subjects:
  - kind: ServiceAccount
    name: $KAPP
    namespace: $KAPP
  EOF

  # gather current token + current config
  TOKEN=$(kubectl -n $KAPP get secret $(
      kubectl -n $KAPP get secret | grep $KAPP | awk '{print $1}'
          ) -o=jsonpath='{.data.token}' | base64 -d)
  CURRENT_CONTEXT=$(kubectl config current-context)
  CURRENT_CLUSTER=$(kubectl config get-contexts $CURRENT_CONTEXT | tail -1 | awk '{print $3}')

  # use new credentials / context
  kubectl config set-credentials $KAPP --token $TOKEN
  kubectl config set-context $KAPP --namespace $KAPP --user $KAPP --cluster $CURRENT_CLUSTER
  kubectl config use-context $KAPP
#+END_SRC

#+CALL: shell(buffer="*ansi-term*",command="gcloud compute ssh k8s-apisnoop-2ba342b1-master-qjl9 --command \"sudo docker exec \\$(sudo docker ps -a | grep kube-apiserver-amd64 | awk '{print \\$1}') tail -f /var/log/kubernetes/audit/audit.log\" | tee ./draft-manual.log > /dev/null")

#+CALL: process(buffer="*logs*",command="gcloud compute ssh k8s-apisnoop-2ba342b1-master-qjl9 --command \"sudo docker exec \\$(sudo docker ps -a | grep kube-apiserver-amd64 | awk '{print \\$1}') tail -f /var/log/kubernetes/audit/audit.log\" | tee ./draft-manual.log")

#+CALL: process(buffer="*gron-full*",command="tail -f ./draft-manual.log | grep -v '.user.username = \"system:' | gron -s")
#+CALL: process(buffer="*gron*",command="tail -f ./draft-manual.log | gron -s | grep -v 'verb\|user.username\|requestURI\|objectRef.apiGroup\|objectRef.apiVersion\|apiresource=\"roles\"'")

#+BEGIN_SRC shell :tangle pull_logs.sh :shebang #!/bin/bash
  gcloud compute ssh k8s-apisnoop-2ba342b1-master-qjl9 --command \
    "sudo docker exec \$(sudo docker ps -a | grep kube-apiserver-amd64 | awk '{print \$1}') tail -f /var/log/kubernetes/audit/audit.log"
#+END_SRC

#+NAME: gron makes grepping json easier
#+BEGIN_SRC shell :tangle gron_logs.sh :shebang #!/bin/bash
  tail -f ./draft-manual.log | gron -s \
    | grep -v 'verb\|user.username\|requestURI\|objectRef.apiGroup\|objectRef.apiVersion\|apiresource="roles"
#+END_SRC


#+NAME: are_we_rbac?
#+BEGIN_SRC shell
  # a bit more to type, but much faster
  kubectl get pod --namespace=kube-system --selector=component=kube-apiserver -o jsonpath='{.items[0].spec.containers[0].command}' | sed 's:.*--authorization-mode=::' | awk '{print $1}'
  # this one hangs for me when logs are large
  # kubectl cluster-info dump | grep authorization-mode
#+END_SRC

#+RESULTS:
| Node | RBAC |

#+begin_src elisp :results scalar
(org-babel-lob-ingest "lob.org")
#+end_src
* Footnotes
  
#+CALL process(command="ls -la")

#+NAME: process
#+HEADERS: :exports none :results silent :var buffer="OUTPUT"
#+BEGIN_SRC emacs-lisp :var command="echo"
;(lwarn 'bytecomp :warning (concat buffer " " command))
(start-process-shell-command buffer buffer command)
(message (concat buffer " " command))
;(concat "success" "yeah")
#+END_SRC

#+NAME: shell
#+HEADERS: :var buffer="*ansi-term*" :results output drawer silent
#+BEGIN_SRC emacs-lisp :var command="echo"
(process-send-string (get-process buffer) (concat command "\n"))
#+END_SRC

# Local Variables:
# eval: (org-babel-do-load-languages 'org-babel-load-languages '((go . t)(shell . t)))
# eval: (org-babel-lob-ingest "lob.org")
# eval: (setenv "KUBECONFIG" "/zfs/home/chris/src/apisnoop/dev/gce/kubeconfig")
# org-confirm-babel-evaluate: nil
# aexplicit-shell-file-name: '/bin/bash'
# End:
