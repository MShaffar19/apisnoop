#+TITLE: Contributing to Kubernetes Conformance Coverage
#+AUTHOR: ii.coop
#+PROPERTY: header-args:tmate+ :session kubekohn :socket /tmp/kubecon

* doc notes                                                        :noexport:
ii @ Kubecon 2020 North America

This presentation should be available as:

https://docs.apisnoop.io/presentations/kubecon-2020-north-america.html

This presentation should be run from within sharing.io cluster.

This will allow the tmate block/sessions to work correctly.

* About ii

Coding Coop in New Zealand

- Focus on Cooperative Coding
- Pairing is Sharing
- ii.coop

** People
- Hippie Hacker
- Caleb Woodbine
- Zach Mandeville
- Stephen Heywood
- Berno Kleinhans
- Riaan Kleinhans
* INTRO
  :LOGBOOK:
  CLOCK: [2020-10-23 Fri 09:35]--[2020-10-23 Fri 10:00] =>  0:25
  :END:
** What is Kubernetes Conformance?

CNCF Kubernetes Conformance ensures

#+begin_quote
... that every vendorâ€™s version of Kubernetes supports the required APIs, as do open source community versions
#+end_quote

#+begin_notes
It's good to have shared expectations of an API, regardless of who's hosting it for you.
#+end_notes
** Conformance website

#+NAME: Conformance-Kubernetes

https://cncf.io/ck

[[./kubecon-2020-north-america-ck.png]]

** k8s-conformance repo

https://github.com/cncf/k8s-conformance

#+NAME: Kubernetes Conformance repo
[[./kubecon-2020-north-america-conformance-repo.png]]

** Why is Kubernetes Conformance important?

Conformance with Kubernetes ensures:

- portability of workloads
  - stable APIs behave the same everywhere
- freedom from vendor lock-in
  - consistency with APIs

#+begin_notes
I expectate my workloads to running anywhere k8s does, regardless of vendor.
#+end_notes

*** Who can meet your k8spectations?

Currently, there are ~67 certified distributions.

[[https://landscape.cncf.io/category=platform&format=card-mode&grouping=category][landscape.cncf.io]]

Click *Certified K8s/KCSP/KTP* link on the left

[[./kubecon-2020-north-america-landscape.png]]

* How do I certify my k8s distribution?
*** Creating your Conformance Submission

[[https://github.com/cncf/k8s-conformance/blob/master/instructions.md][cncf/k8s-conformance /instructions.md]]

#+begin_example
vX.Y/$dir/README.md: how to reproduce your results.
vX.Y/$dir/e2e.log: Test log output (from Sonobuoy).
vX.Y/$dir/junit_01.xml: Machine-readable test log (from Sonobuoy).
vX.Y/$dir/PRODUCT.yaml: Details of your PRODUCT
#+end_example

#+begin_notes
Four files
- docs to reproduce
- product metadata
- two types of logs
#+end_notes

*** Document How to Bring test your cluster

Example *README.md* with instructions:

[[https://github.com/cncf/k8s-conformance/tree/master/v1.18/kind][cncf/k8s-conformance/tree/master/v1.18/kind]]

   #+begin_src tmate :window kind :var RUN="KIND"
     time ./kind-run.sh 1.18.0
   #+end_src

   #+begin_notes
run next two code block
   #+end_notes

*** Sonobuoy Logs
   #+begin_src tmate :window log :var RUN="SONOLOG"
     sonobuoy logs -f
   #+end_src
*** Watch Sonobuoy
   #+begin_src tmate :window watch :var RUN="SONOWATCH"
     watch kubectl get all --all-namespaces
   #+end_src
*** Sonobuoy Results
    #+begin_src tmate :window results :var RUN="RESULTS"
      find v1.*/plugins/e2e/results/global
    #+end_src

    #+RESULTS:
    #+begin_example
    v1.18.0_2020-10-20_14:34.00/plugins/e2e/results/global
    v1.18.0_2020-10-20_14:34.00/plugins/e2e/results/global/junit_01.xml
    v1.18.0_2020-10-20_14:34.00/plugins/e2e/results/global/e2e.log
    #+end_example
*** Submit cncf/k8s-conformance results

#+begin_notes
Run next code block
#+end_notes

[[https://github.com/cncf/k8s-conformance/blob/master/instructions.md#uploading][cncf/k8s-conformance instructions.md#uploading]]

*** Fork+Branch+Remote
   #+begin_src tmate :window PR :var RUN="FORK"
       git clone https://github.com/cncf/k8s-conformance
       cd k8s-conformance
       git remote add ii git@github.com:ii/k8s-conformance
       git checkout -b notkind-v1.18
   #+end_src
*** Copy results into place
   #+begin_src tmate :window PR :var RUN="COPY"
     cp -a ../notkind v1.18/notkind
     cp -a ../v1.*/plugins/e2e/results/global/* v1.18/notkind
     git status
   #+end_src
*** Commit and Push Results
   #+begin_src tmate :window PR :var RUN="PUSH"
     git add v1.18/notkind
     git commit -m 'Conformance results for v1.18/notkind'
     git push ii notkind-v1.18
   #+end_src
*** Open a PR to cncf/k8s-conformance
[[https://github.com/cncf/k8s-conformance/compare/master...ii:notkind-v1.18-test][cncf/k8s-conformance/compare/master...your:branch]]
*** Contents of the PR

    #+begin_src bash :dir k8s-conformance
      git diff --name-only origin/master
    #+end_src

    #+RESULTS:
    #+begin_src bash
    v1.18/notkind/PRODUCT.yaml
    v1.18/notkind/README.md
    v1.18/notkind/e2e.log
    v1.18/notkind/junit_01.xml
    #+end_src

    #+begin_notes
This will allow the CNCF and the community to verify
your submission includes all the test results and metadata
required for conformance.
    #+end_notes
* DEEP DIVE
Gaps in Kubernetes Conformance Coverage

- Identify
- Close
- Prevent

#+begin_notes
switch obs scene to INTRO
#+end_notes
* Identifying Gaps in Kubernetes Conformance Coverage
** https://apisnoop.cncf.io

[[./kubecon-2020-north-america-sunburst.png]]

** snoopDB
[[https://github.com/cncf/apisnoop/blob/master/apps/snoopdb/tables-views-functions.org#basic-database-setup][Database Setup]] Schemas:
- public :: from k/k [[https://github.com/kubernetes/kubernetes/tree/master/api/openapi-spec][swagger.json]]
- conformance :: CI job [[https://gcsweb.k8s.io/gcs/kubernetes-jenkins/logs/ci-kubernetes-gce-conformance-latest/1319331777721929728/artifacts/bootstrap-e2e-master/][api-audit.logs]]
- testing :: from live in-cluster usage

#+begin_notes
How can I deploy snoopdb in my cluster and ask my own questions about the API shape and usage?
#+end_notes
** How can I deploy snoopdb?

*MANY* ways to deploy, one ~kind~ way:

   #+begin_src bash :eval never
     git clone https://github.com/cncf/apisnoop
     cd apisnoop/kind
     kind create cluster --config=kind+apisnoop.yaml
     kubectl wait --for=condition=Ready --timeout=600s \
       --selector=app.kubernetes.io/name=auditlogger pod
   #+end_src

** Schemas
   #+begin_example
         Name     |  Size   |                       Description
     -------------+---------+----------------------------------------------------------
      audit_event | 884 MB  | every event from an e2e test run, or multiple test runs.
      open_api    | 5080 kB | endpoint details from openAPI spec
   #+end_example
** Loading K8s API into SQL
- SnoopDB :: [[https://github.com/cncf/apisnoop/blob/master/apps/snoopdb/postgres/snoopUtils.py#L290-L292][loads the OpenAPI swagger.json]]
#+begin_src python :eval never
    swagger_url = K8S_GITHUB_REPO + commit_hash + \
      '/api/openapi-spec/swagger.json'
    openapi_spec = load_openapi_spec(swagger_url)
#+end_src
** OpenAPI Table
- K8s API definition :: shape of API

#+begin_src sql-mode
  \d open_api ; describe table
#+end_src

#+RESULTS:
#+begin_SRC example
    Column    |            Type             |
--------------+-----------------------------+
 release      | text                        |
 release_date | timestamp without time zone |
 endpoint     | text                        |
 level        | text                        |
 category     | text                        |
 path         | text                        |
 k8s_group    | text                        |
 k8s_version  | text                        |
 k8s_kind     | text                        |
 k8s_action   | text                        |
 deprecated   | boolean                     |
 description  | text                        |
 spec         | text                        |
#+end_SRC

** PSQL Example Query

Newly Stable Endpoints

   #+begin_src bash :eval never
      export PGUSER=apisnoop PGHOST=localhost
   #+end_src

   #+begin_src bash :var PGHOST="localhost" :var PGUSER="apisnoop" :prologue "export PGHOST PGUSER" :wrap example
     psql -c "with endpoint_and_first_release as (
      select endpoint, level,
      (array_agg(release order by release::semver))[1]
         as first_release
       from open_api group by level, endpoint)
     select level, endpoint, first_release
       from endpoint_and_first_release
      where first_release = '1.20.0' and level='stable';"
   #+end_src

   #+RESULTS:
   #+begin_example
    level  |           endpoint           | first_release
   --------+------------------------------+---------------
    stable | getInternalApiserverAPIGroup | 1.20.0
   (1 row)

   #+end_example

** Audit CI logs in a DB
- SnoopDB loads recent CI audit logs
- Query Test Job K8s API Usage
** kind-conformance-audit job

[[https://testgrid.k8s.io/sig-arch-conformance#kind-conformance-audit][testgrid.k8s.io/sig-arch-conformance#kind-conformance-audit]]

[[./kubecon-2020-north-america-kind-audit-job.png]]

** AuditEvent Table
- K8s API definition :: shape of API

#+begin_src sql-mode
\d audit_event ; describe table
#+end_src

#+RESULTS:
#+begin_SRC example
    Column     |            Type             |
---------------+-----------------------------+
 release       | text                        |
 release_date  | text                        |
 audit_id      | text                        |
 endpoint      | text                        |
 useragent     | text                        |
 test          | text                        |
 test_hit      | boolean                     |
 conf_test_hit | boolean                     |
 data          | jsonb                       |
 source        | text                        |
 id            | integer                     |
 ingested_at   | timestamp without time zone |
#+end_SRC

** Prow Job Audit Logs

By default we load recent conformance prow jobs

   #+begin_src sql-mode
     select distinct release,
                     split_part(source,'/',8) as "prow-job"
       from audit_event
      where source like 'https://prow.k8s.io%';
   #+end_src

   #+RESULTS:
   #+begin_SRC example
    release |               prow-job
   ---------+--------------------------------------
    1.20.0  | ci-kubernetes-gce-conformance-latest
    1.20.0  | ci-kubernetes-e2e-gci-gce
   (2 rows)

   #+end_SRC

** e2e.test framework support
- UserAgent updated to include test name
- AuditLogs include test and operation
** Conformance Tests

   #+begin_src sql-mode
     select distinct test
       from audit_event
       where test ilike '%Conformance%'
       limit 5
       ;
   #+end_src

   #+RESULTS:
   #+begin_SRC example
                                                                                    test
   ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    [sig-storage] Projected secret should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance]
    [sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]
    [sig-network] Services should provide secure master service  [Conformance]
    [sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]
    [sig-api-machinery] Secrets should fail to create secret due to empty secret key [Conformance]
   (5 rows)

   #+end_SRC

** New Endpoints in 1.20

https://apisnoop.cncf.io

[[./kubecon-2020-north-america-newendpoints.png]]

** Coverage at Time of Release

[[https://apisnoop.cncf.io/conformance-progress]]

[[./kubecon-2020-north-america-release-coverage.png]]

#+begin_notes
This graph shows about 3 years of work.
The conformance program was initiated during 1.9 and ii started writing tests at around 1.15.
We color in the grey with red, to fill in the debt (aka gaps) in coverage.
#+end_notes
** Current Conformance Debt

[[https://apisnoop.cncf.io/conformance-progress]]

[[./kubecon-2020-north-america-current-debt.png]]
#+begin_notes
The current conformance debt shows how old our debt is, and how much remains.
We hope to clear all debt back to 1.11 by the time we cut the 1.20 release.
#+end_notes
* Closing gaps in Kubernetes Conformance Coverage
** Identifying an untested features
  #+NAME: untested_stable_core_endpoints
  #+begin_src sql-mode
    SELECT
      endpoint,
      -- k8s_action,
      -- path,
      -- description,
      kind
      FROM testing.untested_stable_endpoint
      where eligible is true
      and category = 'core'
      order by kind, endpoint desc
      limit 5;
  #+end_src

  #+RESULTS: untested_stable_core_endpoints
  #+begin_SRC example
               endpoint             |  kind
  ----------------------------------+---------
   createCoreV1NamespacedPodBinding | Binding
   createCoreV1NamespacedBinding    | Binding
   replaceCoreV1NamespacedEvent     | Event
   readCoreV1NamespacedEvent        | Event
   patchCoreV1NamespacedEvent       | Event
  (5 rows)

  #+end_SRC
  #+begin_notes
    We start with a query to focus on specific untested endpoints.
    Here we search for the first 5 stable/core endpoints, which are eligible for conformance, but lack tests.
  #+end_notes
** Discover docs on target endpoints

- [[https://kubernetes.io/docs/reference/kubernetes-api/][Kubernetes API Reference Docs]]
- [[https://github.com/kubernetes/client-go/blob/master/kubernetes/typed][client-go - corev1]]

  #+begin_notes
    Got endpoint, go to reference docs, thank sig-docs.
    Understand how to talk to the resource in the client-go corev1 folder.
  #+end_notes

** Describe the outline

To test through the lifecycle of a resource:

1. Create a RESOURCENAME

2. Patch the RESOURCENAME

3. Get the RESOURCENAME

4. List all RESOURCENAMEs

5. Delete RESOURCENAME

#+begin_notes
Here's an outline of the test we will write.
It's often the lifecycle of the resource.

Hippie Interupts: This allows discussion of the approach without needing to have a fully fleshed out test yet.
#+end_notes

** Write a mock test

Prove coverage change by exercising the endpoints:

#+NAME: small snippet
#+begin_src go :eval never
  fmt.Println("creating a Pod")

  // ... declare the test pod resource

  _, err = ClientSet
             .CoreV1().Pods(testNamespaceName)
             .Create(context.TODO(),
                     &testPod,
                     metav1.CreateOptions{})
  if err != nil {
      fmt.Println(err, "failed to create Pod")
      return
  }
#+end_src

#+begin_notes
At this point we don't yet use the e2e test suite, as this code is exported into our tickets before writing a PR.
#+end_notes

** Validate the coverage change
List endpoints hit by the test:
#+begin_src sql-mode :exports both :session none
select * from testing.endpoint_hit_by_new_test;
#+end_src

#+RESULTS:
#+begin_SRC example
     useragent     |           endpoint            | hit_by_ete | hit_by_new_test
-------------------+-------------------------------+------------+-----------------
 live-test-writing | createCoreV1NamespacedPod     | t          |               4
 live-test-writing | deleteCoreV1NamespacedPod     | t          |               4
 live-test-writing | listCoreV1PodForAllNamespaces | t          |               4
(3 rows)

#+end_SRC

#+begin_notes
We run the mock-test in cluster, and set the useragent to 'live-test-writing'
which allows us to see what new/untested endpoints are hit by our test-to-be.
#+end_notes

** Display endpoint coverage change
  #+begin_src sql-mode :eval never-export :exports both :session none
    select change_in_number
    from testing.projected_change_in_coverage;
  #+end_src

  #+RESULTS:
  #+begin_SRC example
   change_in_number
  ------------------
                  0
  (1 row)

  #+end_SRC

#+begin_notes
This test wasn't effective enough.

Pods are already covered in conformance.
#+end_notes

** Submitting a mock ticket
- exported as Markdown
- submitted as GitHub issues.
[[./kubecon-2020-north-america-board.png]]

* Preventing gaps in Kubernetes Conformance Coverage
** testgrid.k8s.io

[[./kubecon-2020-north-america-testgrid.png]]

** sig-arch / conformance prow jobs

[[https://github.com/kubernetes/test-infra/tree/master/config/jobs/kubernetes/sig-arch][kubernetes/test-infra config/jobs/kubernetes/sig-arch]]

[[./kubecon-2020-north-america-prow-jobs.png]]

** apisnoop-conformance-gate

[[https://github.com/kubernetes/test-infra/blob/master/config/jobs/kubernetes/sig-arch/conformance-gate.yaml][Eventually Release Blocking Conformance Job]]

[[./kubecon-2020-north-america-blocking-job.png]]

** Job Fails and Emails

Any new gaps in coverage are detected

#+begin_src yaml
  name: apisnoop-conformance-gate
  annotations:
    testgrid-dashboards: sig-arch-conformance
    testgrid-tab-name: apisnoop-conformance-gate
    test-grid-alert-email: kubernetes-sig-arch-conformance-test-failures@googlegroups.com
    testgrid-num-failures-to-alert: '1'
    description: 'Uses APISnoop to check that new GA endpoints are conformance tested in latest e2e test run'
#+end_src

#+begin_notes
This job will help us notify sig-release that there is a new API that must have Conformance Tests OR be reverted before a release can happen.
#+end_notes

* DEEP DIVE Summary
Gaps in Kubernetes Conformance Coverage

- Identify :: using apisnoop.cncf.io + snoopdb
- Close :: using humacs in-cluster workflow
- Prevent :: release blocking jobs
* Verifying Conformance Submissons
prow.cncf.io

Remember our PR submission from earlier?

** Results submitted

[[./kubecon-2020-north-america-pr-page.png]]

** CNCF CI comments

[[./kubecon-2020-north-america-prow-comments.png]]

** Informational labels

[[./kubecon-2020-north-america-pr-labels.png]]

** Certified distributions

[[./kubecon-2020-north-america-certified-distributions.png]]

** Certified Logo (tm)
[[./kubecon-2020-north-america-certified-logo.png]]
* Q&A
- https://cncf.io/ck
- https://apisnoop.cncf.io
- https://testgrid.k8s.io
- https://github.com/cncf/k8s-conformance
- https://github.com/cncf/apisnoop
* Footnotes
** reset
**** reset branch
     #+begin_src tmate :window PR
     cd ~/apisnoop/docs/presentations/k8s-conformance
     git push ii :notkind-v1.18
     #+end_src

**** delete k8s-conformance folder
     #+begin_src tmate :window PR
       rm -rf ~/apisnoop/docs/presentations/k8s-conformance
     #+end_src
**** delete k8s-conformance folder
     #+begin_src tmate :window PR
       rm -rf ~/apisnoop/docs/presentations/v1.*/
     #+end_src
**** Remove sonobuoy
     #+begin_src tmate :window PR
       kubectl -n sonobuoy delete pod sonobuoy
     #+end_src
** target tmate
   #+name: create tmate target
   #+begin_src bash :eval never
     tmate -S /tmp/kubecon
   #+end_src
** STOW In Cluster Interfacing

   #+begin_src bash :eval never
      export PGUSER=apisnoop PGHOST=localhost
   #+end_src

   #+begin_src bash :var PGHOST="localhost" :var PGUSER="apisnoop" :prologue "export PGHOST PGUSER" :wrap example
      psql -c "select distinct useragent \
                 from testing.audit_event \
                 where useragent not ilike 'kube-%';"
   #+end_src

   #+RESULTS:
   #+begin_example
                              useragent
   ----------------------------------------------------------------
    kubelet/v1.18.0 (linux/amd64) kubernetes/9e99141
    kindnetd/v0.0.0 (linux/amd64) kubernetes/$Format
    sonobuoy/v0.0.0 (darwin/amd64) kubernetes/$Format
    kubectl/v1.19.2 (darwin/amd64) kubernetes/f574309
    coredns/v0.0.0 (linux/amd64) kubernetes/$Format
    local-path-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format
   (6 rows)

   #+end_example

** Auditing the OpenAPI
- APIServer can be configured to log usage
- Combining an AuditPolicy and AuditSink
- Usage is logged into SnoopDB in a cluster
** SnoopDB in cluster
- Identify in Cluster Usage
- Focus on hitting Gaps in API
** LOCAL VARS
#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.9.2
#+NOREVEAL_ROOT: https://raw.githubusercontent.com/hakimel/reveal.js/3.9.2/
# #+REVEAL_TITLE_SLIDE:
#+NOREVEAL_DEFAULT_FRAG_STYLE: YY
#+NOREVEAL_EXTRA_CSS: YY
#+NOREVEAL_EXTRA_JS: YY
#+REVEAL_HLEVEL: 2
#+REVEAL_MARGIN: 0.1
#+REVEAL_WIDTH: 1000
#+REVEAL_HEIGHT: 600
#+REVEAL_MAX_SCALE: 3.5
#+REVEAL_MIN_SCALE: 0.2
#+REVEAL_PLUGINS: (markdown notes highlight multiplex)
#+REVEAL_SLIDE_NUMBER: ""
#+REVEAL_SPEED: 1
#+REVEAL_THEME: moon
#+REVEAL_THEME_OPTIONS: beige|black|blood|league|moon|night|serif|simple|sky|solarized|white
#+REVEAL_TRANS: cube
#+REVEAL_TRANS_OPTIONS: none|cube|fade|concave|convex|page|slide|zoom

#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: mathjax:Y
#+OPTIONS: reveal_single_file:nil
#+OPTIONS: reveal_control:t
#+OPTIONS: reveal-progress:t
#+OPTIONS: reveal_history:nil
#+OPTIONS: reveal_center:t
#+OPTIONS: reveal_rolling_links:nil
#+OPTIONS: reveal_keyboard:t
#+OPTIONS: reveal_overview:t
