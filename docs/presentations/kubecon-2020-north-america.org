#+TITLE: Contributing to Kubernetes Conformance Coverage
#+AUTHOR: ii.coop

* doc notes                                                        :noexport:
ii @ Kubecon 2020 North America

This presentation should be available as:

https://docs.apisnoop.io/presentations/kubecon-2020-north-america.html

This presentation should be run from within sharing.io cluster.

This will allow the tmate block/sessions to work correctly.

* About ii
** People
- Hippie Hacker
- Caleb Woodbine
- Zach Mandeville
- Stephen Heywood
- Berno Kleinhans
- Riaan Kleinhans
* Intro
** What is Kubernetes Conformance?

CNCF Kubernetes Conformance ensures

#+begin_quote
... that every vendorâ€™s version of Kubernetes supports the required APIs, as do open source community versions
#+end_quote

- https://cncf.io/ck
- https://github.com/cncf/k8s-conformance

** Why is Kubernetes Conformance important?

Conformance with Kubernetes ensures:

- portability of workloads
  - stable APIs behave the same everywhere
- freedom from vendor lock-in
  - consistency with APIs

*** How many Kubernetes Distributions are Certified?

Currently, there are ~67 certified distributions.

- [[https://landscape.cncf.io/category=platform&format=card-mode&grouping=category][landscape.cncf.io]]

Click *Certified K8s/KCSP/KTP* link on the left
** How do I certify/verify a distribution?
*** Creating your Conformance Submission

[[https://github.com/cncf/k8s-conformance/blob/master/instructions.md][cncf/k8s-conformance /instructions.md]]

#+begin_example
vX.Y/$dir/README.md: how to reproduce your results.
vX.Y/$dir/e2e.log: Test log output (from Sonobuoy).
vX.Y/$dir/junit_01.xml: Machine-readable test log (from Sonobuoy).
vX.Y/$dir/PRODUCT.yaml: Details of your PRODUCT
#+end_example

*** Document How to Bring test your cluster

Example *README.md* with instructions:

[[https://github.com/cncf/k8s-conformance/tree/master/v1.18/kind][cncf/k8s-conformance/tree/master/v1.18/kind]]

   #+begin_src tmate :window kind
     time ./kind-run.sh 1.18.0
   #+end_src

*** Watch Sonobuoy
   #+begin_src tmate :window watch
     watch kubectl get all --all-namespaces
   #+end_src
*** Sonobuoy Logs
   #+begin_src tmate :window log
     sonobuoy logs -f
   #+end_src
*** Sonobuoy Results
    #+begin_src tmate :window results
      find v1.*/plugins/e2e/results/global
    #+end_src

    #+RESULTS:
    #+begin_example
    v1.18.0_2020-10-20_14:34.00/plugins/e2e/results/global
    v1.18.0_2020-10-20_14:34.00/plugins/e2e/results/global/junit_01.xml
    v1.18.0_2020-10-20_14:34.00/plugins/e2e/results/global/e2e.log
    #+end_example
*** Submit cncf/k8s-conformance results

[[https://github.com/cncf/k8s-conformance/blob/master/instructions.md#uploading][cncf/k8s-conformance instructions.md#uploading]]

**** Fork+Branch+Remote
    #+begin_src tmate :window PR
        git clone https://github.com/cncf/k8s-conformance
        cd k8s-conformance
        git remote add ii git@github.com:ii/k8s-conformance
        git checkout -b notkind-v1.18
    #+end_src
**** Copy results into place
    #+begin_src tmate :window PR
      cp -a ../notkind v1.18/notkind
      cp -a ../v1.*/plugins/e2e/results/global/* v1.18/notkind
      git status
    #+end_src
**** Commit and Push Results
    #+begin_src tmate :window PR
      git add v1.18/notkind
      git commit -m 'Conformance results for v1.18/notkind'
      git push ii notkind-v1.18:notkind-v1.18-test
    #+end_src
*** Open a PR to cncf/k8s-conformance
[[https://github.com/cncf/k8s-conformance/compare/master...ii:notkind-v1.18-test][cncf/k8s-conformance/compare/master...your:branch]]

    #+begin_src bash :dir k8s-conformance
      git diff --name-only origin/master
    #+end_src

    #+RESULTS:
    #+begin_src bash
    v1.18/notkind/PRODUCT.yaml
    v1.18/notkind/README.md
    v1.18/notkind/e2e.log
    v1.18/notkind/junit_01.xml
    #+end_src
    #+begin_notes
This will allow the CNCF and the community to verify
your submission includes all the test results and metadata
required for conformance.
    #+end_notes

* Identifying Gaps in Kubernetes Conformance Coverage
** Loading K8s API into SQL

- SnoopDB loads the OpenAPI swagger.json
- Enables queries of K8s API definition
- Helps to understand the shape of kubernetes
** How can I deploy and explore snoopdb?

   #+begin_src bash :eval never
     git clone https://github.com/cncf/apisnoop
     cd apisnoop/kind
     kind create cluster --config=kind+apisnoop.yaml
     kubectl wait --for=condition=Ready --timeout=600s \
       --selector=app.kubernetes.io/name=auditlogger pod
   #+end_src

   #+begin_src bash :eval never
     export PGUSER=apisnoop
     export PGHOST=localhost
     psql -c "select distinct useragent \
                from testing.audit_event;"
   #+end_src

** psql

   #+begin_src bash :eval never
      export PGUSER=apisnoop PGHOST=localhost
   #+end_src

   #+begin_src bash :var PGHOST="localhost" :var PGUSER="apisnoop" :prologue "export PGHOST PGUSER" :wrap example
      psql -c "select distinct useragent \
                 from testing.audit_event \
                 where useragent not ilike 'kube-%';"
   #+end_src

   #+RESULTS:
   #+begin_example
                              useragent
   ----------------------------------------------------------------
    kubelet/v1.18.0 (linux/amd64) kubernetes/9e99141
    kindnetd/v0.0.0 (linux/amd64) kubernetes/$Format
    sonobuoy/v0.0.0 (darwin/amd64) kubernetes/$Format
    kubectl/v1.19.2 (darwin/amd64) kubernetes/f574309
    coredns/v0.0.0 (linux/amd64) kubernetes/$Format
    local-path-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format
   (6 rows)

   #+end_example

** sql-mode

   #+begin_src sql-mode
     select 1;
   #+end_src

   #+RESULTS:
   #+begin_SRC example
    ?column?
   ----------
           1
   (1 row)

   #+end_SRC

** Loading CI logs into SQL
- SnoopDB loads recent CI audit logs
- Enables queries of K8s API usage
- Helps understand what we are testing

** e2e.test framework support
- UserAgent updated to include test name
- AuditLogs include test and operation

** Query Gaps in Conformance Coverage
- Compare Operations hit by [Conformance]
- Query untested surface area

** Visualize Data

* Closing Gaps in Kubernetes Conformance Coverage
APISnoop + AuditSink + Test writing
** Auditing the OpenAPI
- APIServer can be configured to log usage
- Combining an AuditPolicy and AuditSink
- Usage is logged into SnoopDB in a cluster
** SnoopDB in cluster
- Identify in Cluster Usage
- Focus on hitting Gaps in API
** MockTest Demo

* Preventing gaps in Kubernetes Conformance Coverage
prow.cncf.io
**

* Verifying Cloud Provider Submission
prow.cncf.io

For every vendor and distribution to be marked as official, tests must be run against the Kubernetes cluster to verify it's APIs behave in a given way per the test.

* Footnotes

#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.9.2
#+NOREVEAL_ROOT: https://raw.githubusercontent.com/hakimel/reveal.js/3.9.2/
# #+REVEAL_TITLE_SLIDE:
#+NOREVEAL_DEFAULT_FRAG_STYLE: YY
#+NOREVEAL_EXTRA_CSS: YY
#+NOREVEAL_EXTRA_JS: YY
#+REVEAL_HLEVEL: 2
#+REVEAL_MARGIN: 0.1
#+REVEAL_WIDTH: 1000
#+REVEAL_HEIGHT: 600
#+REVEAL_MAX_SCALE: 3.5
#+REVEAL_MIN_SCALE: 0.2
#+REVEAL_PLUGINS: (markdown notes highlight multiplex)
#+REVEAL_SLIDE_NUMBER: ""
#+REVEAL_SPEED: 1
#+REVEAL_THEME: moon
#+REVEAL_THEME_OPTIONS: beige|black|blood|league|moon|night|serif|simple|sky|solarized|white
#+REVEAL_TRANS: cube
#+REVEAL_TRANS_OPTIONS: none|cube|fade|concave|convex|page|slide|zoom

#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: mathjax:Y
#+OPTIONS: reveal_single_file:nil
#+OPTIONS: reveal_control:t
#+OPTIONS: reveal-progress:t
#+OPTIONS: reveal_history:nil
#+OPTIONS: reveal_center:t
#+OPTIONS: reveal_rolling_links:nil
#+OPTIONS: reveal_keyboard:t
#+OPTIONS: reveal_overview:t
