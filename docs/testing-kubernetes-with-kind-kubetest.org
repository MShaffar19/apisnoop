#+TITLE: Testing Kubernetes with kind and kubetest
#+AUTHOR: Stephen Heywood
#+EMAIL: stephen@ii.coop
#+CREATOR: ii.coop
#+DATE:  1st May, 2019
#+STARTUP: showeverything

* Objective

The end goal for this document is to show how to run a single of test using ~kubetest~. It follows on from this [[setup-kubetest-kind-on-packet.org][setup document]].

/Note: The setup requires using an account with 'root' privileges on the server./


* Setup kubetest

There's several key bits of software required to support [[https://github.com/kubernetes/test-infra/tree/master/kubetest][kubetest]] from [[https://www.docker.com/][docker]], [[https://kind.sigs.k8s.io/][kind]] and [[https://kubernetes.io/][kubernetes]]. Please make sure that those steps are completed first.


* Update the current session

We just installed a number of components, so we need the current shell session to be in sync with the new environment variables.

#+BEGIN_SRC tmate
. ~/.bashrc
env | grep GO
#+END_SRC

This should provide a result as below.

#+BEGIN_EXAMPLE
GOPATH=/root/go
GOROOT=/usr/local/go/
#+END_EXAMPLE


* Pretest setup

With a Kubernetes cluster up and running from the end of the 'setup' process, it's time to check out the framework for how Kubernetes is tested.

** Add setting from e2e.sh main()

#+BEGIN_SRC tmate
ARTIFACTS="${ARTIFACTS:-${PWD}/_artifacts}"
mkdir -p "${ARTIFACTS}"
export ARTIFACTS
#+END_SRC

** Add Environment variables

#+BEGIN_SRC tmate
export KUBECONFIG="$HOME/.kube/kind-config-kind-kubetest"
export SKIP="ginkgo skip regex"
export FOCUS="ginkgo focus regex"
#+END_SRC

** Setup and export function ~run_tests~

#+BEGIN_SRC tmate
run_tests() {
    # base kubetest args
    KUBETEST_ARGS="--provider=skeleton --test --check-version-skew=false"

    # get the number of worker nodes
    # TODO(bentheelder): this is kinda gross
    NUM_NODES="$(kubectl get nodes \
        -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.taints}{"\n"}{end}' \
        | grep -cv "node-role.kubernetes.io/master" \
    )"

    # ginkgo regexes
    SKIP="${SKIP:-"Alpha|Kubectl|\\[(Disruptive|Feature:[^\\]]+|Flaky)\\]"}"
    FOCUS="${FOCUS:-"\\[Conformance\\]"}"
    # if we set PARALLEL=true, skip serial tests set --ginkgo-parallel
    PARALLEL="${PARALLEL:-false}"
    if [[ "${PARALLEL}" == "true" ]]; then
        SKIP="\\[Serial\\]|${SKIP}"
        KUBETEST_ARGS="${KUBETEST_ARGS} --ginkgo-parallel"
    fi

    # Remove any spaces from current FOCUS variable
    FOCUS=$(echo "$FOCUS" | sed "s/[[:space:]]/\./g")

    # add ginkgo args
    KUBETEST_ARGS="${KUBETEST_ARGS} --test_args=\"--ginkgo.focus=${FOCUS} --ginkgo.skip=${SKIP} --report-dir=${ARTIFACTS} --disable-log-dump=true --num-nodes=${NUM_NODES}\""

    # setting this env prevents ginkg e2e from trying to run provider setup
    export KUBERNETES_CONFORMANCE_TEST="y"

    # run kubetest, if it fails clean up and exit failure
    echo "./kubetest ${KUBETEST_ARGS}"
    eval "./kubetest ${KUBETEST_ARGS}"
}
export -f run_tests
#+END_SRC


* Running Tests

** Dry run without any tests

#+BEGIN_SRC tmate
cd $GOPATH/src/k8s.io/kubernetes
SKIP="ginkgo skip regex"
FOCUS="ginkgo focus regex"
run_tests
#+END_SRC

With some log output as below

#+BEGIN_EXAMPLE
Running Suite: Kubernetes e2e suite
===================================
Random Seed: 1556676611 - Will randomize all specs
Will run 0 of 3960 specs
...
Ran 0 of 3960 Specs in 0.071 seconds
SUCCESS! -- 0 Passed | 0 Failed | 0 Pending | 3960 Skipped
#+END_EXAMPLE

** Run a group of tests

Updating the variable ~FOCUS~ will give kubetest a smaller set of tests to process, therefore giving faster feedback.

#+BEGIN_SRC tmate
cd $GOPATH/src/k8s.io/kubernetes
FOCUS="Secrets"
run_tests
#+END_SRC

#+BEGIN_EXAMPLE
Running Suite: Kubernetes e2e suite
===================================
Random Seed: 1556768077 - Will randomize all specs
Will run 13 of 3960 specs
...
Ran 13 of 3960 Specs in 855.336 seconds
SUCCESS! -- 13 Passed | 0 Failed | 0 Pending | 3947 Skipped
#+END_EXAMPLE

** Running a single test

#+BEGIN_SRC tmate
# This runs a single test without any issues
cd $GOPATH/src/k8s.io/kubernetes
FOCUS="Pods should be updated"
run_tests
#+END_SRC

#+BEGIN_SRC tmate
# This should complete the same test as before but doesn't. Exit code is 0.
cd $GOPATH/src/k8s.io/kubernetes
FOCUS="[k8s.io] Pods should be updated [NodeConformance] [Conformance]"
run_tests
#+END_SRC


* Kubernetes Status

#+BEGIN_SRC tmate
kubectl get nodes
kubectl get pods --all-namespaces
#+END_SRC



* Kubernetes Reset Cluster

#+BEGIN_SRC tmate
cd $GOPATH/src/k8s.io/kubernetes
./kubetest --deployment=kind --kind-binary-version=build --provider=skeleton --down
./kubetest --deployment=kind --kind-binary-version=build --provider=skeleton --up
#+END_SRC


* References

- [[https://github.com/kubernetes/community/blob/master/contributors/devel/sig-testing/e2e-tests.md#testing-against-local-clusters][Testing against local clusters]]


* Footnotes

#+PROPERTY: header-args:bash  :tangle ./config-kubetest.sh
#+PROPERTY: header-args:bash+ :noweb yes
#+PROPERTY: header-args:bash+ :noeval
#+PROPERTY: header-args:bash+ :comments org
#+PROPERTY: header-args:bash+ :noweb-ref (nth 4 (org-heading-components))
#+PROPERTY: header-args:shell :results output code verbatim replace
#+PROPERTY: header-args:shell+ :exports both
#+PROPERTY: header-args:shell+ :wrap "EXAMPLE :noeval t"
#+PROPERTY: header-args:shell+ :eval no-export
#+PROPERTY: header-args:shell+ :noweb-ref (nth 4 (org-heading-components))
#+PROPERTY: header-args:tmate  :socket (symbol-value 'socket)
#+NOPROPERTY: header-args:tmate+ :session (concat (user-login-name) ":" (nth 4 (org-heading-components)))
#+PROPERTY: header-args:tmate+ :session (concat (user-login-name) ":main")
#+PROPERTY: header-args:tmate+ :noweb yes
#+PROPERTY: header-args:tmate+ :noweb-ref (nth 4 (org-heading-components))
#+PROPERTY: header-args:json  :noweb yes
#+PROPERTY: header-args:json+ :noweb-ref (nth 4 (org-heading-components))
#+PROPERTY: header-args:yaml  :noweb yes
#+PROPERTY: header-args:yaml+ :nocomments org
#+PROPERTY: header-args:yaml+ :noweb-ref (nth 4 (org-heading-components))
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+STARTUP: content
# Local Variables:
# eval: (set (make-local-variable 'org-file-dir) (file-name-directory buffer-file-name))
# eval: (set (make-local-variable 'user-buffer) (concat user-login-name "." (file-name-base buffer-file-name)))
# eval: (set (make-local-variable 'tmpdir) (make-temp-file (concat "/dev/shm/" user-buffer "-") t))
# eval: (set (make-local-variable 'socket) (concat "/tmp/" user-buffer ".iisocket"))
# eval: (set (make-local-variable 'select-enable-clipboard) t)
# eval: (set (make-local-variable 'select-enable-primary) t)
# eval: (set (make-local-variable 'start-tmate-command) (concat "tmate -S " socket " new-session -A -s " user-login-name " -n main \"tmate wait tmate-ready && tmate display -p '#{tmate_ssh}' | xclip -i -sel p -f | xclip -i -sel c; bash --login\""))
# eval: (xclip-mode 1)
# eval: (gui-select-text start-tmate-command)
# eval: (xclip-mode 1)
# org-babel-tmate-session-prefix: ""
# org-babel-tmate-default-window-name: "main"
# org-confirm-babel-evaluate: nil
# org-use-property-inheritance: t
# org-src-preserve-indentation: t
# End:
