#+TITLE: Testing Kubernetes with kind and kubetest
#+AUTHOR: Stephen Heywood
#+EMAIL: stephen@ii.coop
#+CREATOR: ii.coop
#+DATE:  1st May, 2019
#+STARTUP: showeverything

* Objective

The end goal for this document is to show how to run a single of test using ~kubetest~. It follows on from this [[setup-kubetest-kind-on-packet.org][setup document]].

/Note: The setup requires using an account with 'root' privileges on the server./


* Setup kubetest

There's several key bits of software required to support [[https://github.com/kubernetes/test-infra/tree/master/kubetest][kubetest]] from [[https://www.docker.com/][docker]], [[https://kind.sigs.k8s.io/][kind]] and [[https://kubernetes.io/][kubernetes]]. Please make sure that those steps are completed first.


* Update the current session

We just installed a number of components, so we need the current shell session to be in sync with the new environment variables.

Ensure go is in your path and your happy with the default/detected GO variables.

#+BEGIN_SRC shell
go env
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE :noeval t
GOARCH="amd64"
GOBIN=""
GOCACHE="/home/hippie/.cache/go-build"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOOS="linux"
GOPATH="/home/hippie/go"
GOPROXY=""
GORACE=""
GOROOT="/usr/local/go"
GOTMPDIR=""
GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
GCCGO="gccgo"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
GOMOD=""
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build423342456=/tmp/go-build -gno-record-gcc-switches"
#+END_EXAMPLE


They may or may not be present in your environment.

#+BEGIN_SRC tmate
. ~/.bashrc
env | grep GO
#+END_SRC

This could provide a result as below.

#+BEGIN_EXAMPLE
GOPATH=/root/go
GOROOT=/usr/local/go/
#+END_EXAMPLE


* Pretest setup

With a Kubernetes cluster up and running from the end of the 'setup' process, it's time to check out the framework for how Kubernetes is tested.


NOTE: (it may be unclear to the reader which 'setup' process is refered to here... probably a link to the setup, a specified directory to be in, and quick check of the status of the cluster etc.

Seems you don't need to check these out, kubetest and kind are external dependencies that can be installed via go get -u (update) and intall.)

** updating kind and kubetest binaries

#+BEGIN_SRC tmate
go get -u sigs.k8s.io/kind
go install sigs.k8s.io/kind
go get -u k8s.io/test-infra/kubetest
go install k8s.io/test-infra/kubetest
#+END_SRC
This builds a kubernetes cluster using master:
** updating the k8s source
#+BEGIN_SRC tmate
cd ~/go/src/k8s.io/kubernetes
git fetch origin master
git checkout master
git rebase origin/master
#+END_SRC
** building and starting cluster with kubetest + kind

Maybe compare the speed of the bazel vs normal builds at some point:
*** build
#+BEGIN_SRC tmate
kubetest --deployment=kind --kind-binary-version=build --provider=skeleton --build
#+END_SRC
*** bazel build
#+BEGIN_SRC tmate
kubetest --deployment=kind --kind-binary-version=build --provider=skeleton --build=bazel
#+END_SRC
*** up
#+BEGIN_SRC tmate
kubetest --deployment=kind --kind-binary-version=build --provider=skeleton --up
#+END_SRC
*** down
#+BEGIN_SRC
kubetest --deployment=kind --kind-binary-version=build --provider=skeleton --down
#+END_SRC

Just using kind to build an image from scratch (without kubetest):
** bulding and starting cluster with only kind

*** build
#+BEGIN_SRC tmate
time (
    kind build base-image
    kind build node-image --base-image kindest/base:latest --kube-root .*
  )
#+END_SRC

*** start
NOTE: You could SKIP all of the above ande just use the

#+BEGIN_SRC tmate
  time  kind create cluster --image kindest/node:latest
#+END_SRC
** start multinode cluster
   Blatently copypasted from [[https://github.com/kubernetes-sigs/kind/blob/995aaccc7b7d6934ceea4c8ff10d727ad1918229/hack/ci/e2e.sh#L9][kind/hack/ci/e2e.sh]]
*** ~/kind-config.yaml
    Write this out.
#+BEGIN_SRC yaml :tangle ~/kind-config.yaml
kind: Cluster
apiVersion: kind.sigs.k8s.io/v1alpha3
nodes:
- role: control-plane
- role: worker
- role: worker
#+END_SRC
*** create cluster w/ config.yaml
#+BEGIN_SRC tmate
kind create cluster \
     --image=kindest/node:latest \
     --retain \
     --wait=1m \
     --loglevel=debug \
     "--config=$HOME/kind-config.yaml"
export KUBECONFIG="$(kind get kubeconfig-path --name="kind")"
kubectl cluster-info
kubectl get nodes
#+END_SRC

** hack/e2e.go

Possibly updating kubetest and providing parameters
This is use in some older CI jobs to ensure kubetest is up to date, and to build the various clusters using it, then run the tests.

#+BEGIN_SRC tmate
go run hack/e2e.go -get -old 25h0m0s -- --help
#+END_SRC

* Working on your branch

Check out your branch for creating the test.

Make some changes, some commits

#+BEGIN_SRC tmate
git checkout -b MYTEST origin/master
# if you want to ensure your working with the latest upstream changes:
git fetch origin master
git rebase origin/master
#+END_SRC

** updating your e2e.test binary to include your changes
#+BEGIN_SRC tmate
export GINKO_PARALLEL=y
# Will run 179 of 1032 specs
#export KUBECONFIG=~/.kube/config
export KUBECONFIG="$HOME/.kube/kind-config-kind-kubetest"
TEST_NAME='[sig-storage] Pod Disks should be able to delete a non-existent PD without error'
TEST_NAME='[sig-cli] Kubectl client [k8s.io] Kubectl get componentstatuses should get componentstatuses'
echo $TEST_NAME
# [ => \[
# ] => \]
# :space: => .
FOCUS=$(echo "$TEST_NAME" \
  | sed "s/\[/\\\[/g" \
  | sed "s/\]/\\\]/g" \
  | sed "s/[[:space:]]/\./g")
echo $FOCUS
#+END_SRC

*** with make

Takes about 20 seconds

#+BEGIN_SRC tmate
time (
make all WHAT=test/e2e/e2e.test
PREFIX=./_output/local/go/bin/
# use --provider=gce etc for other providers
$PREFIX/e2e.test \
  --provider=skeleton \
  --ginkgo.focus="$FOCUS"
)
#+END_SRC

*** with bazel

Takes about 7 seconds

#+BEGIN_SRC tmate
time (
bazel build //test/e2e:e2e.test
PREFIX=./bazel-bin/test/e2e
$PREFIX/e2e.test \
  --ginkgo.focus="$FOCUS"
)
#+END_SRC

** Add setting from e2e.sh main()

#+BEGIN_SRC tmate
ARTIFACTS="${ARTIFACTS:-${PWD}/_artifacts}"
mkdir -p "${ARTIFACTS}"
export ARTIFACTS
#+END_SRC

** Add Environment variables

#+BEGIN_SRC tmate
export KUBECONFIG="$HOME/.kube/kind-config-kind-kubetest"
# SKIP and FOCUS need to be a valid ginko regexps for example:
export SKIP="\\[Flakey\\]"
export FOCUS="\\[Conformance\\]"
#+END_SRC

** Setup and export function ~run_tests~

#+BEGIN_SRC tmate
run_tests() {
    # base kubetest args
    KUBETEST_ARGS="--provider=skeleton --test --check-version-skew=false"

    # get the number of worker nodes
    # TODO(bentheelder): this is kinda gross
    NUM_NODES="$(kubectl get nodes \
        -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.taints}{"\n"}{end}' \
        | grep -cv "node-role.kubernetes.io/master" \
    )"

    # ginkgo regexes
    SKIP="${SKIP:-"Alpha|Kubectl|\\[(Disruptive|Feature:[^\\]]+|Flaky)\\]"}"
    FOCUS="${FOCUS:-"\\[Conformance\\]"}"
    # if we set PARALLEL=true, skip serial tests set --ginkgo-parallel
    PARALLEL="${PARALLEL:-false}"
    if [[ "${PARALLEL}" == "true" ]]; then
        SKIP="\\[Serial\\]|${SKIP}"
        KUBETEST_ARGS="${KUBETEST_ARGS} --ginkgo-parallel"
    fi

    # Remove any spaces from current FOCUS variable
    FOCUS=$(echo "$FOCUS" | sed "s/[[:space:]]/\./g")

    # add ginkgo args
    KUBETEST_ARGS="${KUBETEST_ARGS} --test_args=\"--ginkgo.focus=${FOCUS} --ginkgo.skip=${SKIP} --report-dir=${ARTIFACTS} --disable-log-dump=true --num-nodes=${NUM_NODES}\""

    # setting this env prevents ginkg e2e from trying to run provider setup
    export KUBERNETES_CONFORMANCE_TEST="y"

    # run kubetest, if it fails clean up and exit failure
    echo "./kubetest ${KUBETEST_ARGS}"
    eval "./kubetest ${KUBETEST_ARGS}"
}
export -f run_tests
#+END_SRC


* Running Tests

** Dry run without any tests

#+BEGIN_SRC tmate
cd $GOPATH/src/k8s.io/kubernetes
SKIP="\\[Flakey\\]"
FOCUS="\\[Conformance\\]"
run_tests
#+END_SRC

With some log output as below

#+BEGIN_EXAMPLE
Running Suite: Kubernetes e2e suite
===================================
Random Seed: 1556676611 - Will randomize all specs
Will run 0 of 3960 specs
...
Ran 0 of 3960 Specs in 0.071 seconds
SUCCESS! -- 0 Passed | 0 Failed | 0 Pending | 3960 Skipped
#+END_EXAMPLE

** Run a group of tests

Updating the variable ~FOCUS~ will give kubetest a smaller set of tests to process, therefore giving faster feedback.

#+BEGIN_SRC tmate
cd $GOPATH/src/k8s.io/kubernetes
FOCUS="Secrets"
run_tests
#+END_SRC

#+BEGIN_EXAMPLE
Running Suite: Kubernetes e2e suite
===================================
Random Seed: 1556768077 - Will randomize all specs
Will run 13 of 3960 specs
...
Ran 13 of 3960 Specs in 855.336 seconds
SUCCESS! -- 13 Passed | 0 Failed | 0 Pending | 3947 Skipped
#+END_EXAMPLE

** Running a single test

#+BEGIN_SRC tmate
# This runs a single test without any issues
cd $GOPATH/src/k8s.io/kubernetes
FOCUS="Pods should be updated"
run_tests
#+END_SRC

#+BEGIN_SRC tmate
# This should complete the same test as before but doesn't. Exit code is 0.
cd $GOPATH/src/k8s.io/kubernetes
FOCUS="[k8s.io] Pods should be updated [NodeConformance] [Conformance]"
run_tests
#+END_SRC


* Kubernetes Status

#+BEGIN_SRC tmate
kubectl get nodes
kubectl get pods --all-namespaces
#+END_SRC



* Kubernetes Reset Cluster

#+BEGIN_SRC tmate
cd $GOPATH/src/k8s.io/kubernetes
./kubetest --deployment=kind --kind-binary-version=build --provider=skeleton --down
./kubetest --deployment=kind --kind-binary-version=build --provider=skeleton --up
#+END_SRC


* References

- [[https://github.com/kubernetes/community/blob/master/contributors/devel/sig-testing/e2e-tests.md#testing-against-local-clusters][Testing against local clusters]]

* TIL

** Only supported for providers [gce] (not skeleton)

If you try --provider=skeleton (or use kind) and your FOCUS maches a single test not supporting skeleton:

#+BEGIN_SRC tmate
FOCUS="\\[sig-storage\\].Pod.Disks.should.be.able.to.delete.a.non-existent.PD.without.error"
echo $FOCUS
$PREFIX/e2e.test \
  --ginkgo.focus="$FOCUS"
#+END_SRC

#+BEGIN_EXAMPLE
Running Suite: Kubernetes e2e suite
===================================
Random Seed: 1557332776 - Will randomize all specs
Will run 1 of 3964 specs
#+END_EXAMPLE

It may run you test, with info messages printing:

#+BEGIN_EXAMPLE
INFO: Only supported for providers [gce] (not skeleton)
#+END_EXAMPLE

However you test will be listed as skipeed in the output:

#+BEGIN_EXAMPLE
Ran 0 of 3964 Specs in 40.061 seconds
SUCCESS! -- 0 Passed | 0 Failed | 0 Pending | 3964 Skipped
#+END_EXAMPLE
* Footnotes

#+PROPERTY: header-args:bash  :tangle ./config-kubetest.sh
#+PROPERTY: header-args:bash+ :noweb yes
#+PROPERTY: header-args:bash+ :noeval
#+PROPERTY: header-args:bash+ :comments org
#+PROPERTY: header-args:bash+ :noweb-ref (nth 4 (org-heading-components))
#+PROPERTY: header-args:shell :results output code verbatim replace
#+PROPERTY: header-args:shell+ :exports both
#+PROPERTY: header-args:shell+ :wrap "EXAMPLE :noeval t"
#+PROPERTY: header-args:shell+ :eval no-export
#+PROPERTY: header-args:shell+ :noweb-ref (nth 4 (org-heading-components))
#+PROPERTY: header-args:tmate  :socket (symbol-value 'socket)
#+NOPROPERTY: header-args:tmate+ :session (concat (user-login-name) ":" (nth 4 (org-heading-components)))
#+PROPERTY: header-args:tmate+ :session (concat (user-login-name) ":main")
#+PROPERTY: header-args:tmate+ :noweb yes
#+PROPERTY: header-args:tmate+ :noweb-ref (nth 4 (org-heading-components))
#+PROPERTY: header-args:json  :noweb yes
#+PROPERTY: header-args:json+ :noweb-ref (nth 4 (org-heading-components))
#+PROPERTY: header-args:yaml  :noweb yes
#+PROPERTY: header-args:yaml+ :nocomments org
#+PROPERTY: header-args:yaml+ :noweb-ref (nth 4 (org-heading-components))
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+STARTUP: content
# Local Variables:
# eval: (set (make-local-variable 'org-file-dir) (file-name-directory buffer-file-name))
# eval: (set (make-local-variable 'user-buffer) (concat user-login-name "." (file-name-base buffer-file-name)))
# eval: (set (make-local-variable 'tmpdir) (make-temp-file (concat "/dev/shm/" user-buffer "-") t))
# eval: (set (make-local-variable 'socket) (concat "/tmp/" user-buffer ".iisocket"))
# eval: (set (make-local-variable 'select-enable-clipboard) t)
# eval: (set (make-local-variable 'select-enable-primary) t)
# eval: (set (make-local-variable 'start-tmate-command) (concat "tmate -S " socket " new-session -A -s " user-login-name " -n main \"tmate wait tmate-ready && tmate display -p '#{tmate_ssh}' | xclip -i -sel p -f | xclip -i -sel c; bash --login\""))
# eval: (xclip-mode 1)
# eval: (gui-select-text start-tmate-command)
# eval: (xclip-mode 1)
# org-babel-tmate-session-prefix: ""
# org-babel-tmate-default-window-name: "main"
# org-confirm-babel-evaluate: nil
# org-use-property-inheritance: t
# org-src-preserve-indentation: t
# End:
