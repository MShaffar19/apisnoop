* Purpose
investigate the tests and endpoints for the last few test runs, and see what has dropped and not dropped.
* DONE count of distinct tests and op_id hit by e2e by testrun
** 1134962072287711234
  stage_ts: "2019-06-01T23:40:05.456368+00:00"
  Tests: 803
  OP_IDs hit by e2e: 198
     
  #+BEGIN_EXAMPLE graphql
        {
      audit_events_aggregate(where: {testrun_id: {_eq: "1134962072287711234"}}) {
        aggregate {
          count(columns: test_name, distinct: true)
        }
      }
    }
  #+END_EXAMPLE
  Returns 803
     
  #+BEGIN_EXAMPLE graphql 
    {
      audit_events_aggregate(where: {testrun_id: {_eq: "1134962072287711234"}, user_agent: {_ilike: "%e2e%"}}) {
        aggregate {
          count(columns: op_id, distinct: true)
        }
      }
    }
  #+END_EXAMPLE
  Returns 198

** 1141017488889221121
     "stage_ts": "2019-06-18T16:52:03.781229+00:00"
     Tests: 795
     Op_IDs hit by 'e2e': 201
     
     #+BEGIN_EXAMPLE graphql
        {
      audit_events_aggregate(where: {testrun_id: {_eq: "1141017488889221121"}}) {
        aggregate {
          count(columns: test_name, distinct: true)
        }
      }
    }
     #+END_EXAMPLE
     Returns 795
     
     #+BEGIN_EXAMPLE graphql 
{
  audit_events_aggregate(where: {testrun_id: {_eq: "1141017488889221121"}, user_agent: {_ilike: "%e2e%"}}) {
    aggregate {
      count(columns: op_id, distinct: true)
    }
  }
}
     #+END_EXAMPLE

** 1145963446211186694  
     stage_ts: "2019-07-02T08:01:02.573297+00:00"
     Tests: 795
     Op_IDs hit by 'e2e': 192
     
     #+BEGIN_EXAMPLE graphql
           {
         audit_events_aggregate(where: {testrun_id: {_eq: "1145963446211186694"}}) {
           aggregate {
             count(columns: test_name, distinct: true)
           }
         }
       }
     #+END_EXAMPLE
     Returns 795
     
     #+BEGIN_EXAMPLE graphql 
{
  audit_events_aggregate(where: {testrun_id: {_eq: "1145963446211186694"}, user_agent: {_ilike: "%e2e%"}}) {
    aggregate {
      count(columns: op_id, distinct: true)
    }
  }
}
     #+END_EXAMPLE
    returns 192
** 1152045379034812417
   stage_ts: "2019-07-19T02:54:34.479961+00:00"
   Tests: 784
   OP_IDs hit by e2e: 193
     
   #+BEGIN_EXAMPLE graphql
         {
       audit_events_aggregate(where: {testrun_id: {_eq: "1152045379034812417"}}) {
         aggregate {
           count(columns: test_name, distinct: true)
         }
       }
     }
   #+END_EXAMPLE
   Returns 784
     
   #+BEGIN_EXAMPLE graphql 
     {
       audit_events_aggregate(where: {testrun_id: {_eq: "1152045379034812417"}, user_agent: {_ilike: "%e2e%"}}) {
         aggregate {
           count(columns: op_id, distinct: true)
         }
       }
     }
   #+END_EXAMPLE
   Returns 193

* TODO diff of distinct endpoints  between testruns
  We have a script now, =scripts/gatherendpoints.json= that loops through our known testruns and writes all the endpoints to file.
  We can now do a diff between the various testruns.
  
  #+NAME: our endpoints
  #+BEGIN_SRC shell :dir ../scripts/gathered_endpoints
  ls
  #+END_SRC

  #+RESULTS: our endpoints
  #+begin_EXAMPLE
  1134962072287711234.json
  1134962072287711234.txt
  1141017488889221121.json
  1141017488889221121.txt
  1145963446211186694.json
  1145963446211186694.txt
  1152045379034812417.json
  1152045379034812417.txt
  #+end_EXAMPLE

  #+RESULTS:
  #+begin_EXAMPLE
  1134962072287711234.json
  1141017488889221121.json
  1145963446211186694.json
  1152045379034812417.json
  #+end_EXAMPLE
  
** 1134962072287711234 + 1141017488889221121
  1134962072287711234 timestamp: "2019-06-01T23:40:05.456368+00:00"
  1141017488889221121 timestamp: "2019-06-18T16:52:03.781229+00:00"
  
  #+NAME: diff between 1134962072287711234 and 1141017488889221121
  #+BEGIN_SRC shell :dir ../scripts/gathered_endpoints :results output
    pwd
    ls
    wc -l 1134962072287711234.json
    wc -l 1141017488889221121.json
    diff 1134962072287711234.json 1141017488889221121.json
  #+END_SRC

  #+RESULTS: diff between 1134962072287711234 and 1141017488889221121
  #+begin_EXAMPLE
  #+end_EXAMPLE

** 1141017488889221121
     "stage_ts": "2019-06-18T16:52:03.781229+00:00"
     Tests: 795
     Op_IDs hit by 'e2e': 201
     
     #+BEGIN_EXAMPLE graphql
        {
      audit_events_aggregate(where: {testrun_id: {_eq: "1141017488889221121"}}) {
        aggregate {
          count(columns: test_name, distinct: true)
        }
      }
    }
     #+END_EXAMPLE
     Returns 795
     
     #+BEGIN_EXAMPLE graphql 
{
  audit_events_aggregate(where: {testrun_id: {_eq: "1141017488889221121"}, user_agent: {_ilike: "%e2e%"}}) {
    aggregate {
      count(columns: op_id, distinct: true)
    }
  }
}
     #+END_EXAMPLE

** 1145963446211186694  
     stage_ts: "2019-07-02T08:01:02.573297+00:00"
     Tests: 795
     Op_IDs hit by 'e2e': 192
     
     #+BEGIN_EXAMPLE graphql
           {
         audit_events_aggregate(where: {testrun_id: {_eq: "1145963446211186694"}}) {
           aggregate {
             count(columns: test_name, distinct: true)
           }
         }
       }
     #+END_EXAMPLE
     Returns 795
     
     #+BEGIN_EXAMPLE graphql 
{
  audit_events_aggregate(where: {testrun_id: {_eq: "1145963446211186694"}, user_agent: {_ilike: "%e2e%"}}) {
    aggregate {
      count(columns: op_id, distinct: true)
    }
  }
}
     #+END_EXAMPLE
    returns 192
** 1152045379034812417
   stage_ts: "2019-07-19T02:54:34.479961+00:00"
   Tests: 784
   OP_IDs hit by e2e: 193
     
   #+BEGIN_EXAMPLE graphql
         {
       audit_events_aggregate(where: {testrun_id: {_eq: "1152045379034812417"}}) {
         aggregate {
           count(columns: test_name, distinct: true)
         }
       }
     }
   #+END_EXAMPLE
   Returns 784
     
   #+BEGIN_EXAMPLE graphql 
     {
       audit_events_aggregate(where: {testrun_id: {_eq: "1152045379034812417"}, user_agent: {_ilike: "%e2e%"}}) {
         aggregate {
           count(columns: op_id, distinct: true)
         }
       }
     }
   #+END_EXAMPLE
   Returns 193

* TODO diff of distinct tests  between testruns
* TODO count of endpoints hit by each test
* TODO diff of of endpoints hit by each test between testruns
* TODO endpoints hit by e2e for a specific testrun


We also need to select uniq testrun, testname, endpoint audit_events;
#+BEGIN_SRC sql-mode :wrap "SRC text" :file test_run_name_op.txt
select distinct testrun_id, test_name, op_id from audit_events
where user_agent like 'e2e.test%'
and op_id is not null and test_name is not null and test_name != '';
-- order by test_name;
#+END_SRC

#+RESULTS:
#+begin_SRC text
[[file:test_run_name_op.txt]]
#+end_SRC
#+BEGIN_SRC shell
head -10 test_run_name_op.txt
#+END_SRC

#+RESULTS:
#+begin_EXAMPLE
     testrun_id      |                                                                                                                     test_name                                                                                                                      |                              op_id                               
---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------
 1134962072287711234 |                                                                                                                                                                                                                                                    | connectCoreV1GetNamespacedPodExec
 1134962072287711234 |                                                                                                                                                                                                                                                    | connectCoreV1GetNamespacedPodPortforward
 1134962072287711234 |                                                                                                                                                                                                                                                    | connectCoreV1GetNamespacedServiceProxyWithPath
 1134962072287711234 |                                                                                                                                                                                                                                                    | connectCoreV1PostNamespacedPodAttach
 1134962072287711234 |                                                                                                                                                                                                                                                    | connectCoreV1PostNamespacedPodExec
 1134962072287711234 |                                                                                                                                                                                                                                                    | connectCoreV1PostNamespacedPodPortforward
 1134962072287711234 |                                                                                                                                                                                                                                                    | createApiextensionsV1beta1CustomResourceDefinition
 1134962072287711234 |                                                                                                                                                                                                                                                    | createApiregistrationV1beta1APIService
#+end_EXAMPLE


#+NAME: Start Postgresql Connection
#+BEGIN_SRC emacs-lisp :results silent
  ;; (sql-connect connection (concat "*SQL: postgres:data*"))
  (sql-connect "hasura" (concat "*SQL: postgres:data*"))
#+END_SRC

#+BEGIN_SRC sql-mode
  \conninfo
#+END_SRC

#+RESULTS:
#+begin_src sql-mode
You are connected to database "zz" as user "zz" on host "172.17.0.1" at port "5432".
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
#+end_src

