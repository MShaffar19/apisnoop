
* what are the fields
  [[file:~/ii/kubernetes/test/conformance/walk.go][Where the fields come from]]
* Run the new version of conformance walker with --csv
#+BEGIN_SRC tmate
  cd ~/ii/kubernetes/
  go run k8s.io/kubernetes/test/conformance --csv test/e2e
#+END_SRC

#+BEGIN_SRC shell :dir ~/ii/kubernetes :wrap "SRC csv"
go run k8s.io/kubernetes/test/conformance --csv test/e2e
#+END_SRC

#+RESULTS:
#+begin_SRC text
aggregator-supports-the-sample-apiserver,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/aggregator.go#L98,,Ensure that the sample-apiserver code from 1.10 and compiled against 1.10\nwill work on the current Aggregator/API-Server.\n\n
"Custom Resource Definition, create",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/custom_resource_definition.go#L42,v1.9,"Create a API extension client\, define a random custom resource definition\, create the custom resource. API server MUST be able to create the custom resource.\n\n"
"Garbage Collector, dependency cycle",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/garbage_collector.go#L811,v1.9,"TODO: should be an integration test\n\nCreate three pods\, patch them with Owner references such that pod1 has pod3\, pod2 has pod1 and pod3 has pod2 as owner references respectively. Delete pod1 MUST delete all pods. The dependency cycle MUST not block the garbage collection.\n\n"
"Garbage Collector, multiple owners",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/garbage_collector.go#L700,v1.9,"TODO: this should be an integration test\n\nCreate a replication controller RC1\, with maximum allocatable Pods between 10 and 100 replicas. Create second replication controller RC2 and set RC2 as owner for half of those replicas. Once RC1 is created and the all Pods are created\, delete RC1 with deleteOptions.PropagationPolicy set to Foreground. Half of the Pods that has RC2 as owner MUST not be deleted but have a deletion timestamp. Deleting the Replication Controller MUST not delete Pods that are owned by multiple replication controllers.\n\n"
"Garbage Collector, delete replication controller, after owned pods",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/garbage_collector.go#L615,v1.9,"Create a replication controller with maximum allocatable Pods between 10 and 100 replicas. Once RC is created and the all Pods are created\, delete RC with deleteOptions.PropagationPolicy set to Foreground. Deleting the Replication Controller MUST cause pods created by that RC to be deleted before the RC is deleted.\n\n"
"Garbage Collector, delete deployment, propagation policy orphan",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/garbage_collector.go#L541,v1.9,"Create a deployment with a replicaset. Once replicaset is created \, delete the deployment  with deleteOptions.PropagationPolicy set to Orphan. Deleting the deployment MUST cause the replicaset created by the deployment to be orphaned\, also the Pods created by the deployments MUST be orphaned.\n\n"
"Garbage Collector, delete deployment,  propagation policy background",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/garbage_collector.go#L482,v1.9,"Create a deployment with a replicaset. Once replicaset is created \, delete the deployment  with deleteOptions.PropagationPolicy set to Background. Deleting the deployment MUST delete the replicaset created by the deployment and also the Pods that belong to the deployments MUST be deleted.\n\n"
"Garbage Collector, delete replication controller, propagation policy orphan",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/garbage_collector.go#L368,v1.9,"Create a replication controller with maximum allocatable Pods between 10 and 100 replicas. Once RC is created and the all Pods are created\, delete RC with deleteOptions.PropagationPolicy set to Orphan. Deleting the Replication Controller MUST cause pods created by that RC to be orphaned.\n\n"
"Garbage Collector, delete replication controller, propagation policy background",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/garbage_collector.go#L310,v1.9,"Create a replication controller with 2 Pods. Once RC is created and the first Pod is created\, delete RC with deleteOptions.PropagationPolicy set to Background. Deleting the Replication Controller MUST cause pods created by that RC to be deleted.\n\n"
namespace-deletion-removes-services,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/namespace.go#L240,,Ensure that if a namespace is deleted then all services are removed from that namespace.\n\n
namespace-deletion-removes-pods,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/namespace.go#L233,,Ensure that if a namespace is deleted then all pods are removed from that namespace.\n\n
API metadata HTTP return,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/table_conversion.go#L154,v1.16,Issue a HTTP request to the API.\nHTTP request MUST return a HTTP status code of 406.\n\n
watch-consistency,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/watch.go#L329,v1.15,"Ensure that concurrent watches are consistent with each other by initiating an additional watch\nfor events received from the first watch\, initiated at the resource version of the event\, and checking that all\nresource versions of all events match. Events are produced from writes on a background goroutine.\n\n"
watch-configmaps-label-changed,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/watch.go#L252,,"Ensure that a watched object stops meeting the requirements of\na watch's selector\, the watch will observe a delete\, and will not observe\nnotifications for that object until it meets the selector's requirements again.\n\n"
watch-configmaps-closed-and-restarted,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/watch.go#L187,,"Ensure that a watch can be reopened from the last resource version\nobserved by the previous watch\, and it will continue delivering notifications from\nthat point in time.\n\n"
watch-configmaps-from-resource-version,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/watch.go#L139,,Ensure that a watch can be opened from a particular resource version\nin the past and only notifications happening after that resource version are observed.\n\n
watch-configmaps-with-multiple-watchers,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apimachinery/watch.go#L54,,"Ensure that multiple watchers are able to receive all add\,\nupdate\, and delete notifications on configmaps that match a label selector and do\nnot receive notifications for configmaps which do not match that label selector.\n\n"
DaemonSet-Rollback,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/daemon_set.go#L384,,"A conformant Kubernetes distribution MUST support automated\, minimally disruptive\nrollback of updates to a DaemonSet.\n\n"
DaemonSet-RollingUpdate,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/daemon_set.go#L327,,A conformant Kubernetes distribution MUST support DaemonSet RollingUpdates.\n\n
DaemonSet-FailedPodCreation,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/daemon_set.go#L248,,A conformant Kubernetes distribution MUST create new DaemonSet Pods when they fail.\n\n
DaemonSet-NodeSelection,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/daemon_set.go#L149,,A conformant Kubernetes distribution MUST support DaemonSet Pod node selection via label\nselectors.\n\n
DaemonSet-Creation,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/daemon_set.go#L122,,"A conformant Kubernetes distribution MUST support the creation of DaemonSets. When a DaemonSet\nPod is deleted\, the DaemonSet controller MUST create a replacement Pod.\n\n"
Deployment Proportional Scaling,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/deployment.go#L120,,"A conformant Kubernetes distribution MUST support Deployment\nproportional scaling\, i.e. proportionally scale a Deployment's ReplicaSets\nwhen a Deployment is scaled.\n\n"
Deployment Rollover,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/deployment.go#L105,,"A conformant Kubernetes distribution MUST support Deployment rollover\,\ni.e. allow arbitrary number of changes to desired state during rolling update\nbefore the rollout finishes.\n\n"
Deployment RevisionHistoryLimit,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/deployment.go#L96,,A conformant Kubernetes distribution MUST clean up Deployment's ReplicaSets based on\nthe Deployment's `.spec.revisionHistoryLimit`.\n\n
Deployment Recreate,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/deployment.go#L88,,A conformant Kubernetes distribution MUST support the Deployment with Recreate strategy.\n\n
Deployment RollingUpdate,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/deployment.go#L81,,A conformant Kubernetes distribution MUST support the Deployment with RollingUpdate strategy.\n\n
"Jobs, orphan pods, re-adoption",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/job.go#L173,v1.16,Create a parallel job. The number of Pods MUST equal the level of parallelism.\nOrphan a Pod by modifying its owner reference. The Job MUST re-adopt the orphan pod.\nModify the labels of one of the Job's Pods. The Job MUST release the Pod.\n\n
"Jobs, active pods, graceful termination",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/job.go#L147,v1.15,Create a job. Ensure the active pods reflect paralellism in the namespace and delete the job. Job MUST be deleted successfully.\n\n
"Jobs, completion after task failure",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/job.go#L92,v1.16,"Explicitly cause the tasks to fail once initially. After restarting\, the Job MUST\nexecute to completion.\n\n"
"Replication Controller, release pods",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/rc.go#L83,v1.13,"A Replication Controller (RC) is created\, and its Pods are created. When the labels on one of the Pods change to no longer match the RC's label selector\, the RC MUST release the Pod and update the Pod's owner references.\n\n"
"Replication Controller, adopt matching pods",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/rc.go#L74,v1.13,"An ownerless Pod is created\, then a Replication Controller (RC) is created whose label selector will match the Pod. The RC MUST either adopt the Pod or delete and replace it with a new Pod\n\n"
"Replication Controller, check for issues like exceeding allocated quota",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/rc.go#L65,v1.15,Attempt to create a Replication Controller with pods exceeding the namespace quota. The creation MUST fail\n\n
"Replication Controller, run basic image",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/rc.go#L48,v1.9,"Replication Controller MUST create a Pod with Basic Image and MUST run the service with the provided image. Image MUST be tested by dialing into the service listening through TCP\, UDP and HTTP.\n\n"
"Replica Set, adopt matching pods and release non matching pods",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/replica_set.go#L114,v1.13,"A Pod is created\, then a Replica Set (RS) whose label selector will match the Pod. The RS MUST either adopt the Pod or delete and replace it with a new Pod. When the labels on one of the Pods owned by the RS change to no longer match the RS's label selector\, the RS MUST release the Pod and update the Pod's owner references\n\n"
"Replica Set, run basic image",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/replica_set.go#L93,v1.9,Create a ReplicaSet with a Pod and a single Container. Make sure that the Pod is running. Pod SHOULD send a valid response when queried.\n\n
StatefulSet resource Replica scaling,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/statefulset.go#L771,v1.16,Create a StatefulSet resource.\nNewly created StatefulSet resource MUST have a scale of one.\nBring the scale of the StatefulSet resource up to two. StatefulSet scale MUST be at two replicas.\n\n
"StatefulSet, Recreate Failed Pod",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/statefulset.go#L678,v1.9,"StatefulSet MUST delete and recreate Pods it owns that go into a Failed state\, such as when they are rejected or evicted by a Node. This test does not depend on a preexisting default StorageClass or a dynamic provisioner.\n\n"
"StatefulSet, Burst Scaling",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/statefulset.go#L636,v1.9,StatefulSet MUST support the Parallel PodManagementPolicy for burst scaling. This test does not depend on a preexisting default StorageClass or a dynamic provisioner.\n\n
"StatefulSet, Scaling",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/statefulset.go#L552,v1.9,"StatefulSet MUST create Pods in ascending order by ordinal index when scaling up\, and delete Pods in descending order when scaling down. Scaling up or down MUST pause if any Pods belonging to the StatefulSet are unhealthy. This test does not depend on a preexisting default StorageClass or a dynamic provisioner.\n\n"
"StatefulSet, Rolling Update with Partition",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/statefulset.go#L282,v1.9,"StatefulSet's RollingUpdate strategy MUST support the Partition parameter for canaries and phased rollouts. If a Pod is deleted while a rolling update is in progress\, StatefulSet MUST restore the Pod without violating the Partition. This test does not depend on a preexisting default StorageClass or a dynamic provisioner.\n\n"
"StatefulSet, Rolling Update",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/apps/statefulset.go#L271,v1.9,"StatefulSet MUST support the RollingUpdate strategy to automatically replace Pods one at a time when the Pod template changes. The StatefulSet's status MUST indicate the CurrentRevision and UpdateRevision. If the template is changed to match a prior revision\, StatefulSet MUST detect this as a rollback instead of creating a new revision. This test does not depend on a preexisting default StorageClass or a dynamic provisioner.\n\n"
Service account tokens auto mount optionally,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/auth/service_accounts.go#L276,v1.9,"Ensure that Service Account keys are mounted into the Pod only\nwhen AutoMountServiceToken is not set to false. We test the\nfollowing scenarios here.\n1. Create Pod\, Pod Spec has AutomountServiceAccountToken set to nil\na) Service Account with default value\,\nb) Service Account is an configured AutomountServiceAccountToken set to true\,\nc) Service Account is an configured AutomountServiceAccountToken set to false\n2. Create Pod\, Pod Spec has AutomountServiceAccountToken set to true\na) Service Account with default value\,\nb) Service Account is configured with AutomountServiceAccountToken set to true\,\nc) Service Account is configured with AutomountServiceAccountToken set to false\n3. Create Pod\, Pod Spec has AutomountServiceAccountToken set to false\na) Service Account with default value\,\nb) Service Account is configured with AutomountServiceAccountToken set to true\,\nc) Service Account is configured with AutomountServiceAccountToken set to false\n\nThe Containers running in these pods MUST verify that the ServiceTokenVolume path is\nauto mounted only when Pod Spec has AutomountServiceAccountToken not set to false\nand ServiceAccount object has AutomountServiceAccountToken not set to false\, this\ninclude test cases 1a\,1b\,2a\,2b and 2c.\nIn the test cases 1c\,3a\,3b and 3c the ServiceTokenVolume MUST not be auto mounted.\n\n"
Service Account Tokens Must AutoMount,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/auth/service_accounts.go#L171,v1.9,"Ensure that Service Account keys are mounted into the Container. Pod\ncontains three containers each will read Service Account token\,\nroot CA and default namespace respectively from the default API\nToken Mount path. All these three files MUST exist and the Service\nAccount mount path MUST be auto mounted to the Container.\n\n"
"ConfigMap, with empty-key",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap.go#L133,v1.14,Attempt to create a ConfigMap with an empty key. The creation MUST fail.\n\n
"ConfigMap, from environment variables",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap.go#L88,v1.9,Create a Pod with a environment source from ConfigMap. All ConfigMap values MUST be available as environment variables in the container.\n\n
"ConfigMap, from environment field",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap.go#L40,v1.9,Create a Pod with an environment variable value set using a value from ConfigMap. A ConfigMap value MUST be accessible in the container environment.\n\n
"ConfigMap Volume, multiple volume maps",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap_volume.go#L477,v1.9,The ConfigMap that is created MUST be accessible to read from the newly created Pod using the volume mount that is mapped to multiple paths in the Pod. The content MUST be accessible from all the mapped volume mounts.\n\n
"ConfigMap Volume, create, update and delete",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap_volume.go#L294,v1.9,The ConfigMap that is created MUST be accessible to read from the newly created Pod using the volume mount that is mapped to custom path in the Pod. When the config map is updated the change to the config map MUST be verified by reading the content from the mounted file in the Pod. Also when the item(file) is deleted from the map that MUST result in a error reading that item(file).\n\n
"ConfigMap Volume, text data, binary data",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap_volume.go#L198,v1.12,The ConfigMap that is created with text data and binary data MUST be accessible to read from the newly created Pod using the volume mount that is mapped to custom path in the Pod. ConfigMap's text data and binary data MUST be verified by reading the content from the mounted files in the Pod.\n\n
"ConfigMap Volume, update",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap_volume.go#L115,v1.9,The ConfigMap that is created MUST be accessible to read from the newly created Pod using the volume mount that is mapped to custom path in the Pod. When the ConfigMap is updated the change to the config map MUST be verified by reading the content from the mounted file in the Pod.\n\n
"ConfigMap Volume, with mapping, non-root user",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap_volume.go#L102,v1.9,"Create a ConfigMap\, create a Pod that mounts a volume and populates the volume with data stored in the ConfigMap. Files are mapped to a path in the volume. Pod is run as a non-root user with uid=1000. The ConfigMap that is created MUST be accessible to read from the newly created Pod using the volume mount. The file on the volume MUST have file mode set to default value of 0x644.\nThis test is marked LinuxOnly since Windows does not support running as UID / GID.\n\n"
"ConfigMap Volume, with mapping, volume mode set",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap_volume.go#L91,v1.9,"Create a ConfigMap\, create a Pod that mounts a volume and populates the volume with data stored in the ConfigMap. Files are mapped to a path in the volume. File mode is changed to a custom value of '0x400'. The ConfigMap that is created MUST be accessible to read from the newly created Pod using the volume mount. The data content of the file MUST be readable and verified and file modes MUST be set to the custom value of ‘0x400’\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n"
"ConfigMap Volume, with mapping",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap_volume.go#L81,v1.9,"Create a ConfigMap\, create a Pod that mounts a volume and populates the volume with data stored in the ConfigMap. Files are mapped to a path in the volume. The ConfigMap that is created MUST be accessible to read from the newly created Pod using the volume mount. The data content of the file MUST be readable and verified and file modes MUST default to 0x644.\n\n"
"ConfigMap Volume, without mapping, non-root user",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap_volume.go#L68,v1.9,"Create a ConfigMap\, create a Pod that mounts a volume and populates the volume with data stored in the ConfigMap. Pod is run as a non-root user with uid=1000. The ConfigMap that is created MUST be accessible to read from the newly created Pod using the volume mount. The file on the volume MUST have file mode set to default value of 0x644.\nThis test is marked LinuxOnly since Windows does not support running as UID / GID.\n\n"
"ConfigMap Volume, without mapping, volume mode set",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap_volume.go#L52,v1.9,"Create a ConfigMap\, create a Pod that mounts a volume and populates the volume with data stored in the ConfigMap. File mode is changed to a custom value of '0x400'. The ConfigMap that is created MUST be accessible to read from the newly created Pod using the volume mount. The data content of the file MUST be readable and verified and file modes MUST be set to the custom value of ‘0x400’\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n"
"ConfigMap Volume, without mapping",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/configmap_volume.go#L42,v1.9,"Create a ConfigMap\, create a Pod that mounts a volume and populates the volume with data stored in the ConfigMap. The ConfigMap that is created MUST be accessible to read from the newly created Pod using the volume mount. The data content of the file MUST be readable and verified and file modes MUST default to 0x644.\n\n"
"Pod liveness probe, using http endpoint, failure",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/container_probe.go#L197,v1.9,A Pod is created with liveness probe on http endpoint ‘/’. Liveness probe on this endpoint will not fail. When liveness probe does not fail then the restart count MUST remain zero.\n\n
"Pod liveness probe, using http endpoint, multiple restarts (slow)",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/container_probe.go#L182,v1.9,"A Pod is created with liveness probe on http endpoint /healthz. The http handler on the /healthz will return a http error after 10 seconds since the Pod is started. This MUST result in liveness check failure. The Pod MUST now be killed and restarted incrementing restart count to 1. The liveness probe must fail again after restart once the http handler for /healthz enpoind on the Pod returns an http error after 10 seconds from the start. Restart counts MUST increment everytime health check fails\, measure upto 5 restart.\n\n"
"Pod liveness probe, using http endpoint, restart",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/container_probe.go#L152,v1.9,A Pod is created with liveness probe on http endpoint /healthz. The http handler on the /healthz will return a http error after 10 seconds since the Pod is started. This MUST result in liveness check failure. The Pod MUST now be killed and restarted incrementing restart count to 1.\n\n
"Pod liveness probe, using local file, no restart",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/container_probe.go#L136,v1.9,Pod is created with liveness probe that uses ‘exec’ command to cat /temp/health file. Liveness probe MUST not fail to check health and the restart count should remain 0.\n\n
"Pod liveness probe, using local file, restart",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/container_probe.go#L120,v1.9,"Create a Pod with liveness probe that uses ExecAction handler to cat /temp/health file. The Container deletes the file /temp/health after 10 second\, triggering liveness probe to fail. The Pod MUST now be killed and restarted incrementing restart count to 1.\n\n"
"Pod readiness probe, failure",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/container_probe.go#L95,v1.9,"Create a Pod with a readiness probe that fails consistently. When this Pod is created\,\nthen the Pod MUST never be ready\, never be running and restart count MUST be zero.\n\n"
"Pod readiness probe, with initial delay",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/container_probe.go#L61,v1.9,Create a Pod that is configured with a initial delay set on the readiness probe. Check the Pod Start time to compare to the initial delay. The Pod MUST be ready only after the specified initial delay.\n\n
"Docker containers, with command and arguments",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/docker_containers.go#L87,v1.9,Default command and arguments from the docker image entrypoint MUST NOT be used when Pod specifies the container command and arguments.  Command and arguments from Pod spec MUST override the command and arguments in the image.\n\n
"Docker containers, with command",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/docker_containers.go#L73,v1.9,"Note: when you override the entrypoint\, the image's arguments (docker cmd)\nare ignored.\n\nDefault command from the docker image entrypoint MUST NOT be used when Pod specifies the container command.  Command from Pod spec MUST override the command in the image.\n\n"
"Docker containers, with arguments",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/docker_containers.go#L57,v1.9,Default command and  from the docker image entrypoint MUST be used when Pod does not specify the container command but the arguments from Pod spec MUST override when specified.\n\n
"Docker containers, without command and arguments",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/docker_containers.go#L38,v1.9,Default command and arguments from the docker image entrypoint MUST be used when Pod does not specify the container command\n\n
"DownwardAPI, environment for Pod UID",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downward_api.go#L263,v1.9,Downward API MUST expose Pod UID set through environment variables at runtime in the container.\n\n
"DownwardAPI, environment for default CPU and memory limits and requests",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downward_api.go#L213,v1.9,Downward API MUST expose CPU request and Memory limits set through environment variables at runtime in the container.\n\n
"DownwardAPI, environment for CPU and memory limits and requests",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downward_api.go#L162,v1.9,Downward API MUST expose CPU request and Memory request set through environment variables at runtime in the container.\n\n
"DownwardAPI, environment for host ip",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downward_api.go#L86,v1.9,Downward API MUST expose Pod and Container fields as environment variables. Specify host IP as environment variable in the Pod Spec are visible at runtime in the container.\n\n
"DownwardAPI, environment for name, namespace and ip",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downward_api.go#L40,v1.9,"Downward API MUST expose Pod and Container fields as environment variables. Specify Pod Name\, namespace and IP as environment variable in the Pod Spec are visible at runtime in the container.\n\n"
"DownwardAPI volume, memory limit, default node allocatable",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downwardapi_volume.go#L258,v1.9,A Pod is configured with DownwardAPIVolumeSource and DownwardAPIVolumeFiles contains a item for the memory limits. memory limits is not specified for the container. The container runtime MUST be able to access memory limits from the specified path on the mounted volume and the value MUST be default node allocatable.\n\n
"DownwardAPI volume, CPU limit, default node allocatable",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downwardapi_volume.go#L246,v1.9,A Pod is configured with DownwardAPIVolumeSource and DownwardAPIVolumeFiles contains a item for the CPU limits. CPU limits is not specified for the container. The container runtime MUST be able to access CPU limits from the specified path on the mounted volume and the value MUST be default node allocatable.\n\n
"DownwardAPI volume, memory request",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downwardapi_volume.go#L232,v1.9,A Pod is configured with DownwardAPIVolumeSource and DownwardAPIVolumeFiles contains a item for the memory request. The container runtime MUST be able to access memory request from the specified path on the mounted volume.\n\n
"DownwardAPI volume, CPU request",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downwardapi_volume.go#L218,v1.9,A Pod is configured with DownwardAPIVolumeSource and DownwardAPIVolumeFiles contains a item for the CPU request. The container runtime MUST be able to access CPU request from the specified path on the mounted volume.\n\n
"DownwardAPI volume, memory limits",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downwardapi_volume.go#L204,v1.9,A Pod is configured with DownwardAPIVolumeSource and DownwardAPIVolumeFiles contains a item for the memory limits. The container runtime MUST be able to access memory limits from the specified path on the mounted volume.\n\n
"DownwardAPI volume, CPU limits",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downwardapi_volume.go#L190,v1.9,A Pod is configured with DownwardAPIVolumeSource and DownwardAPIVolumeFiles contains a item for the CPU limits. The container runtime MUST be able to access CPU limits from the specified path on the mounted volume.\n\n
"DownwardAPI volume, update annotations",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downwardapi_volume.go#L156,v1.9,A Pod is configured with DownwardAPIVolumeSource and DownwardAPIVolumeFiles contains list of items for each of the Pod annotations. The container runtime MUST be able to access Pod annotations from the specified path on the mounted volume. Update the annotations by adding a new annotation to the running Pod. The new annotation MUST be available from the mounted volume.\n\n
"DownwardAPI volume, update label",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downwardapi_volume.go#L124,v1.9,A Pod is configured with DownwardAPIVolumeSource and DownwardAPIVolumeFiles contains list of items for each of the Pod labels. The container runtime MUST be able to access Pod labels from the specified path on the mounted volume. Update the labels by adding a new label to the running Pod. The new label MUST be available from the mounted volume.\n\n
"DownwardAPI volume, file mode 0400",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downwardapi_volume.go#L80,v1.9,A Pod is configured with DownwardAPIVolumeSource and DownwardAPIVolumeFiles contains a item for the Pod name with the file mode set to -r--------. The container runtime MUST be able to access Pod name from the specified path on the mounted volume.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n
"DownwardAPI volume, volume mode 0400",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downwardapi_volume.go#L64,v1.9,A Pod is configured with DownwardAPIVolumeSource with the volumesource mode set to -r-------- and DownwardAPIVolumeFiles contains a item for the Pod name. The container runtime MUST be able to access Pod name from the specified path on the mounted volume.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n
"DownwardAPI volume, pod name",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/downwardapi_volume.go#L49,v1.9,A Pod is configured with DownwardAPIVolumeSource and DownwardAPIVolumeFiles contains a item for the Pod name. The container runtime MUST be able to access Pod name from the specified path on the mounted volume.\n\n
"EmptyDir, Shared volumes between containers",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L216,v1.15,"A Pod created with an 'emptyDir' Volume\, should share volumes between the containeres in the pod. The two busybox image containers shoud share the volumes mounted to the pod.\nThe main container shoud wait until the sub container drops a file\, and main container acess the shared data.\n\n"
"EmptyDir, medium default, volume mode 0777",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L206,v1.9,"A Pod created with an 'emptyDir' Volume\, the volume mode set to 0777. Volume is mounted into the container where container is run as a non-root user. The volume MUST have mode -rwxrwxrwx and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID.\n\n"
"EmptyDir, medium default, volume mode 0666",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L196,v1.9,"A Pod created with an 'emptyDir' Volume\, the volume mode set to 0666. Volume is mounted into the container where container is run as a non-root user. The volume MUST have mode -rw-rw-rw- and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID.\n\n"
"EmptyDir, medium default, volume mode 0644",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L186,v1.9,"A Pod created with an 'emptyDir' Volume\, the volume mode set to 0644. Volume is mounted into the container where container is run as a non-root user. The volume MUST have mode -rw-r--r-- and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID.\n\n"
"EmptyDir, medium default, volume mode 0777",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L176,v1.9,"A Pod created with an 'emptyDir' Volume\, the volume mode set to 0777.  The volume MUST have mode set as -rwxrwxrwx and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID.\n\n"
"EmptyDir, medium default, volume mode 0666",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L166,v1.9,"A Pod created with an 'emptyDir' Volume\, the volume mode set to 0666. The volume MUST have mode -rw-rw-rw- and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID.\n\n"
"EmptyDir, medium default, volume mode 0644",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L156,v1.9,"A Pod created with an 'emptyDir' Volume\, the volume mode set to 0644. The volume MUST have mode -rw-r--r-- and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID.\n\n"
"EmptyDir, medium default, volume mode default",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L146,v1.9,"A Pod created with an 'emptyDir' Volume\, the volume MUST have mode set as -rwxrwxrwx and mount type set to tmpfs.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n"
"EmptyDir, medium memory, volume mode 0777, non-root user",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L136,v1.9,"A Pod created with an 'emptyDir' Volume and 'medium' as 'Memory'\, the volume mode set to 0777. Volume is mounted into the container where container is run as a non-root user. The volume MUST have mode -rwxrwxrwx and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID\, or the medium = 'Memory'.\n\n"
"EmptyDir, medium memory, volume mode 0666,, non-root user",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L126,v1.9,"A Pod created with an 'emptyDir' Volume and 'medium' as 'Memory'\, the volume mode set to 0666. Volume is mounted into the container where container is run as a non-root user. The volume MUST have mode -rw-rw-rw- and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID\, or the medium = 'Memory'.\n\n"
"EmptyDir, medium memory, volume mode 0644, non-root user",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L116,v1.9,"A Pod created with an 'emptyDir' Volume and 'medium' as 'Memory'\, the volume mode set to 0644. Volume is mounted into the container where container is run as a non-root user. The volume MUST have mode -rw-r--r-- and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID\, or the medium = 'Memory'.\n\n"
"EmptyDir, medium memory, volume mode 0777",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L106,v1.9,"A Pod created with an 'emptyDir' Volume and 'medium' as 'Memory'\, the volume mode set to 0777.  The volume MUST have mode set as -rwxrwxrwx and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID\, or the medium = 'Memory'.\n\n"
"EmptyDir, medium memory, volume mode 0666",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L96,v1.9,"A Pod created with an 'emptyDir' Volume and 'medium' as 'Memory'\, the volume mode set to 0666. The volume MUST have mode -rw-rw-rw- and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID\, or the medium = 'Memory'.\n\n"
"EmptyDir, medium memory, volume mode 0644",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L86,v1.9,"A Pod created with an 'emptyDir' Volume and 'medium' as 'Memory'\, the volume mode set to 0644. The volume MUST have mode -rw-r--r-- and mount type set to tmpfs and the contents MUST be readable.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID\, or the medium = 'Memory'.\n\n"
"EmptyDir, medium memory, volume mode default",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/empty_dir.go#L76,v1.9,"A Pod created with an 'emptyDir' Volume and 'medium' as 'Memory'\, the volume MUST have mode set as -rwxrwxrwx and mount type set to tmpfs.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or the medium = 'Memory'.\n\n"
"Environment variables, command argument expansion",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/expansion.go#L126,v1.9,Create a Pod with environment variables and container command arguments using them. Container command arguments using the  defined environment variables MUST expand to proper values.\n\n
"Environment variables, command expansion",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/expansion.go#L91,v1.9,Create a Pod with environment variables and container command using them. Container command using the  defined environment variables MUST expand to proper values.\n\n
"Environment variables, expansion",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/expansion.go#L46,v1.9,Create a Pod with environment variables. Environment variables defined using previously defined environment variables MUST expand to proper values.\n\n
"Host path, volume mode default",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/host_path.go#L49,v1.9,Create a Pod with host volume mounted. The volume mounted MUST be a directory with permissions mode -rwxrwxrwx and that is has the sticky bit (mode flag t) set.\nThis test is marked LinuxOnly since Windows does not support setting the sticky bit (mode flag t).\n\n
init-container-fails-stops-app-restartnever-pod,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/init_container.go#L310,v1.12,Ensure that app container is not started\nwhen at least one InitContainer fails to start and Pod has restart policy as RestartNever.\n\n
init-container-fails-stops-app-restartalways-pod,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/init_container.go#L194,v1.12,Ensure that app container is not started\nwhen all InitContainers failed to start\nand Pod has restarted for few occurrences\nand pod has restart policy as RestartAlways.\n\n
init-container-starts-app-restartalways-pod,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/init_container.go#L123,v1.12,Ensure that all InitContainers are started\nand all containers in pod started\nand at least one container is still running or is in the process of being restarted\nwhen Pod has restart policy as RestartAlways.\n\n
init-container-starts-app-restartnever-pod,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/init_container.go#L56,v1.12,"Ensure that all InitContainers are started\nand all containers in pod are voluntarily terminated with exit status 0\,\nand the system is not going to restart any of these containers\nwhen Pod has restart policy as RestartNever.\n\n"
"Kubelet, pod with read only root file system",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/kubelet.go#L196,v1.13,"Create a Pod with security context set with ReadOnlyRootFileSystem set to true. The Pod then tries to write to the /file on the root\, write operation to the root filesystem MUST fail as expected.\nThis test is marked LinuxOnly since Windows does not support creating containers with read-only access.\n\n"
"Kubelet, hostAliases",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/kubelet.go#L145,v1.13,"Create a Pod with hostAliases and a container with command to output /etc/hosts entries. Pod's logs MUST have matching entries of specified hostAliases to the output of /etc/hosts entries.\nKubernetes mounts the /etc/hosts file into its containers\, however\, mounting individual files is not supported on Windows Containers. For this reason\, this test is marked LinuxOnly.\n\n"
"Kubelet, failed pod, delete",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/kubelet.go#L131,v1.13,Create a Pod with terminated state. This terminated pod MUST be able to be deleted.\n\n
"Kubelet, failed pod, terminated reason",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/kubelet.go#L106,v1.13,Create a Pod with terminated state. Pod MUST have only one container. Container MUST be in terminated state and MUST have an terminated reason.\n\n
"Kubelet, log output, default",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/kubelet.go#L48,v1.13,By default the stdout and stderr from the process being executed in a pod MUST be sent to the pod's logs.\n\n
"Kubelet, managed etc hosts",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/kubelet_etc_hosts.go#L63,v1.9,"Create a Pod with containers with hostNetwork set to false\, one of the containers mounts the /etc/hosts file form the host. Create a second Pod with hostNetwork set to true.\n1. The Pod with hostNetwork=false MUST have /etc/hosts of containers managed by the Kubelet.\n2. The Pod with hostNetwork=false but the container mounts /etc/hosts file from the host. The /etc/hosts file MUST not be managed by the Kubelet.\n3. The Pod with hostNetwork=true \, /etc/hosts file MUST not be managed by the Kubelet.\nThis test is marked LinuxOnly since Windows cannot mount individual files in Containers.\n\n"
"Pod Lifecycle, prestop http hook",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/lifecycle_hook.go#L149,v1.9,"When a pre-stop handler is specified in the container lifecycle using a ‘HttpGet’ action\, then the handler MUST be invoked before the container is terminated. A server pod is created that will serve http requests\, create a second pod with a container lifecycle specifying a pre-stop that invokes the server pod to validate that the pre-stop is executed.\n\n"
"Pod Lifecycle, post start http hook",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/lifecycle_hook.go#L131,v1.9,"When a post start handler is specified in the container lifecycle using a HttpGet action\, then the handler MUST be invoked after the start of the container. A server pod is created that will serve http requests\, create a second pod with a container lifecycle specifying a post start that invokes the server pod to validate that the post start is executed.\n\n"
"Pod Lifecycle, prestop exec hook",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/lifecycle_hook.go#L115,v1.9,"When a pre-stop handler is specified in the container lifecycle using a ‘Exec’ action\, then the handler MUST be invoked before the container is terminated. A server pod is created that will serve http requests\, create a second pod with a container lifecycle specifying a pre-stop that invokes the server pod using ExecAction to validate that the pre-stop is executed.\n\n"
"Pod Lifecycle, post start exec hook",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/lifecycle_hook.go#L99,v1.9,"When a post start handler is specified in the container lifecycle using a ‘Exec’ action\, then the handler MUST be invoked after the start of the container. A server pod is created that will serve http requests\, create a second pod with a container lifecycle specifying a post start that invokes the server pod using ExecAction to validate that the post start is executed.\n\n"
"Networking, intra pod http, from node",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/networking.go#L82,v1.9,Create a hostexec pod that is capable of curl to netcat commands. Create a test Pod that will act as a webserver front end exposing ports 8080 for tcp and 8081 for udp. The netserver service proxies are created on specified number of nodes.\nThe kubectl exec on the webserver container MUST reach a http port on the each of service proxy endpoints in the cluster using a http post(protocol=udp)  and the request MUST be successful. Container will execute curl command to reach the service port within specified max retry limit and MUST result in reporting unique hostnames.\nThis test is marked LinuxOnly since HostNetwork is not supported on other platforms like Windows.\n\n
"Networking, intra pod http, from node",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/networking.go#L68,v1.9,Create a hostexec pod that is capable of curl to netcat commands. Create a test Pod that will act as a webserver front end exposing ports 8080 for tcp and 8081 for udp. The netserver service proxies are created on specified number of nodes.\nThe kubectl exec on the webserver container MUST reach a http port on the each of service proxy endpoints in the cluster using a http post(protocol=tcp)  and the request MUST be successful. Container will execute curl command to reach the service port within specified max retry limit and MUST result in reporting unique hostnames.\nThis test is marked LinuxOnly since HostNetwork is not supported on other platforms like Windows.\n\n
"Networking, intra pod udp",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/networking.go#L54,v1.9,Create a hostexec pod that is capable of curl to netcat commands. Create a test Pod that will act as a webserver front end exposing ports 8080 for tcp and 8081 for udp. The netserver service proxies are created on specified number of nodes.\nThe kubectl exec on the webserver container MUST reach a udp port on the each of service proxy endpoints in the cluster and the request MUST be successful. Container will execute curl command to reach the service port within specified max retry limit and MUST result in reporting unique hostnames.\nThis test is marked LinuxOnly since HostNetwork is not supported on other platforms like Windows.\n\n
"Networking, intra pod http",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/networking.go#L40,v1.9,"Try to hit all endpoints through a test container\, retry 5 times\,\nexpect exactly one unique hostname. Each of these endpoints reports\nits own hostname.\n\nCreate a hostexec pod that is capable of curl to netcat commands. Create a test Pod that will act as a webserver front end exposing ports 8080 for tcp and 8081 for udp. The netserver service proxies are created on specified number of nodes.\nThe kubectl exec on the webserver container MUST reach a http port on the each of service proxy endpoints in the cluster and the request MUST be successful. Container will execute curl command to reach the service port within specified max retry limit and MUST result in reporting unique hostnames.\nThis test is marked LinuxOnly since HostNetwork is not supported on other platforms like Windows.\n\n"
"Pods, logs from websockets",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/pods.go#L623,v1.13,A Pod is created. Websocket is created to retrieve log of a container from this pod.\nMessage retrieved form Websocket MUST match with container's output.\n\n
"Pods, remote command execution over websocket",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/pods.go#L541,v1.13,A Pod is created. Websocket is created to retrieve exec command output from this pod.\nMessage retrieved form Websocket MUST match with expected exec command output.\n\n
"Pods, service environment variables",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/pods.go#L449,v1.9,"Create a server Pod listening on port 9376. A Service called fooservice is created for the server Pod listening on port 8765 targeting port 8080. If a new Pod is created in the cluster then the Pod MUST have the fooservice environment variables available from this new Pod. The new create Pod MUST have environment variables such as FOOSERVICE_SERVICE_HOST\, FOOSERVICE_SERVICE_PORT\, FOOSERVICE_PORT\, FOOSERVICE_PORT_8765_TCP_PORT\, FOOSERVICE_PORT_8765_TCP_PROTO\, FOOSERVICE_PORT_8765_TCP and FOOSERVICE_PORT_8765_TCP_ADDR that are populated with proper values.\n\n"
"Pods, ActiveDeadlineSeconds",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/pods.go#L403,v1.9,Create a Pod with a unique label. Query for the Pod with the label as selector MUST be successful. The Pod is updated with ActiveDeadlineSeconds set on the Pod spec. Pod MUST terminate of the specified time elapses.\n\n
"Pods, update",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/pods.go#L349,v1.9,Create a Pod with a unique label. Query for the Pod with the label as selector MUST be successful. Update the pod to change the value of the Label. Query for the Pod with the new value for the label MUST be successful.\n\n
"Pods, lifecycle",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/pods.go#L196,v1.9,"A Pod is created with a unique label. Pod MUST be accessible when queried using the label selector upon creation. Add a watch\, check if the Pod is running. Pod then deleted\, The pod deletion timestamp is observed. The watch MUST return the pod deleted event. Query with the original selector for the Pod MUST return empty list.\n\n"
"Pods, assigned hostip",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/pods.go#L174,v1.9,Create a Pod. Pod status MUST return successfully and contains a valid IP address.\n\n
"Projected Volume, multiple projections",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_combined.go#L41,v1.9,"Test multiple projections\n\nA Pod is created with a projected volume source for secrets\, configMap and downwardAPI with pod name\, cpu and memory limits and cpu and memory requests. Pod MUST be able to read the secrets\, configMap values and the cpu and memory limits as well as cpu and memory requests from the mounted DownwardAPIVolumeFiles.\n\n"
"Projected Volume, ConfigMap, multiple volume paths",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_configmap.go#L405,v1.9,A Pod is created with a projected volume source ‘ConfigMap’ to store a configMap. The configMap is mapped to two different volume mounts. Pod MUST be able to read the content of the configMap successfully from the two volume mounts.\n\n
"Projected Volume, ConfigMap, create, update and delete",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_configmap.go#L204,v1.9,"Create a Pod with three containers with ConfigMaps namely a create\, update and delete container. Create Container when started MUST not have configMap\, update and delete containers MUST be created with a ConfigMap value as ‘value-1’. Create a configMap in the create container\, the Pod MUST be able to read the configMap from the create container. Update the configMap in the update container\, Pod MUST be able to read the updated configMap value. Delete the configMap in the delete container. Pod MUST fail to read the configMap from the delete container.\n\n"
"Projected Volume, ConfigMap, update",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_configmap.go#L116,v1.9,A Pod is created with projected volume source ‘ConfigMap’ to store a configMap and performs a create and update to new value. Pod MUST be able to create the configMap with value-1. Pod MUST be able to update the value in the confgiMap to value-2.\n\n
"Projected Volume, ConfigMap, mapped, non-root user",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_configmap.go#L103,v1.9,A Pod is created with projected volume source ‘ConfigMap’ to store a configMap as non-root user with uid 1000. The ConfigMap is also mapped to a custom path. Pod MUST be able to read the content of the ConfigMap from the custom location successfully and the mode on the volume MUST be -r-—r——r—-.\nThis test is marked LinuxOnly since Windows does not support running as UID / GID.\n\n
"Projected Volume, ConfigMap, mapped, volume mode 0400",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_configmap.go#L92,v1.9,A Pod is created with projected volume source ‘ConfigMap’ to store a configMap with permission mode set to 0400. The ConfigMap is also mapped to a custom path. Pod MUST be able to read the content of the ConfigMap from the custom location successfully and the mode on the volume MUST be -r-—r——r—-.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n
"Projected Volume, ConfigMap, mapped",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_configmap.go#L82,v1.9,A Pod is created with projected volume source ‘ConfigMap’ to store a configMap with default permission mode. The ConfigMap is also mapped to a custom path. Pod MUST be able to read the content of the ConfigMap from the custom location successfully and the mode on the volume MUST be -rw—r——r—-.\n\n
"Projected Volume, ConfigMap, non-root user",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_configmap.go#L69,v1.9,A Pod is created with projected volume source ‘ConfigMap’ to store a configMap as non-root user with uid 1000. Pod MUST be able to read the content of the ConfigMap successfully and the mode on the volume MUST be -rw—r——r—-.\nThis test is marked LinuxOnly since Windows does not support running as UID / GID.\n\n
"Projected Volume, ConfigMap, volume mode 0400",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_configmap.go#L53,v1.9,A Pod is created with projected volume source ‘ConfigMap’ to store a configMap with permission mode set to 0400. Pod MUST be able to read the content of the ConfigMap successfully and the mode on the volume MUST be -r——-——-—-.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n
"Projected Volume, ConfigMap, volume mode default",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_configmap.go#L43,v1.9,A Pod is created with projected volume source ‘ConfigMap’ to store a configMap with default permission mode. Pod MUST be able to read the content of the ConfigMap successfully and the mode on the volume MUST be -rw-r—-r—-.\n\n
"Projected Volume, DownwardAPI, memory limit, node allocatable",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_downwardapi.go#L258,v1.9,"A Pod is created with a projected volume source for downwardAPI with pod name\, cpu and memory limits and cpu and memory requests.  The CPU and memory resources for requests and limits are NOT specified for the container. Pod MUST be able to read the default memory limits from the mounted DownwardAPIVolumeFiles.\n\n"
"Projected Volume, DownwardAPI, CPU limit, node allocatable",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_downwardapi.go#L246,v1.9,"A Pod is created with a projected volume source for downwardAPI with pod name\, cpu and memory limits and cpu and memory requests.  The CPU and memory resources for requests and limits are NOT specified for the container. Pod MUST be able to read the default cpu limits from the mounted DownwardAPIVolumeFiles.\n\n"
"Projected Volume, DownwardAPI, memory request",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_downwardapi.go#L232,v1.9,"A Pod is created with a projected volume source for downwardAPI with pod name\, cpu and memory limits and cpu and memory requests. Pod MUST be able to read the memory request from the mounted DownwardAPIVolumeFiles.\n\n"
"Projected Volume, DownwardAPI, CPU request",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_downwardapi.go#L218,v1.9,"A Pod is created with a projected volume source for downwardAPI with pod name\, cpu and memory limits and cpu and memory requests. Pod MUST be able to read the cpu request from the mounted DownwardAPIVolumeFiles.\n\n"
"Projected Volume, DownwardAPI, memory limits",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_downwardapi.go#L204,v1.9,"A Pod is created with a projected volume source for downwardAPI with pod name\, cpu and memory limits and cpu and memory requests. Pod MUST be able to read the memory limits from the mounted DownwardAPIVolumeFiles.\n\n"
"Projected Volume, DownwardAPI, CPU limits",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_downwardapi.go#L190,v1.9,"A Pod is created with a projected volume source for downwardAPI with pod name\, cpu and memory limits and cpu and memory requests. Pod MUST be able to read the cpu limits from the mounted DownwardAPIVolumeFiles.\n\n"
"Projected Volume, DownwardAPI, update annotation",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_downwardapi.go#L156,v1.9,"A Pod is created with a projected volume source for downwardAPI with pod name\, cpu and memory limits and cpu and memory requests and annotation items. Pod MUST be able to read the annotations from the mounted DownwardAPIVolumeFiles. Annotations are then updated. Pod MUST be able to read the updated values for the Annotations.\n\n"
"Projected Volume, DownwardAPI, update labels",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_downwardapi.go#L124,v1.9,"A Pod is created with a projected volume source for downwardAPI with pod name\, cpu and memory limits and cpu and memory requests and label items. Pod MUST be able to read the labels from the mounted DownwardAPIVolumeFiles. Labels are then updated. Pod MUST be able to read the updated values for the Labels.\n\n"
"Projected Volume, DownwardAPI, volume mode 0400",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_downwardapi.go#L80,v1.9,"A Pod is created with a projected volume source for downwardAPI with pod name\, cpu and memory limits and cpu and memory requests. The default mode for the volume mount is set to 0400. Pod MUST be able to read the pod name from the mounted DownwardAPIVolumeFiles and the volume mode must be -r—-—————.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n"
"Projected Volume, DownwardAPI, volume mode 0400",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_downwardapi.go#L64,v1.9,"A Pod is created with a projected volume source for downwardAPI with pod name\, cpu and memory limits and cpu and memory requests. The default mode for the volume mount is set to 0400. Pod MUST be able to read the pod name from the mounted DownwardAPIVolumeFiles and the volume mode must be -r—-—————.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n"
"Projected Volume, DownwardAPI, pod name",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_downwardapi.go#L49,v1.9,"A Pod is created with a projected volume source for downwardAPI with pod name\, cpu and memory limits and cpu and memory requests. Pod MUST be able to read the pod name from the mounted DownwardAPIVolumeFiles.\n\n"
"Projected Volume, Secrets, create, update delete",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_secret.go#L212,v1.9,"Create a Pod with three containers with secrets namely a create\, update and delete container. Create Container when started MUST no have a secret\, update and delete containers MUST be created with a secret value. Create a secret in the create container\, the Pod MUST be able to read the secret from the create container. Update the secret in the update container\, Pod MUST be able to read the updated secret value. Delete the secret in the delete container. Pod MUST fail to read the secret from the delete container.\n\n"
"Projected Volume, Secrets, mapped, multiple paths",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_secret.go#L117,v1.9,A Pod is created with a projected volume source ‘secret’ to store a secret with a specified key. The secret is mapped to two different volume mounts. Pod MUST be able to read the content of the key successfully from the two volume mounts and the mode MUST be -r—-—————— on the mapped volumes.\n\n
"Projected Volume, Secrets, mapped, volume mode 0400",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_secret.go#L86,v1.9,A Pod is created with a projected volume source ‘secret’ to store a secret with a specified key with permission mode set to 0400. The secret is also mapped to a specific name. Pod MUST be able to read the content of the key successfully and the mode MUST be -r—-—————— on the mapped volume.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n
"Projected Volume, Secrets, mapped",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_secret.go#L76,v1.9,A Pod is created with a projected volume source ‘secret’ to store a secret with a specified key with default permission mode. The secret is also mapped to a custom path. Pod MUST be able to read the content of the key successfully and the mode MUST be -r—-—————— on the mapped volume.\n\n
"Project Volume, Secrets, non-root, custom fsGroup",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_secret.go#L64,v1.9,"A Pod is created with a projected volume source ‘secret’ to store a secret with a specified key. The volume has permission mode set to 0440\, fsgroup set to 1001 and user set to non-root uid of 1000. Pod MUST be able to read the content of the key successfully and the mode MUST be -r—-r————-.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID.\n\n"
"Projected Volume, Secrets, volume mode 0400",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_secret.go#L53,v1.9,A Pod is created with a projected volume source ‘secret’ to store a secret with a specified key with permission mode set to 0x400 on the Pod. Pod MUST be able to read the content of the key successfully and the mode MUST be -r—-—————.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n
"Projected Volume, Secrets, volume mode default",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/projected_secret.go#L43,v1.9,A Pod is created with a projected volume source ‘secret’ to store a secret with a specified key with default permission mode. Pod MUST be able to read the content of the key successfully and the mode MUST be -rw-r--r-- by default.\n\n
Container Runtime blackbox test on terminated container should report termination message  from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/runtime.go#L240,v1.15,"Name: Container Runtime\, TerminationMessage\, from file of succeeding container\nCreate a pod with an container. Container's output is recorded in a file and the container exits successfully without an error. When container is terminated\, terminationMessage MUST match with the content from file.\n[LinuxOnly]: Cannot mount files in Windows Containers.\n\n"
Container Runtime blackbox test on terminated container should report termination message  as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/runtime.go#L223,v1.15,"Name: Container Runtime\, TerminationMessage\, from log output of succeeding container\nCreate a pod with an container. Container's output is recorded in log and container exits successfully without an error. When container is terminated\, terminationMessage MUST have no content as container succeed.\n[LinuxOnly]: Cannot mount files in Windows Containers.\n\n"
Container Runtime blackbox test on terminated container should report termination message  from log output if TerminationMessagePolicy FallbackToLogsOnError is set,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/runtime.go#L206,v1.15,"Name: Container Runtime\, TerminationMessage\, from container's log output of failing container\nCreate a pod with an container. Container's output is recorded in log and container exits with an error. When container is terminated\, termination message MUST match the expected output recorded from container's log.\n[LinuxOnly]: Cannot mount files in Windows Containers.\n\n"
Container Runtime blackbox test on terminated container should report termination message  if TerminationMessagePath is set as non-root user and at a non-default path,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/runtime.go#L187,v1.15,"Name: Container Runtime\, TerminationMessagePath\, non-root user and non-default path\nCreate a pod with a container to run it as a non-root user with a custom TerminationMessagePath set. Pod redirects the output to the provided path successfully. When the container is terminated\, the termination message MUST match the expected output logged in the provided custom path.\n[LinuxOnly]: Tagged LinuxOnly due to use of 'uid' and unable to mount files in Windows Containers.\n\n"
"Container Runtime, Restart Policy, Pod Phases",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/runtime.go#L47,v1.13,"If the restart policy is set to ‘Always’\, Pod MUST be restarted when terminated\, If restart policy is ‘OnFailure’\, Pod MUST be started only if it is terminated with non-zero exit code. If the restart policy is ‘Never’\, Pod MUST never be restarted. All these three test cases MUST verify the restart counts accordingly.\n\n"
"Secrets, with empty-key",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/secrets.go#L134,v1.15,Attempt to create a Secret with an empty key. The creation MUST fail.\n\n
"Secrets, pod environment from source",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/secrets.go#L89,v1.9,Create a secret. Create a Pod with Container that declares a environment variable using ‘EnvFrom’ which references the secret created to extract a key value from the secret. Pod MUST have the environment variable that contains proper value for the key to the secret.\n\n
"Secrets, pod environment field",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/secrets.go#L40,v1.9,Create a secret. Create a Pod with Container that declares a environment variable which references the secret created to extract a key value from the secret. Pod MUST have the environment variable that contains proper value for the key to the secret.\n\n
"Secrets Volume, create, update and delete",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/secrets_volume.go#L201,v1.9,"Create a Pod with three containers with secrets volume sources namely a create\, update and delete container. Create Container when started MUST not have secret\, update and delete containers MUST be created with a secret value. Create a secret in the create container\, the Pod MUST be able to read the secret from the create container. Update the secret in the update container\, Pod MUST be able to read the updated secret value. Delete the secret in the delete container. Pod MUST fail to read the secret from the delete container.\n\n"
"Secrets Volume, mapping multiple volume paths",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/secrets_volume.go#L122,v1.9,Create a secret. Create a Pod with two secret volume sources configured into the container in to two different custom paths. Pod MUST be able to read the secret from the both the mounted volumes from the two specified custom paths.\n\n
"Secrets Volume, volume mode default, secret with same name in different namespace",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/secrets_volume.go#L96,v1.12,Create a secret with same name in two namespaces. Create a Pod with secret volume source configured into the container. Pod MUST be able to read the secrets from the mounted volume from the container runtime and only secrets which are associated with namespace where pod is created. The file mode of the secret MUST be -rw-r--r-- by default.\n\n
"Secrets Volume, mapping, volume mode 0400",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/secrets_volume.go#L86,v1.9,Create a secret. Create a Pod with secret volume source configured into the container with a custom path and file mode set to 0x400. Pod MUST be able to read the secret from the mounted volume from the specified custom path. The file mode of the secret MUST be -r-—r-—r—-.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n
"Secrets Volume, mapping",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/secrets_volume.go#L76,v1.9,Create a secret. Create a Pod with secret volume source configured into the container with a custom path. Pod MUST be able to read the secret from the mounted volume from the specified custom path. The file mode of the secret MUST be -rw—r-—r—- by default.\n\n
"Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/secrets_volume.go#L64,v1.9,"Create a secret. Create a Pod with secret volume source configured into the container with file mode set to 0x440 as a non-root user with uid 1000 and fsGroup id 1001. Pod MUST be able to read the secret from the mounted volume from the container runtime and the file mode of the secret MUST be -r——r-—-—- by default.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions\, or running as UID / GID.\n\n"
"Secrets Volume, volume mode 0400",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/secrets_volume.go#L53,v1.9,Create a secret. Create a Pod with secret volume source configured into the container with file mode set to 0x400. Pod MUST be able to read the secret from the mounted volume from the container runtime and the file mode of the secret MUST be -r——--—-—- by default.\nThis test is marked LinuxOnly since Windows does not support setting specific file permissions.\n\n
"Secrets Volume, default",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/secrets_volume.go#L43,v1.9,Create a secret. Create a Pod with secret volume source configured into the container. Pod MUST be able to read the secret from the mounted volume from the container runtime and the file mode of the secret MUST be -rw-r--r-- by default.\n\n
"Security Context, allowPrivilegeEscalation=false.",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/security_context.go#L327,v1.15,"Configuring the allowPrivilegeEscalation to false\, does not allow the privilege escalation operation.\nA container is configured with allowPrivilegeEscalation=false and a given uid (1000) which is not 0.\nWhen the container is run\, container's output MUST match with expected output verifying container ran with given uid i.e. uid=1000.\n[LinuxOnly]: This test is marked LinuxOnly since Windows does not support running as UID / GID\, or privilege escalation.\n\n"
"Security Context, privileged=false.",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/security_context.go#L259,v1.15,Create a container to run in unprivileged mode by setting pod's SecurityContext Privileged option as false. Pod MUST be in Succeeded phase.\n[LinuxOnly]: This test is marked as LinuxOnly since it runs a Linux-specific command.\n\n
"Security Context, readOnlyRootFilesystem=false.",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/security_context.go#L217,v1.15,Container is configured to run with readOnlyRootFilesystem to false.\nWrite operation MUST be allowed and Pod MUST be in Succeeded state.\n\n
"Security Context, runAsUser=65534",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/common/security_context.go#L82,v1.15,Container is created with runAsUser option by passing uid 65534 to run as unpriviledged user. Pod MUST be in Succeeded phase.\n[LinuxOnly]: This test is marked as LinuxOnly since Windows does not support running as UID / GID.\n\n
"Kubectl, proxy socket",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1834,v1.9,Start a proxy server on by running ‘kubectl proxy’ with --unix-socket=<some path>. Call the proxy server by requesting api versions from  http://locahost:0/api. The proxy server MUST provide at least one version string\n\n
"Kubectl, proxy port zero",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1809,v1.9,"TODO: test proxy options (static\, prefix\, etc)\n\nStart a proxy server on port zero by running ‘kubectl proxy’ with --port=0. Call the proxy server by requesting api versions from unix socket. The proxy server MUST provide at least one version string.\n\n"
"Kubectl, run job with --rm",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1779,v1.9,Start a job with a Pod using ‘kubectl run’ but specify --rm=true. Wait for the Pod to start running by verifying that there is output as expected. Now verify that the job has exited and cannot be found. With --rm=true option the job MUST start by running the image specified and then get deleted itself.\n\n
"Kubectl, replace",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1738,v1.9,Command ‘kubectl replace’ on a existing Pod with a new spec MUST update the image of the container running in the Pod. A -f option to ‘kubectl replace’ SHOULD force to re-create the resource. The new Pod SHOULD have the container with new change to the image.\n\n
"Kubectl, run pod",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1702,v1.9,"Command ‘kubectl run’ MUST create a pod\, with --generator=run-pod\, when a image name is specified in the run command. After the run command there SHOULD be a pod that should exist with one container running the specified image.\n\n"
"Kubectl, run job",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1629,v1.9,"Command ‘kubectl run’ MUST create a job\, with --generator=job\, when a image name is specified in the run command. After the run command there SHOULD be a job that should exist with one container running the specified image. Also there SHOULD be a restart policy on the job spec that SHOULD match the command line.\n\n"
"Kubectl, run deployment",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1584,v1.9,"Command ‘kubectl run’ MUST create a deployment\, with --generator=deployment\, when a image name is specified in the run command. After the run command there SHOULD be a deployment that should exist with one container running the specified image. Also there SHOULD be a Pod that is controlled by this deployment\, with a container running the specified image.\n\n"
"Kubectl, rolling update",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1534,v1.9,Command ‘kubectl rolling-update’ MUST replace the specified replication controller with a new replication controller by updating one pod at a time to use the new Pod spec.\n\n
"Kubectl, run rc",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1473,v1.9,Command ‘kubectl run’ MUST create a running rc with default one replicas given a image using the option --image=’nginx’. The running replication controller SHOULD have one container and the container SHOULD be running the image specified in the ‘run’ command. Also there MUST be 1 pod controlled by this replica set running 1 container with the image specified. A ‘kubetctl logs’ command MUST return the logs from the container in the replication controller.\n\n
"Kubectl, run default",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1438,v1.9,Command ‘kubectl run’ MUST create a running pod with possible replicas given a image using the option --image=’nginx’. The running Pod SHOULD have one container and the container SHOULD be running the image specified in the ‘run’ command.\n\n
"Kubectl, version",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1406,v1.9,"The command ‘kubectl version’ MUST return the major\, minor versions\,  GitCommit\, etc of the Client and the Server that the kubectl is configured to connect to.\n\n"
"Kubectl, patch to annotate",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1372,v1.9,"Start running a redis master and a replication controller. When the pod is running\, using ‘kubectl patch’ command add annotations. The annotation MUST be added to running pods and SHOULD be able to read added annotations from each of the Pods running under the replication controller.\n\n"
"Kubectl, logs",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1316,v1.9,"When a Pod is running then it MUST generate logs.\nStarting a Pod should have a log line indicating the server is running and ready to accept connections. Also log command options MUST work as expected and described below.\n‘kubectl log -tail=1’ should generate a output of one line\, the last line in the log.\n‘kubectl --limit-bytes=1’ should generate a single byte output.\n‘kubectl --tail=1 --timestamp should generate one line with timestamp in RFC3339 format\n‘kubectl --since=1s’ should output logs that are only 1 second older from now\n‘kubectl --since=24h’ should output logs that are only 1 day older from now\n\n"
"Kubectl, label update",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1229,v1.9,"When a Pod is running\, update a Label using ‘kubectl label’ command. The label MUST be created in the Pod. A ‘kubectl get pod’ with -l option on the container MUST verify that the label can be read back. Use ‘kubectl label label-’ to remove the label. ‘kubectl get pod’ with -l option SHOULD not list the deleted label as the label is removed.\n\n"
"Kubectl, create service, replication controller",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1132,v1.9,"Create a Pod running redis master listening to port 6379. Using kubectl expose the redis master  replication controllers at port 1234. Validate that the replication controller is listening on port 1234 and the target port is set to 6379\, port that redis master is listening. Using kubectl expose the redis master as a service at port 2345. The service MUST be listening on port 2345 and the target port is set to 6379\, port that redis master is listening.\n\n"
"Kubectl, describe pod or rc",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1027,v1.9,"Deploy a redis controller and a redis service. Kubectl describe pods SHOULD return the name\, namespace\, labels\, state and other information as expected. Kubectl describe on rc\, service\, node and namespace SHOULD also return proper information.\n\n"
"Kubectl, cluster info",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L1001,v1.9,"Call kubectl to get cluster-info\, output MUST contain cluster-info returned and Kubernetes Master SHOULD be running.\n\n"
"Kubectl, check version v1",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L754,v1.9,"Run kubectl to get api versions\, output MUST contain returned versions with ‘v1’ listed.\n\n"
"Kubectl, guestbook application",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L352,v1.9,"Create Guestbook application that contains redis server\, 2 instances of redis slave\, frontend application\, frontend service and redis master service and redis slave service. Using frontend service\, the test will write an entry into the guestbook application which will store the entry into the backend redis database. Application flow MUST work as expected and the data written MUST be available to read.\n\n"
"Kubectl, rolling update replication controller",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L319,v1.9,Create a Pod and a container with a given image. Configure replication controller to run 2 replicas. The number of running instances of the Pod MUST equal the number of replicas set on the replication controller which is 2. Run a rolling update to run a different version of the container. All running instances SHOULD now be running the newer version of the container as part of the rolling update.\n\n
"Kubectl, scale replication controller",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L298,v1.9,Create a Pod and a container with a given image. Configure replication controller to run 2 replicas. The number of running instances of the Pod MUST equal the number of replicas set on the replication controller which is 2. Update the replicaset to 1. Number of running instances of the Pod MUST be 1. Update the replicaset to 2. Number of running instances of the Pod MUST be 2.\n\n
"Kubectl, replication controller",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/kubectl/kubectl.go#L285,v1.9,Create a Pod and a container with a given image. Configure replication controller to run 2 replicas. The number of running instances of the Pod MUST equal the number of replicas set on the replication controller which is 2.\n\n
"DNS, for ExternalName Services",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/dns.go#L314,v1.15,"Create a service with externalName. Pod MUST be able to resolve the address for this service via CNAME. When externalName of this service is changed\, Pod MUST resolve to new DNS entry for the service.\nChange the service type from externalName to ClusterIP\, Pod MUST resolve DNS to the service by serving A records.\n\n"
"DNS, resolve the subdomain",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/dns.go#L272,v1.15,"Create a headless service with label. Create a Pod with label to match service's label\, with hostname and a subdomain same as service name.\nPod MUST be able to resolve its fully qualified domain name as well as subdomain by serving an A record at that name.\n\n"
"DNS, resolve the hostname",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/dns.go#L231,v1.15,"Create a headless service with label. Create a Pod with label to match service's label\, with hostname and a subdomain same as service name.\nPod MUST be able to resolve its fully qualified domain name as well as hostname by serving an A record at that name.\n\n"
"DNS, services",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/dns.go#L126,v1.9,"When a headless service is created\, the service MUST be able to resolve all the required service endpoints. When the service is created\, any pod in the same namespace must be able to resolve the service by all of the expected DNS names.\n\n"
"DNS, cluster",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/dns.go#L107,v1.14,"When a Pod is created\, the pod MUST be able to resolve cluster dns entries such as kubernetes.default via /etc/hosts.\n\n"
"DNS, cluster",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/dns.go#L45,v1.9,"When a Pod is created\, the pod MUST be able to resolve cluster dns entries such as kubernetes.default via DNS.\n\n"
"Proxy, logs service endpoint",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/proxy.go#L86,v1.9,"using the porter image to serve content\, access the content\n(of multiple pods?) from multiple (endpoints/services?)\n\nSelect any node in the cluster to invoke  /logs endpoint  using the /nodes/proxy subresource from the kubelet port. This endpoint MUST be reachable.\n\n"
"Proxy, logs endpoint",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/proxy.go#L77,v1.9,Select any node in the cluster to invoke /proxy/nodes/<nodeip>//logs endpoint. This endpoint MUST be reachable.\n\n
"Proxy, logs port endpoint",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/proxy.go#L70,v1.9,Select any node in the cluster to invoke /proxy/nodes/<nodeip>:10250/logs endpoint. This endpoint MUST be reachable.\n\n
"Service, endpoints with multiple ports",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/service.go#L187,v1.9,"Create a service with two ports but no Pods are added to the service yet.  The service MUST run and show empty set of endpoints. Add a Pod to the first port\, service MUST list one endpoint for the Pod on that port. Add another Pod to the second port\, service MUST list both the endpoints. Delete the first Pod and the service MUST list only the endpoint to the second Pod. Delete the second Pod and the service must now have empty set of endpoints.\n\n"
"Service, endpoints",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/service.go#L125,v1.9,"Create a service with a endpoint without any Pods\, the service MUST run and show empty endpoints. Add a pod to the service and the service MUST validate to show all the endpoints for the ports exposed by the Pod. Add another Pod then the list of all Ports exposed by both the Pods MUST be valid and have corresponding service endpoint. Once the second Pod is deleted then set of endpoint MUST be validated to show only ports from the first container that are exposed. Once both pods are deleted the endpoints from the service MUST be empty.\n\n"
Kubernetes Service,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/service.go#L115,v1.9,By default when a kubernetes cluster is running there MUST be a ‘kubernetes’ service running in the cluster.\n\n
"Service endpoint latency, thresholds",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/network/service_latency.go#L55,v1.9,"Run 100 iterations of create service with the Pod running the pause image\, measure the time it takes for creating the service and the endpoint with the service name is available. These durations are captured for 100 iterations\, then the durations are sorted to compute 50th\, 90th and 99th percentile. The single server latency MUST not exceed liberally set thresholds of 20s for 50th percentile and 50s for the 90th percentile.\n\n"
"Pod events, verify event from Scheduler and Kubelet",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/node/events.go#L43,v1.9,"Create a Pod\, make sure that the Pod can be queried. Create a event selector for the kind=Pod and the source is the Scheduler. List of the events MUST be at least one. Create a event selector for kind=Pod and the source is the Kubelet. List of the events MUST be at least one. Both Scheduler and Kubelet MUST send events when scheduling and running a Pod.\n\n"
"Pods, QOS",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/node/pods.go#L189,v1.9,Create a Pod with CPU and Memory request and limits. Pod status MUST have QOSClass set to PodQOSGuaranteed.\n\n
"Pods, delete grace period",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/node/pods.go#L57,v1.15,"Create a pod\, make sure it is running. Create a 'kubectl local proxy'\, capture the port the proxy is listening. Using the http client send a ‘delete’ with gracePeriodSeconds=30. Pod SHOULD get deleted within 30 seconds.\n\n"
"Pods, prestop hook",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/node/pre_stop.go#L182,v1.9,"Create a server pod with a rest endpoint '/write' that changes state.Received field. Create a Pod with a pre-stop handle that posts to the /write endpoint on the server Pod. Verify that the Pod with pre-stop hook is running. Delete the Pod with the pre-stop hook. Before the Pod is deleted\, pre-stop handler MUST be called when configured. Verify that the Pod is deleted and a call to prestop hook is verified by checking the status received on the server Pod.\n\n"
"Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/scheduling/predicates.go#L605,v1.16,"Pods with the same HostPort and Protocol\, but different HostIPs\, MUST NOT schedule to the\nsame node if one of those IPs is the default HostIP of 0.0.0.0\, which represents all IPs on the host.\n\n"
"Scheduling, HostPort matching and HostIP and Protocol not-matching",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/scheduling/predicates.go#L572,v1.16,Pods with the same HostPort value MUST be able to be scheduled to the same node\nif the HostIP or Protocol is different.\n\n
"Scheduler, node selector matching",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/scheduling/predicates.go#L367,v1.9,Create a label on the node {k: v}. Then create a Pod with a NodeSelector set to {k: v}. Check to see if the Pod is scheduled. When the NodeSelector matches then Pod MUST be scheduled on that node.\n\n
"Scheduler, node selector not matching",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/scheduling/predicates.go#L344,v1.9,"Test Nodes does not have any label\, hence it should be impossible to schedule Pod with\nnonempty Selector set.\n\nCreate a Pod with a NodeSelector set to a value that does not match a node in the cluster. Since there are no nodes matching the criteria the Pod MUST not be scheduled.\n\n"
"Scheduler, resource limits",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/scheduling/predicates.go#L237,v1.9,This test verifies we don't allow scheduling of pods in a way that sum of\nlimits of pods is greater than machines capacity.\nIt assumes that cluster add-on pods stay stable and cannot be run in parallel\nwith any other test that touches Nodes or Pods.\nIt is so because we need to have precise control on what's running in the cluster.\nTest scenario:\n1. Find the amount CPU resources on each node.\n2. Create one pod with affinity to each node that uses 70%!!(MISSING)o(MISSING)f the node CPU.\n3. Wait for the pods to be scheduled.\n4. Create another pod with no affinity to any node that need 50%!!(MISSING)o(MISSING)f the largest node CPU.\n5. Make sure this additional pod is not scheduled.\n\nScheduling Pods MUST fail if the resource limits exceed Machine capacity.\n\n
"EmptyDir Wrapper Volume, ConfigMap volumes, no race",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/storage/empty_dir_wrapper.go#L186,v1.13,Create 50 ConfigMaps Volumes and 5 replicas of pod with these ConfigMapvolumes mounted. Pod MUST NOT fail waiting for Volumes.\n\n
"EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict",https://github.com/kubernetes/kubernetes/tree/master/test/e2e/storage/empty_dir_wrapper.go#L65,v1.13,Secret volume and ConfigMap volume is created with data. Pod MUST be able to start with Secret and ConfigMap volumes mounted into the container.\n\n
SubPath: Reading content from a projected volume.,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/storage/subpath.go#L109,v1.12,Containers in a pod can read content from a projected mounted volume which was configured with a subpath.\nThis test is marked LinuxOnly since Windows cannot mount individual files in Containers.\n\n
SubPath: Reading content from a downwardAPI volume.,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/storage/subpath.go#L94,v1.12,Containers in a pod can read content from a downwardAPI mounted volume which was configured with a subpath.\nThis test is marked LinuxOnly since Windows cannot mount individual files in Containers.\n\n
SubPath: Reading content from a configmap volume.,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/storage/subpath.go#L81,v1.12,Containers in a pod can read content from a configmap mounted volume which was configured with a subpath and also using a mountpath that is a specific file.\nThis test is marked LinuxOnly since Windows cannot mount individual files in Containers.\n\n
SubPath: Reading content from a configmap volume.,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/storage/subpath.go#L70,v1.12,Containers in a pod can read content from a configmap mounted volume which was configured with a subpath.\nThis test is marked LinuxOnly since Windows cannot mount individual files in Containers.\n\n
SubPath: Reading content from a secret volume.,https://github.com/kubernetes/kubernetes/tree/master/test/e2e/storage/subpath.go#L59,v1.12,Containers in a pod can read content from a secret mounted volume which was configured with a subpath.\nThis test is marked LinuxOnly since Windows cannot mount individual files in Containers.\n\n
#+end_SRC
