#+AUTHOR: ii team
#+TITLE: APIsnoop BOT
#+DATE: 15 August 2019
#+INCLUDE: "config.org"
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(b) | TADA(d)
#+ARCHIVE: archive/meta.archive.org::
#+PROPERTY: header-args:sql-mode+ :results silent


* Purpose
* Welcome, ii dev!
If you're reading this org file, from within spacemacs, and expecting to do your work from within an org-file...then welcome, fellow ii dev (or honorary ii dev)!

To ensure you're set up properly, you want to run down this checklist:
** TADA [0%] Ready to Work!
    :PROPERTIES:
    :RESET_CHECK_BOXES: t
    :LOGGING: nil
    :END:
- [ ] Ensure you are reading this, and working, from within a tmate session on sharing.io.
  how do to do this is outside scope of this org, but ensure you've ssh'ed into sharing.io, and started a tmate session.
  
  #+begin_src tmate
  echo "Hello, $USER!"
  #+end_src
- [ ] Start up dev environment with the ii env variables
  : open a new tmate pane (ctrl+b c) or run `, ,` within the block to run the following:
  #+NAME: start docker containers
  #+BEGIN_SRC tmate :noweb eval :session apisnoop:docker
    # These  sequences are to allow you to use this as an iteration loop
    
    
    
    cd ~/ii/apisnoop/apps # docker-compose.yaml is here
    # Retangle / export code from org/documentation usually into ./apps/*
    # the eval: local vars set this emacs instance server-name to apisnoop
    rm hasura/migrations/* # just in case we move files around
    echo 'tangling files'
    emacsclient -s apisnoop -e "(org-babel-tangle-file \"../org/meta_bot.org\")"
    emacsclient -s apisnoop -e "(org-babel-tangle-file \"../org/tables_and_views_bot.org\")"
    # We have a sharing.io check to ensure everyone get's there own PORTS
    . .loadenv
    # Bring down anything you may already have up
    docker-compose down -t 0 --remove-orphans
    docker-compose rm -f
    # Build your containers
    docker-compose build
    # Bring up your containers
    docker-compose up --remove-orphans
  #+END_SRC
- [ ] perform migrations (if not using .cli-migrations hasura image)
  #+NAME: Perform Migrations 
  #+BEGIN_SRC tmate :noweb eval :session apisnoop:migrations
    cd ~/ii/apisnoop/apps/hasura
    hasura migrate apply
    hasura migrate status
  #+END_SRC
- [ ] Connect to your postgres db and confirm connection 

  connect with this elisp block
  #+NAME: Connect org to postgres
  #+BEGIN_SRC emacs-lisp :results silent
    (sql-connect "apisnoop" (concat "*SQL: postgres:data*"))
  #+END_SRC
  
  check your connection with \conninfo.  If successful you should see this message in your minibuffer
  : You are connected to database "apisnoop" as user "apisnoop" on host "localhost" at port "10041".

  #+NAME: Test Connection
  #+BEGIN_SRC sql-mode :results silent
  \conninfo
  #+END_SRC
- [ ] Test that audit events and swagger loaded.
  If  both loaded successfully, then the below query should return two results, that show hits and conf_hits for both.  It is possible that one of the audit events did not load (and so you'd see 0 hits across the board).  If that's the case, run the load_audit_event section again for just that event, refresh your views, and try again.  It'll get there!
  
  #+NAME: Endpoint Stats
  #+BEGIN_SRC sql-mode :results silent
   select * from stable_endpoint_stats
    ;
  #+END_SRC
- [ ] IF NEEDED: Load swaggers

  #+NAME: Load Swaggers
  #+begin_src sql-mode
    select * from load_bucket_job_swagger_via_curl('ci-kubernetes-e2e-gci-gce', '1188637253832806405');
    REFRESH MATERIALIZED VIEW api_operation_material;
    REFRESH MATERIALIZED VIEW api_operation_parameter_material;
  #+end_src

  #+RESULTS: Load Swaggers
  #+begin_src sql-mode
                                        load_bucket_job_swagger_via_curl                                       
  -------------------------------------------------------------------------------------------------------------
   something went wrong, likely this: duplicate key value violates unique constraint "bucket_job_swagger_pkey"
  (1 row)

  #+end_src
  
  #+begin_src sql-mode
  select distinct bucket, job from raw_audit_event;
  #+end_src

  #+RESULTS:
  #+begin_src sql-mode
   bucket | job 
  --------+-----
  (0 rows)

  #+end_src

- [ ] IF NEEDED: load audit_events
  #+NAME: Load Audit Events
  #+begin_src sql-mode
    select * from load_audit_events('ci-kubernetes-e2e-gci-gce', '1188637253832806405');
    -- select * from load_audit_events('ci-kubernetes-e2e-gci-gce', '1183553991464718336');
  #+end_src

  #+RESULTS: Load Audit Events
  #+begin_src sql-mode
   load_audit_events 
  -------------------

  (1 row)

  #+end_src
- [ ] IF NEEDED: Refresh Materialized Views
  we have a few materialized views that will need to run after we loaded thangs up
  #+NAME: refresh our materialized views
  #+begin_src sql-mode
    REFRESH MATERIALIZED VIEW api_operation_material;
    REFRESH MATERIALIZED VIEW api_operation_parameter_material;
  #+end_src

  #+RESULTS: refresh our materialized views
  #+begin_src sql-mode
  REFRESH MATERIALIZED VIEW
  #+end_src
- [ ] Start up a psql interpreter with the ii env variables
  It can be useful to have psql up to run queries directly in the interpreter.
  : open a new tmate pane (ctrl+b c), or navigate to one used to load cached audit event
  #+NAME: start docker containers
  #+BEGIN_SRC tmate :noweb eval :session apisnoop:psql
    cd ~/ii/apisnoop/apps # docker-compose.yaml is here
    . .loadenv
    psql
  #+END_SRC
- [ ] Test your  hasura endpoint is up
  If all is working right, you should be able to visit =$YOURUSERNAME-hasura.sharing.io=.  This will give a public graphql explorer for our views.  This means we can also post queries to our graphql endpoint and get results back.
  
  Let's test that by seeing the change in coverage between our two audit events.  If it works, you should see json returned in your minibuffer, showing change in conformance and test coverage.
  
  #+NAME: Check Hasura is Up
  #+begin_src shell :results silent
    curl \
        -X POST \
        -H "Content-Type: application/json" \
        --data '{ "query": "{change_in_coverage {category change_in_number change_in_percent new_coverage old_coverage }}
    " }' \
        https://$USER-hasura.sharing.io/v1/graphql\
    | jq .
  #+end_src
- [ ] Get a drink of water and mark this todo as DONE
  You're all set up and ready to go, but hydration is important!  Get a drink of water, stretch, and recharge before you crush it today!  
  Also, =gh gh gh= to go back to the top then =,TTd= to mark this task as DONE!

* Tables and Views
  All the critical tables and views for apisnoop are documented and tangled from [[file:tables_and_views.org][tables_and_views.org]].
  Explorations into new views, or ad-hoc queries to help answer a problem, are done in our ~explorations~ folder.
* Apps
** .env
#+BEGIN_SRC shell :tangle ../apps/.env_sample
  PGADMIN_PORT=9001
  HASURA_PORT=9000
  # UID based PGPORT used to expose per user postgresql ports on same box
  PGPORT=54321
  PGHOST=localhost
  PGUSER=apisnoop
  PGPASS=s3cr3tsauc3
  PGDATABASE=apisnoop
  CONN="host=127.0.0.1 port=54321 user=apisnoop dbname=apisnoop password=s3cr3tsauc3 sslmode=disable client_encoding=UTF8"
#+END_SRC
** .loadenv
#+NAME: .loadenv
#+BEGIN_SRC shell :tangle ../apps/.loadenv
  # If we are on sharing.io, use UID based *_PORTs
  if [ $(hostname) = "sharing.io" ]
  then
      # Overwriting .env based on \*-${USER}.sharing.io
      echo Using sharing.io setup 1>&2
  (
      # UID based *_PORT used to expose per user postgresql,hasura, and pgadmin ports on same box
      if [ "$KOMPOSE" = "true" ]
      then
              echo Using kompose https://$USER-hasura.apisnoop.io 1>&2
              echo PGPORT=5432
              echo HASURA_PORT=8080
              echo endpoint: https://$USER-hasura.apisnoop.io > $PWD/hasura/config.yaml
      else
              echo Using docker-compose https://$USER-hasura.sharing.io 1>&2
              echo PGPORT=$(id -u)1
              echo HASURA_PORT=$(id -u)0
              echo endpoint: https://$USER-hasura.sharing.io > $PWD/hasura/config.yaml
      fi

      # for running in docker-compose, different localhost:port per user id same
      # for running in docker-compose, different localhost:port per user id same
      # echo PG_CONTAINER_PORT=$PGPORT
      # for running in kompose
      echo PGADMIN_PORT=$(id -u)2
      echo PGHOST=localhost
      echo PGDATABASE=apisnoop
      echo PGUSER=apisnoop
      echo PGPASS=s3cr3tsauc3
      echo PGPASSFILE=$PWD/pgpass
      echo COMPOSE_PROJECT_NAME=apisnoop_$USER
      TAG=$(TZ='Pacific/Auckland'; export TZ ; date +%F-%H-%M)
      echo TAG=$TAG
      # echo HASURA_IMAGE=raiinbow/hasura:$TAG
      # echo POSTGRES_IMAGE=raiinbow/postgres:$TAG
      # echo $PGHOST:$PGPORT:$PGDATABASE:$PGUSER:$PGPASS > $PWD/pgpass
      echo GOOGLE_APPLICATION_CREDENTIALS=$HOME/.gcreds.json
      echo GKS_ZONE="australia-southeast1-a"
      echo GCS_CLUSTER="single-node-cluster"
      echo APISNOOP_NAMESPACE="apisnoop-$USER"
      echo TRAEFIK_NAMESPACE="kube-system"
      echo TRAEFIK_DEPLOYMENT="ii-traefik"
      echo SQLITE_DB=$PWD/sqlite/raiinbow.db
  ) > .env
      export $(grep -v '^#' .env | xargs -d '\n')
      gcloud container clusters get-credentials ${GCS_CLUSTER} --zone ${GKS_ZONE} 2> /dev/null || echo cluster gcreds error
      kubectl config set-context $(kubectl config current-context) --namespace=${APISNOOP_NAMESPACE} 2>&1 > /dev/null
  else
      cp .env_sample .env
      echo SQLITE_DB=$PWD/raiinbow.db >> .env
      cp hasura/config_sample.yaml hasura/config.yaml
      export $(grep -v '^#' .env | xargs -d '\n')
  fi

  PGPASSFILE=$(pwd)/pgpass
  echo $PGHOST:$PGPORT:$PGDATABASE:$PGUSER:$PGPASS > $PGPASSFILE
  chmod 600 $PGPASSFILE
  export CONN="host=127.0.0.1 port=$PGPORT user=$PGUSER dbname=$PGDATABASE password=$PGPASS sslmode=disable client_encoding=UTF8"
#+END_SRC

** Hasura
*** config.yml

#+NAME: hasura config sample
#+BEGIN_SRC text :tangle ../apps/hasura/config_sample.yaml :noweb yes
endpoint: http://localhost:9000
#+END_SRC
*** Dockerfile
#+NAME: apisnoop hasura dockerfile
#+BEGIN_SRC dockerfile :tangle ../apps/hasura/Dockerfile
  FROM hasura/graphql-engine:v1.0.0-beta.8.cli-migrations
  # FROM hasura/graphql-engine:v1.0.0-beta.8
  MAINTAINER Hippie Hacker <hh@ii.coop>
  COPY ./migrations /hasura-migrations
#+END_SRC
** Postgres
*** init-apisnoop-db.sh

 #+NAME: init apisnoop db
 #+BEGIN_SRC sql-mode :tangle ../apps/postgres/initdb/apisnoop_db.sql
   -- ERROR:  database "apisnoop" already exists
   -- create database apisnoop;
   -- create user myuser with encrypted password 'mypass';
   grant all privileges on database apisnoop to apisnoop;
   create role dba with superuser noinherit;
   grant dba to apisnoop;
   \connect apisnoop
   -- we generate uuids
   CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
   -- we write python functions
   CREATE EXTENSION IF NOT EXISTS plpython3u;
   -- we write shell functions
   CREATE EXTENSION IF NOT EXISTS plsh;
   -- regex indexes required trgm
   CREATE EXTENSION IF NOT EXISTS pg_trgm;
   -- paths need an index too
   CREATE EXTENSION IF NOT EXISTS ltree;
   -- hasura needs hash functions
   CREATE EXTENSION IF NOT EXISTS pgcrypto;
   -- hasura db catalog and views
   CREATE SCHEMA IF NOT EXISTS hdb_catalog;
   CREATE SCHEMA IF NOT EXISTS hdb_views;
   -- make the user an owner of system schemas
   ALTER SCHEMA hdb_catalog OWNER TO apisnoop;
   ALTER SCHEMA hdb_views OWNER TO apisnoop;
   GRANT SELECT ON ALL TABLES IN SCHEMA information_schema TO apisnoop;
   GRANT SELECT ON ALL TABLES IN SCHEMA pg_catalog TO apisnoop;
   GRANT USAGE ON SCHEMA public TO apisnoop;
   GRANT ALL ON ALL TABLES IN SCHEMA public TO apisnoop;
   GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO apisnoop;
   GRANT pg_execute_server_program TO apisnoop;
 #+END_SRC
*** Dockerfile
#+BEGIN_SRC dockerfile :tangle ../apps/postgres/Dockerfile
  FROM postgres:12.0
  MAINTAINER Hippie Hacker <hh@ii.coop>
  RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    postgresql-plpython3-12 \
    postgresql-12-plsh \
    python3-bs4\
    python3-requests \
    wget \
    make \
    gcc \
    libc6-dev \
    curl \
    jq \
    git \
    software-properties-common \
    apt-transport-https
  #  && rm -rf /var/lib/apt/lists/*

  RUN curl -L https://dl.google.com/go/go1.12.4.linux-amd64.tar.gz \
    | tar -C /usr/local -xzf - \
    && echo 'export PATH=$PATH:/usr/local/go/bin' \
    > /etc/profile.d/usr-local-go-path.sh \
    && echo 'export PATH=$PATH:$HOME/go/bin' \
    > /etc/profile.d/homedir-go-path.sh
  RUN . /etc/profile.d/usr-local-go-path.sh \
    && . /etc/profile.d/homedir-go-path.sh \
    && go get github.com/golangci/gofmt/gofmt \
    && go get -u golang.org/x/lint/golint \
    && go get golang.org/x/tools/cmd/goimports \
    && go get github.com/jgautheron/goconst/cmd/goconst \
    && go get github.com/jgautheron/usedexports \
    && go get -u github.com/kisielk/errcheck \
    && go get github.com/ii/apisnoopregexp \
    && cd ~/go/src/github.com/ii/apisnoopregexp \
    && make install \
    && cp ~/go/bin/rmatch /usr/local/bin
  COPY ./initdb /docker-entrypoint-initdb.d
  HEALTHCHECK --interval=10s --timeout=5s --start-period=5s --retries=5 \
    CMD ["pg_isready", "-U ", "apisnoop"] || exit 1
 # RUN sed -i -e"s/^#logging_collector = off.*$/logging_collector = on/" /var/lib/postgresql/data/postgresql.conf

#+END_SRC

** auditlogger
*** javascript code
 #+NAME: auditlogger bot (nodejs)
 #+begin_src js :tangle ../apps/auditlogger/auditlogger.js
   // apisnoop auditlogger
   const connectionString = typeof process.env.PG_CONNECTION_STRING !== 'undefined' ? process.env.PG_CONNECTION_STRING : 'postgres://apisnoop:s3cretsauc3@postgres/apisnoop?sslmode=disable'
   const express = require('express')
   const app = express()
   const bodyParser = require('body-parser')
   const morgan = require('morgan')
   const knex = require('knex')({
       client: 'pg',
       connection: connectionString
   })

   console.log(`[status] using connection string: ${connectionString}`)

   function hello (req, res, next) {
       const helloMsg = 'Hey! I\'m your friendly neighbourhood auditlogger. Note: the endpoint /events is where logging takes place.'
       console.log(helloMsg)
       res.json({ message: helloMsg })
       return res.end()
   }

   function requestFailure (req, res, next, message) {
       res.status(400)
       res.json({ message })
       return res.end()
   }

   function checkForBodyContent (req, res, next) {
       if (Object.keys(req.body).length === 0 || typeof req.body !== 'object') {
           console.log('[error] request contains no body')
           return requestFailure(req, res, next, 'request must contain a body')
       }
       return next()
   }

   function checkUserAgent (req, res, next) {
       const requestContent = req.body
       console.log(req.headers['user-agent'])
       if (req.headers['user-agent'] !== 'kube-apiserver-admission') {
           console.log('[error] request didn\'t come from kube-apiserver')
           return requestFailure(req, res, next, 'Error: request must come from Kubernetes apiserver')
       }
       return next()
   }

   function logEventsToDB (req, res, next) {
       const requestContent = req.body
       const items = requestContent.items[0]

       console.log(JSON.stringify(requestContent, null, 2))

       console.log('[status] inserting into database')
       var dataToInsert = {
            bucket: 'apisnoop',
            job: 'live', 
            audit_id: items.auditID,
            stage: items.stage, 
            event_verb: items.verb,
            request_uri: items.requestURI,
            data: JSON.stringify(requestContent)
       }
       console.log(dataToInsert)
  
       knex.transaction((trx) => {
            knex('live_audit_event').transacting(trx).insert(dataToInsert)
                .then(trx.commit)
                .catch(trx.rollback)
       }).then(resp => {
           console.log('[status] successfully submitted entry')
           res.json({ message: 'operation complete; data inserted' })
           return res.end()
       }).catch(err => {
           console.log('[error] database: ${err}')
           requestFailure(req, res, next, '[error] database: ${err}')
       })
   }

   console.log('[status] starting apisnoop-auditlog-event-handler')

   app.use(bodyParser.urlencoded({
       extended: true
   }))
   app.use(express.json())
   app.use(morgan('combined'))

   app.get('/', hello)
   app.post('/events', [checkForBodyContent, checkUserAgent], logEventsToDB)

   knex.raw('select 0;').then(() => {
       console.log('[status] connected to database')
       app.listen('9900', () => {
           console.log('[status] started; listening on port 9900')
       })

   }).catch(err => {
       console.log('[error] No database connection found.')
       console.log(err)
       process.exit(1)
   }) 

 #+end_src

 #+NAME: auditlogger bot (nodejs) package
 #+begin_src javascript :tangle ../apps/auditlogger/package.json
 {
   "name": "apisnoop-auditlogger",
   "version": "0.0.1",
   "description": "AuditLogger for apisnoop",
   "main": "index.js",
   "scripts": {
     "test": "echo \"Error: no test specified\" && exit 1"
   },
   "author": "Caleb Woodbine <caleb@ii.coop>",
   "license": "Apache-2.0",
   "dependencies": {
     "express": "^4.17.1",
     "knex": "^0.20.1",
     "morgan": "^1.9.1",
     "pg": "^7.12.1"
   }
 }
 #+end_src

*** Dockerfile
 #+NAME: dockerfile for auditlogger bot
 #+begin_src dockerfile :tangle ../apps/auditlogger/Dockerfile
 FROM node:12.13.0-stretch
 RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
 RUN  echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main" > /etc/apt/sources.list.d/pgdg.list
 RUN apt update && \
     apt install -y vim postgresql-client-12 netcat
 WORKDIR /opt/apisnoop
 COPY auditlogger.js .
 COPY package.json .
 RUN npm i
 EXPOSE 9900
 CMD ["node", "auditlogger.js"]
 #+end_src

 #+NAME: build auditlog bot container image
 #+begin_src tmate
 docker build -t raiinbow/auditlogger .
 #+end_src

** pgadmin
*** servers.json
# python setup.py --dump-servers /tmp/server.json --user apisnoop@cncf.io
#+NAME: pgadmin default servers config
#+BEGIN_SRC json :tangle ../apps/pgadmin/servers.json
  {
      "Servers": {
          "1": {
              "Name": "apisnoop",
              "Group": "Servers",
              "Host": "postgres",
              "Port": 5432,
              "MaintenanceDB": "postgres",
              "Username": "apisnoop",
              "SSLMode": "prefer",
              "SSLCert": "<STORAGE_DIR>/.postgresql/postgresql.crt",
              "SSLKey": "<STORAGE_DIR>/.postgresql/postgresql.key",
              "SSLCompression": 0,
              "Timeout": 0,
              "UseSSHTunnel": 0,
              "TunnelPort": "22",
              "TunnelAuthentication": 0
          }
      }
  }
#+END_SRC

** docker-compose.yml

#+NAME: hasura docker-compose
#+BEGIN_SRC yaml :tangle ../apps/docker-compose.yml
  # hasura/docker-compose.yaml
  # Kompose Note: We don’t support anything 3.4 and above at the moment
  version: "3"
  services:
    postgres:
      # image: postgres:11.5 # debian-slim / alternative: postgres:11.5-alpine
      # we need our image to include plpython3u
      image: "raiinbow/postgres:${TAG}"
      build: "./postgres"
        # dockerfile: postgres/Dockerfile
        # context: .
      container_name: "${USER}-postgres"
      restart: always
      shm_size: '64GB' # we currently use big boxes
      #cap_add: # capabilities
      #  - ALL
      environment:
        # These are postgres server setup options
        - POSTGRES_DB=${PGDATABASE}
        - POSTGRES_USER=${PGUSER}
        - POSTGRES_PASSWORD=${PGPASS}
        # - PGDATA=/dev/shm/pgdata
        # - POSTGRES_PASSWORD_FILE="/run/secrets/postgres-passwd" # k8s secret style
        # - POSTGRES_INITDB_ARGS=""
        # - POSTGRES_INITDB_WALDIR=""
        # - PGDATA="/var/lib/postgresql/data/"
        # These are psql client defaults
        - PGDATABASE=${PGDATABASE}
        - PGUSER=${PGUSER}
      #volumes:
        # runs *sql and executable *sh and sources non-executable *sh
        # - ./postgres/initdb:/docker-entrypoint-initdb.d:Z
        # mainly mounted for debugging
        #- ./hasura/migrations:/migrations:Z
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U $PGUSER"]
        interval: 10s
        timeout: 5s
        retries: 5
      ports: # exposed to docker host
        - "${PGPORT}:5432"
      # Expose ports without publishing them to the host machine
      # - they’ll only be accessible to linked services.
      expose: # exposed to other containers
        - "${PGPORT}"
      networks: # separate from web due to traefik routing on sharing.io
        - db
      labels:
        ingress.class: "traefik"
        kompose.controller.type: "deployment" # or daemonset or replicationcontroller
        # kompose.service.type: "loadbalancer" # nodeport / clusterip / loadbalancer / headless
        # kompose.service.expose: true
        # Maybe see if kompose can work with let's encrypt
        #- "kompose.service.expose.tls-secret="
        # kompose.volume.size: 1Gi
        # traefik.enable: "true"
        # traefik.basic.port: 8080
        # traefik.basic.protocol: "http"
        # traefik.basic.frontend.rule: "Host:${USER}-hasura.sharing.io"
    hasura:
      #image: hasura/graphql-engine:v1.0.0-beta.5
      #image: hasura/graphql-engine:v1.0.0-beta.5.cli-migrations
      image: "raiinbow/hasura:${TAG}"
      build: "./hasura"
      # build:
      #   dockerfile: hasura/Dockerfile
      #   context: .
      #   image: "raiinbow/hasura:${USER}"
      container_name: "${USER}-hasura"
      restart: always
      networks:
        - web
        - db
      environment:
        - HASURA_GRAPHQL_DATABASE_URL=postgres://${PGUSER}:${PGPASS}@postgres:5432/${PGDATABASE}
        - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      # volumes:
      #   - ./hasura/migrations:/hasura-migrations:Z
      depends_on:
        - postgres
      ports: # exposed to docker host
        - "${HASURA_PORT}:8080"
      expose:
        - "8080"
      labels:
        kompose.controller.type: "deployment" # or daemonset or replicationcontroller
        kompose.service.type: "headless" # necessary for traefik
        # kompose.service.type: "clusterip" # nodeport / clusterip / loadbalancer / headless
        # kompose.service.type: "loadbalancer" # nodeport / clusterip / loadbalancer / headless
        # kompose.service.type: "nodeport" # nodeport / clusterip / loadbalancer / headless
        kompose.service.expose: "${USER}-hasura.apisnoop.io" # true / hostname
        ingress.kubernetes.io/protocol: "http"
        kubernetes.io/ingress.class: "traefik"
        # Maybe see if kompose can work with let's encrypt
        #- "kompose.service.expose.tls-secret="
        # kompose.volume.size: 1Gi
        traefik.docker.network: "web"
        traefik.enable: "true"
        traefik.basic.port: 8080
        traefik.basic.protocol: "http"
        traefik.basic.frontend.rule: "Host:${USER}-hasura.sharing.io"
    # pgadmin:
    #   container_name: "${USER}-pgadmin"
    #   image: dpage/pgadmin4:4.12
    #   restart: always
    #   networks:
    #     - db
    #     - web
    #   environment:
    #     - PGADMIN_DEFAULT_EMAIL=apisnoop@cncf.io
    #     - PGADMIN_DEFAULT_PASSWORD=${PGPASS}
    #     # python setup.py --dump-servers /tmp/servers.json --user apisnoop@cncf.io
    #     - PGADMIN_SERVER_JSON_FILE=/apisnoop/servers.json
    #     - PGADMIN_CONFIG_APP_NAME=APISnoopQL
    #     - PGADMIN_CONFIG_APP_COPYRIGHT="Copyright (C) 2019, The Cloud Native Compute Foundation"
    #     - PGADMIN_CONFIG_LOGIN_BANNER="Welcome to APISnoopQL!"
    #     - PGADMIN_CONFIG_ALLOW_SAVE_PASSWORD=True
    #     - PGADMIN_CONFIG_MAX_QUERY_HIST_STORED=1234
    #     - PGADMIN_CONFIG_SESSION_COOKIE_NAME=apisnoop_session
    #     - PGADMIN_CONFIG_UPGRADE_CHECK_ENABLED=False
    #     - PGADMIN_CONFIG_SESSION_EXPIRATION_TIME=7
    #   volumes:
    #    - ./pgadmin:/apisnoop:Z
    #   ports: # exposed to docker host
    #     - "${PGADMIN_PORT}:80"
    #   expose:
    #     - "80"
    #   labels:
    #     - "traefik.docker.network=web"
    #     - "traefik.enable=true"
    #     - "traefik.basic.port=80"
    #     - "traefik.basic.protocol=http"
    #     - "traefik.basic.frontend.rule=Host:${USER}-pgadmin.sharing.io"
  #volumes:
  #  migrations:
  networks:
    web:
      external: true
    db:
#+END_SRC

** raiinbow.yaml
   
   #+begin_src yaml :tangle ../apps/raiinbow.yaml
     apiVersion: v1
     kind: List
     metadata: {}
     items:
     - apiVersion: v1
       kind: Service
       metadata:
         name: hasura
       spec:
         type: ClusterIP
         clusterIP: None
         selector:
           io.apisnoop.graphql: hasura
         ports:
         - name: "8080"
           port: 8080
           targetPort: 8080
     - apiVersion: v1
       kind: Service
       metadata:
         name: postgres
       spec:
         selector:
           io.apisnoop.db: postgres
         ports:
         - name: "5432"
           port: 5432
           targetPort: 5432
     - apiVersion: extensions/v1beta1
       kind: Deployment
       metadata:
         name: hasura
       spec:
         replicas: 1
         template:
           metadata:
             labels:
               io.apisnoop.graphql: hasura
           spec:
             restartPolicy: Always
             containers:
             - name: hasura
               image: "raiinbow/hasura:2019-11-01-13-09"
               ports:
               - containerPort: 8080
               env:
               - name: HASURA_GRAPHQL_DATABASE_URL
                 value: "postgres://apisnoop:s3cretsauc3@postgres:5432/apisnoop"
               - name: HASURA_GRAPHQL_ENABLE_CONSOLE
                 value: "true"
     - apiVersion: extensions/v1beta1
       kind: Deployment
       metadata:
         name: postgres
       spec:
         replicas: 1
         template:
           metadata:
             labels:
               io.apisnoop.db: postgres
           spec:
             restartPolicy: Always
             containers:
             - name: postgres
               image: "raiinbow/postgres:2019-11-01-13-09"
               ports:
               - containerPort: 5432
               livenessProbe:
                 exec:
                   command:
                   - "pg_isready"
                   - "-U"
                   - "apisnoop"
                 failureThreshold: 5
                 periodSeconds: 10
                 timeoutSeconds: 5
               env:
               - name: POSTGRES_DB
                 value: apisnoop
               - name: POSTGRES_USER
                 value: apisnoop
               - name: POSTGRES_PASSWORD
                 value: s3cretsauc3
               - name: PGDATABASE
                 value: apisnoop
               - name: PGUSER
                 value: apisnoop

   #+end_src
   
   To build up our rainbow.yaml again, we can run:
   #+NAME: update and push rainbow images based on docker-compose.yml
   #+begin_src shell :dir ../apps
     . .loadenv
     kompose convert   --build local   --volumes emptyDir -o /dev/null 2>&1 | grep Pushing
     :
   #+end_src

   #+RESULTS: update and push rainbow images based on docker-compose.yml
   #+begin_EXAMPLE
   [36mINFO[0m Pushing image 'raiinbow/hasura:2019-11-01-13-09' to registry 'docker.io' 
   [36mINFO[0m Pushing image 'raiinbow/postgres:2019-11-01-13-09' to registry 'docker.io' 
   #+end_EXAMPLE

   
* Footnotes
** Local Variables

Force this instance of emacs to use the apisnoop server-name.
This allows us to tangle from the emacsclient cli.

# Local Variables:
# eval: (setq server-name "apisnoop")
# eval: (server-force-delete)
# eval: (server-start)
# End:
 
 
 

** Questions
   apisnoop socket not found, had to manually tangle the file.  What changed?
