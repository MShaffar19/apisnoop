#+TITLE: APISnoop Update for 19 August 2019
#+SETUPFILE: ../org-templates/level-0.org
#+AUTHOR: ii team
#+DATE: 2019-08-19
#+PROPERTY: header-args :exports both :eval never-export

* Summary  
The APISnoop team are working to increase how much one can know about field usage and coverage in Kubernetes.  Our initial question was “What is the state of testing coverage for every field related to PodSpec?” This question required us to first isloate the fields releated to Podspec, and in which configuration, then how to correlate the fields with audit log events.

  This work will help answer larger questions, "what is the testing coverage for every field?“, or, "For any arbitrary kind, what fields relate to it and what are their coverage?”
  
  We are working within a new infrastructure for APISnoop, where we load audit events and swaggers directly into a Postgres database, and then build out our queries from this raw data.  This allows us to query the data from multiple sources, including this report: all tables listed below are coming directly from our server, by running queries dynamically as we type this report.
  
* PodSpec Field Coverage
  
 Initially we explored podspec coverage by giving a report on each field related to podspec and its relative hits, test hits, and conformance test hits.  We did this by manually walking the podspec tree to get all relevant fields, then building out a custom view.
 
#+NAME: PodSpec Field Coverage
#+BEGIN_SRC sql-mode :exports both :eval never-export :results value raw drawer
select * from podspec_field_summary;
#+END_SRC

#+CAPTION: PodSpec Field Coverage
  |         podspec_field         | other_hits | e2e_hits | conf_hits|  
  |-------------------------------+------------+----------+----------|
  | ephemeralContainers           |          0 |        0 |         0|
  | overhead                      |          0 |        0 |         0|
  | preemptionPolicy              |          0 |        0 |         0|
  | shareProcessNamespace         |          0 |        0 |         0|
  | topologySpreadConstraints     |          0 |        0 |         0|
  | readinessGates                |          0 |        8 |         0|
  | dnsConfig                     |          0 |       16 |         0|
  | hostIPC                       |          0 |       16 |         0|
  | hostPID                       |          0 |       16 |         0|
  | priorityClassName             |       3731 |       32 |         0|
  | runtimeClassName              |          0 |       36 |         0|
  | affinity                      |       1213 |       43 |         0|
  | hostAliases                   |          0 |        0 |         8|
  | imagePullSecrets              |          0 |        0 |         8|
  | activeDeadlineSeconds         |         18 |        8 |        14|
  | initContainers                |          0 |     1315 |        32|
  | hostNetwork                   |       2687 |     1574 |        41|
  | automountServiceAccountToken  |          0 |       36 |        60|
  | subdomain                     |       5253 |       85 |        60|
  | hostname                      |       5469 |       85 |        60|
  | priority                      |        900 |       83 |       105|
  | tolerations                   |       4820 |       83 |       105|
  | nodeName                      |       8379 |     4170 |       127|
  | nodeSelector                  |       3260 |      257 |       128|
  | serviceAccount                |      12025 |     1199 |       201|
  | serviceAccountName            |      12025 |     1199 |       201|
  | volumes                       |      15598 |     6903 |       876|
  | enableServiceLinks            |      12097 |     6506 |      1741|
  | containers                    |      27717 |    13194 |      2063|
  | dnsPolicy                     |      27717 |    13194 |      2063|
  | restartPolicy                 |      27717 |    13194 |      2063|
  | schedulerName                 |      27717 |    13194 |      2063|
  | securityContext               |      27717 |    13194 |      2063|
  | terminationGracePeriodSeconds |      27717 |    13194 |      2063|

This was a useful summary, but immediately begged new questions: what's the coverage for all the fields within something like containers?  Can we make this more granular, and walk through each field and subfield to see the respective coverage?

To answer these questions, we'd need to make a generalized query that walked the path of any kind, noting every field and sub-field and the path to each.
* Recursive Querying of Kubernetes Schemas
  We achieved this using a recursive view that starts from a swagger.json defition of a kind, then walks through each of its fields, finding any that reference their own schema and then branching out to walk down each of these paths.  
  
  This allows us to now see every field within the swagger.json, the kind it relates to, and any sub-kinds that come from it.  
  This clarity into kinds will help in multiple ways.  By connecting this work to our audit logs, we can start to see coverage field by field, based on any spec or kind we wished.  We can then see exactly which areas are untested, their importance as related to our kind definitions, and a strategoy for writing tests with better focus and priority.

  To better illustrate this, we can look at some sample queries.
* Sample Queries
** A listing of fields related to Podspec
    We can walk up or down a tree for any arbitrary kind, like podspec. 
    
    We can start at the PodSpec kind and see the fields within.
 #+NAME: Left PodSpec
  #+BEGIN_SRC sql-mode :exports both :eval never-export
   select * from kind_field_path
   where field_kind not like 'io%' -- only look at int and string
   and kind like '%PodSpec'
   and field_path like '%.%'
   limit 20;
 #+END_SRC

 #+CAPTION: Fields Within PodSpec
 | kind                       | field_path                            | field_kind | field_type | sub_kind                     |
 |----------------------------+---------------------------------------+------------+------------+------------------------------|
 | io.k8s.api.core.v1.PodSpec | containers.command                    | string     | array      | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | containers.terminationMessagePath     | string     | string     | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | containers.tty                        | integer    | boolean    | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | containers.args                       | string     | array      | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | containers.image                      | string     | string     | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | containers.stdinOnce                  | integer    | boolean    | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | containers.name                       | string     | string     | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | containers.workingDir                 | string     | string     | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | containers.imagePullPolicy            | string     | string     | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | containers.terminationMessagePolicy   | string     | string     | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | containers.stdin                      | integer    | boolean    | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | initContainers.command                | string     | array      | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | initContainers.terminationMessagePath | string     | string     | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | initContainers.tty                    | integer    | boolean    | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | initContainers.args                   | string     | array      | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | initContainers.image                  | string     | string     | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | initContainers.stdinOnce              | integer    | boolean    | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | initContainers.name                   | string     | string     | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | initContainers.workingDir             | string     | string     | io.k8s.api.core.v1.Container |
 | io.k8s.api.core.v1.PodSpec | initContainers.imagePullPolicy        | string     | string     | io.k8s.api.core.v1.Container |
  
  Or we can go in the other direction, and see a sampling of fields that contain podspec.
  
 #+NAME: Right PodSpec
 #+BEGIN_SRC sql-mode :exports both :eval never-export
 select * from kind_field_path
 where field_kind not like 'io%' -- only look at int and string
 and sub_kind like '%PodSpec'
 and field_path like '%.%'
 limit 20;
 #+END_SRC

 #+CAPTION: Fields that Contain Podspec
 | kind                               | field_path                 | field_kind | field_type | sub_kind                   |
 |------------------------------------+----------------------------+------------+------------+----------------------------|
 | io.k8s.api.core.v1.PodTemplateSpec | spec.hostPID               | integer    | boolean    | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.hostIPC               | integer    | boolean    | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.hostname              | string     | string     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.nodeName              | string     | string     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.overhead              | integer    | object     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.priority              | integer    | integer    | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.dnsPolicy             | string     | string     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.subdomain             | string     | string     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.hostNetwork           | integer    | boolean    | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.nodeSelector          | integer    | object     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.restartPolicy         | string     | string     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.schedulerName         | string     | string     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.serviceAccount        | string     | string     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.preemptionPolicy      | string     | string     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.runtimeClassName      | string     | string     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.priorityClassName     | string     | string     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.enableServiceLinks    | integer    | boolean    | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.serviceAccountName    | string     | string     | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.activeDeadlineSeconds | integer    | integer    | io.k8s.api.core.v1.PodSpec |
 | io.k8s.api.core.v1.PodTemplateSpec | spec.shareProcessNamespace | integer    | boolean    | io.k8s.api.core.v1.PodSpec |

** A sampling of  subresources for Container
   
   Our initial summary made us curious to see all the sub-resources for any of the fields of podspec.  Here is a sampling for container.
   
  #+NAME: Sub-Resources for Container
 #+BEGIN_SRC sql-mode :exports both :eval never-export
  select * from kind_field_path
  where field_kind not like 'io%' -- only look at int and string
  and kind like '%v1.Container'
  and field_path like '%.%'
  limit 20;
  #+END_SRC

  #+Caption: Sub-resources for the kind Container
 | kind                         | field_path                          | field_kind   | field_type   | sub_kind                                  |
 |--------------------------- - + ----------------------------------- + ------------ + ------------ + ----------------------------------------- +
 | io.k8s.api.core.v1.Container | ports.name                          | string       | string       | io.k8s.api.core.v1.ContainerPort          |
 | io.k8s.api.core.v1.Container | ports.hostIP                        | string       | string       | io.k8s.api.core.v1.ContainerPort          |
 | io.k8s.api.core.v1.Container | ports.hostPort                      | integer      | integer      | io.k8s.api.core.v1.ContainerPort          |
 | io.k8s.api.core.v1.Container | ports.protocol                      | string       | string       | io.k8s.api.core.v1.ContainerPort          |
 | io.k8s.api.core.v1.Container | ports.containerPort                 | integer      | integer      | io.k8s.api.core.v1.ContainerPort          |
 | io.k8s.api.core.v1.Container | envFrom.prefix                      | string       | string       | io.k8s.api.core.v1.EnvFromSource          |
 | io.k8s.api.core.v1.Container | env.value                           | string       | string       | io.k8s.api.core.v1.EnvVar                 |
 | io.k8s.api.core.v1.Container | env.name                            | string       | string       | io.k8s.api.core.v1.EnvVar                 |
 | io.k8s.api.core.v1.Container | readinessProbe.successThreshold     | integer      | integer      | io.k8s.api.core.v1.Probe                  |
 | io.k8s.api.core.v1.Container | readinessProbe.periodSeconds        | integer      | integer      | io.k8s.api.core.v1.Probe                  |
 | io.k8s.api.core.v1.Container | readinessProbe.initialDelaySeconds  | integer      | integer      | io.k8s.api.core.v1.Probe                  |
 | io.k8s.api.core.v1.Container | readinessProbe.timeoutSeconds       | integer      | integer      | io.k8s.api.core.v1.Probe                  |
 | io.k8s.api.core.v1.Container | readinessProbe.failureThreshold     | integer      | integer      | io.k8s.api.core.v1.Probe                  |
 | io.k8s.api.core.v1.Container | livenessProbe.successThreshold      | integer      | integer      | io.k8s.api.core.v1.Probe                  |
 | io.k8s.api.core.v1.Container | livenessProbe.periodSeconds         | integer      | integer      | io.k8s.api.core.v1.Probe                  |
 | io.k8s.api.core.v1.Container | livenessProbe.initialDelaySeconds   | integer      | integer      | io.k8s.api.core.v1.Probe                  |
 | io.k8s.api.core.v1.Container | livenessProbe.timeoutSeconds        | integer      | integer      | io.k8s.api.core.v1.Probe                  |
 | io.k8s.api.core.v1.Container | livenessProbe.failureThreshold      | integer      | integer      | io.k8s.api.core.v1.Probe                  |
 | io.k8s.api.core.v1.Container | resources.limits                    | integer      | object       | io.k8s.api.core.v1.ResourceRequirements   |
 | io.k8s.api.core.v1.Container | resources.requests                  | integer      | object       | io.k8s.api.core.v1.ResourceRequirements   |

** PodSec - Completely Untested Fields 
This led us to identifying the following completely untested fields:

#+CAPTION: Completely Untested Fields in PodSpec
| podspec_field             | other | e2e_hit | conf_hit /  note |         |
|---------------------------+-------+---------+------------------+---------|
| ephemeralContainers       |     0 |       0 |                0 | include |
| topologySpreadConstraints |     0 |       0 |                0 | include |
| overhead                  |     0 |       0 |                0 | alpha   |
| preemptionPolicy          |     0 |       0 |                0 | alpha   |
| shareProcessNamespace     |     0 |       0 |                0 | beta    |


It was noted that some of these fields were alpha/beta, deprecated or hidden behind FeatureGates according to the description in the documentation, so we created new columns for easy of identification.


#+CAPTION: Field Path with Extended Columns
| field_path            | field_kind | release | deprecated | gated |
|-----------------------+------------+---------+------------+-------|
| overhead              | integer    | alpha   | f          | t     |
| preemptionPolicy      | string     | alpha   | f          | t     |
| shareProcessNamespace | integer    | beta    | f          | f     |
| runtimeClassName      | string     | beta    | f          | f     |
| serviceAccount        | string     | ga      | t          | f     |

* Recommended Actions and Next Steps
  As we built out these views, we were able to notice areas of improvement, which led us to make the following recommendations.
** Update Conformance Tests that use “serviceAccount” 
   =serviceAccount= is deprecated, yet we hit it nearly 200 times during our conformance testing.

#+CAPTION: Number of Hits on deprecated serviceAccount
| podspec_field  | other_hits | e2e_hits | conf_hits |
|----------------+------------+----------+-----------|
| serviceAccount |      12025 |     1199 |       201 |

We should update these tests to use =serviceAccountName= instead.

** Prioritize writing tests for untested, GA Podspec Fields

=emphemeralContainers= and =topologySpreadConstraints= are the only GA, ungated PodSpec fields that are completely untested.

#+CAPTION: Number of Hits on GA, Ungated Podspec Fields
| podspec_field             | other_hits | e2e_hits | conf_hits |
|---------------------------+------------+----------+-----------|
| ephemeralContainers       |          0 |        0 |         0 |
| topologySpreadConstraints |          0 |        0 |         0 |
| readinessGates            |          0 |        8 |         0 |
| priorityClassName         |       3731 |       32 |         0 |
| hostIPC                   |          0 |       16 |         0 |
| hostPID                   |          0 |       16 |         0 |

We suggest we prioritize writing conformance tests for those two first, then the reamining four fields that don't have a recognizable test.

** Promote Tests

There are three podSpec fields not hit by any conformance tests.

#+CAPTION: Podspec Fields not hit by conformance tests
| podspec_field    | other_hits | e2e_hits | conf_hits |
|------------------+------------+----------+-----------|
| affinity         |       1213 |       43 |         0 |
| dnsConfig        |          0 |       16 |         0 |
| runtimeClassName |          0 |       36 |         0 |

However, these fields _are_ directly hit by other tests.

#+CAPTION: Tests that Hit non-conformance-tested Podspec Fields
| podspec_field    | test                                                                                                  |
|------------------+-------------------------------------------------------------------------------------------------------|
| affinity         | [k8s.io] [sig-node] AppArmor load AppArmor profiles can disable an AppArmor profile, using unconfined |
| affinity         | [k8s.io] [sig-node] AppArmor load AppArmor profiles should enforce an AppArmor profile                |
| dnsConfig        | [sig-network] DNS should support configurable pod DNS nameservers                                     |
| dnsConfig        | [sig-network] DNS should support configurable pod resolv.conf                                         |
| runtimeClassName | [sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass                         |
| runtimeClassName | [sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass                    |
| runtimeClassName | [sig-node] RuntimeClass should reject a Pod requesting a RuntimeClass with an unconfigured handler    |

We recommend looking into and preparing these tests for promotion. 

