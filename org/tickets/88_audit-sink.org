#+TITLE: 88: Audit Sink Extended work
#+TODO: TODO IN-PROGRESS BLOCKED | TADA

* Purpose
This is a continuation of ticket 88, which has already been mostly done through caleb's work.  The ticket is focused on listening to when new events are added to our live_audit_events db and then running queries on how coverage ahs changed.  These queries require an operation_id to be added to the event table, which is not included in the event data.  So this file is focused on the work to get that id added and setup some good queries.

* Process
** TODO change audit_sink to insert into live_audit_event db instead
   This is so it's easier to delete everything from a db on runs, then if everything was going into our raw audit events.
   this also sets it up nicely for when we wanna do a full e2e coverage diff report, where the result of that will go into our raw audit events.
   So we will need to first make the table and then the view.
** TODO create trigger for when new event added into live_audit_event
** TODO setup trigger to grab our open api spec and find op_id based on it.
   pseudocode trigger
   #+begin_example python
postgres create function find_operation_id(specurl text, event json)
  if SD['spec'][url] doesn't exist then
    SD[\'spec\'][url] = load_open+api_spec(url)
   find_op_id(SD[\'spec][url], event)a


  TRIGGER
  ^^^
  define function for load open_apispec
  <<load_open_apisspec>>
  <<find_operation_id>>
  whenr TD["event"] == INSERT
  GD["spec"]|=load_open_apispec(http://apiserver/api/v2)
  TD["NEW"]["operationId"]=find_operation_id(GD["SPEC"],TD["OLD"]["data"])
   
   #+end_example
** TODO setup a coverage report specifically for the live audit_events.
** TODO Verify everything works.
