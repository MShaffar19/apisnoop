[
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "createCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "createEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "createNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "createNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "deleteCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "deleteCertificatesV1CollectionCertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            }
        ],
        "endpoint": "deleteEventsV1CollectionNamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "deleteEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "deleteNetworkingV1CollectionIngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "deleteNetworkingV1CollectionNamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "deleteNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "deleteNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "getCertificatesV1APIResources",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "getEventsV1APIResources",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "listCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "listEventsV1EventForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "listEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "listNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "listNetworkingV1IngressForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "listNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "patchCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "patchCertificatesV1CertificateSigningRequestApproval",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "patchCertificatesV1CertificateSigningRequestStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "patchEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "patchNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "patchNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "patchNetworkingV1NamespacedIngressStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "readCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "readCertificatesV1CertificateSigningRequestApproval",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "readCertificatesV1CertificateSigningRequestStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "readEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "readNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "readNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "readNetworkingV1NamespacedIngressStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "replaceCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "replaceCertificatesV1CertificateSigningRequestApproval",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "replaceCertificatesV1CertificateSigningRequestStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "replaceEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "replaceNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "replaceNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "replaceNetworkingV1NamespacedIngressStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            }
        ],
        "endpoint": "createAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            }
        ],
        "endpoint": "createAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            }
        ],
        "endpoint": "createApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            }
        ],
        "endpoint": "deleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            }
        ],
        "endpoint": "deleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            }
        ],
        "endpoint": "deleteAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            }
        ],
        "endpoint": "deleteAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, list"
            }
        ],
        "endpoint": "deleteApiextensionsV1CollectionCustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            }
        ],
        "endpoint": "deleteApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            }
        ],
        "endpoint": "getAdmissionregistrationV1APIResources",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            }
        ],
        "endpoint": "getApiextensionsV1APIResources",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getDiscoveryAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            }
        ],
        "endpoint": "listAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            }
        ],
        "endpoint": "listAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, list"
            }
        ],
        "endpoint": "listApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            }
        ],
        "endpoint": "patchAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            }
        ],
        "endpoint": "patchAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            }
        ],
        "endpoint": "patchApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            }
        ],
        "endpoint": "patchApiextensionsV1CustomResourceDefinitionStatus",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            }
        ],
        "endpoint": "readAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            }
        ],
        "endpoint": "readAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, list"
            }
        ],
        "endpoint": "readApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            }
        ],
        "endpoint": "readApiextensionsV1CustomResourceDefinitionStatus",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            }
        ],
        "endpoint": "replaceAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            }
        ],
        "endpoint": "replaceAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            }
        ],
        "endpoint": "replaceApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            }
        ],
        "endpoint": "replaceApiextensionsV1CustomResourceDefinitionStatus",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            }
        ],
        "endpoint": "createCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "createSchedulingV1PriorityClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            }
        ],
        "endpoint": "deleteCoordinationV1CollectionNamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            }
        ],
        "endpoint": "deleteCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "deleteSchedulingV1CollectionPriorityClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "deleteSchedulingV1PriorityClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "getCoordinationV1APIResources",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getNodeAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "getSchedulingV1APIResources",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            }
        ],
        "endpoint": "listCoordinationV1LeaseForAllNamespaces",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            }
        ],
        "endpoint": "listCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "listSchedulingV1PriorityClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            }
        ],
        "endpoint": "patchCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "patchSchedulingV1PriorityClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            }
        ],
        "endpoint": "readCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "readSchedulingV1PriorityClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            }
        ],
        "endpoint": "replaceCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "replaceSchedulingV1PriorityClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getCoordinationAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.12.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "createApiregistrationV1APIService",
        "tested_release": "1.17.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "deleteApiregistrationV1APIService",
        "tested_release": "1.17.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "getApiregistrationV1APIResources",
        "tested_release": "1.17.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "readApiregistrationV1APIService",
        "tested_release": "1.17.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            }
        ],
        "endpoint": "createAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            }
        ],
        "endpoint": "createAppsV1NamespacedDeployment",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            }
        ],
        "endpoint": "createAppsV1NamespacedReplicaSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            }
        ],
        "endpoint": "createAppsV1NamespacedStatefulSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            }
        ],
        "endpoint": "deleteAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            }
        ],
        "endpoint": "deleteAppsV1NamespacedDeployment",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            }
        ],
        "endpoint": "deleteAppsV1NamespacedReplicaSet",
        "tested_release": "1.16.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            }
        ],
        "endpoint": "deleteAppsV1NamespacedStatefulSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "getAppsV1APIResources",
        "tested_release": "1.17.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getEventsAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            }
        ],
        "endpoint": "listAppsV1NamespacedControllerRevision",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            }
        ],
        "endpoint": "listAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            }
        ],
        "endpoint": "listAppsV1NamespacedDeployment",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            }
        ],
        "endpoint": "listAppsV1NamespacedReplicaSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            }
        ],
        "endpoint": "listAppsV1NamespacedStatefulSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            }
        ],
        "endpoint": "patchAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            }
        ],
        "endpoint": "readAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            }
        ],
        "endpoint": "readAppsV1NamespacedDeployment",
        "tested_release": "1.12.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            }
        ],
        "endpoint": "readAppsV1NamespacedReplicaSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            }
        ],
        "endpoint": "readAppsV1NamespacedStatefulSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            }
        ],
        "endpoint": "readAppsV1NamespacedStatefulSetScale",
        "tested_release": "1.16.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            }
        ],
        "endpoint": "replaceAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            }
        ],
        "endpoint": "replaceAppsV1NamespacedDeployment",
        "tested_release": "1.12.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            }
        ],
        "endpoint": "replaceAppsV1NamespacedStatefulSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            }
        ],
        "endpoint": "replaceAppsV1NamespacedStatefulSetScale",
        "tested_release": "1.16.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "createRbacAuthorizationV1ClusterRole",
        "tested_release": "1.17.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "createRbacAuthorizationV1ClusterRoleBinding",
        "tested_release": "1.17.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "Event resource lifecycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.18.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Docker containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]",
                "testname": "Kubectl, diff Deployment"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions  [Conformance]",
                "testname": "Kubectl, check version v1"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info  [Conformance]",
                "testname": "Kubectl, cluster info"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl logs should be able to retrieve and filter logs  [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance]",
                "testname": "Kubectl, version"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [LinuxOnly] [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster  [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service  [Conformance]",
                "testname": "Kubernetes Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high  [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/events.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]",
                "testname": "Pod events, verify event from Scheduler and Kubelet"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "createRbacAuthorizationV1NamespacedRoleBinding",
        "tested_release": "1.9.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "deleteRbacAuthorizationV1ClusterRole",
        "tested_release": "1.17.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "deleteRbacAuthorizationV1ClusterRoleBinding",
        "tested_release": "1.17.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            }
        ],
        "endpoint": "deleteRbacAuthorizationV1NamespacedRoleBinding",
        "tested_release": "1.16.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getApiextensionsAPIGroup",
        "tested_release": "1.16.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "getRbacAuthorizationV1APIResources",
        "tested_release": "1.17.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getSchedulingAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]",
                "testname": "Kubectl, patch to annotate"
            }
        ],
        "endpoint": "listRbacAuthorizationV1ClusterRole",
        "tested_release": "1.9.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedReplicationControllerScale",
        "tested_release": "1.20.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            }
        ],
        "endpoint": "getAdmissionregistrationAPIGroup",
        "tested_release": "1.16.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getApiregistrationAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "getNetworkingAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "getNetworkingV1APIResources",
        "tested_release": "1.17.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            }
        ],
        "endpoint": "createAuthenticationV1TokenReview",
        "tested_release": "1.9.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            }
        ],
        "endpoint": "createAuthorizationV1SelfSubjectAccessReview",
        "tested_release": "1.16.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "Event resource lifecycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.18.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Docker containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]",
                "testname": "Kubectl, diff Deployment"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions  [Conformance]",
                "testname": "Kubectl, check version v1"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info  [Conformance]",
                "testname": "Kubectl, cluster info"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl logs should be able to retrieve and filter logs  [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance]",
                "testname": "Kubectl, version"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [LinuxOnly] [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster  [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service  [Conformance]",
                "testname": "Kubernetes Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high  [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/events.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]",
                "testname": "Pod events, verify event from Scheduler and Kubelet"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "createAuthorizationV1SubjectAccessReview",
        "tested_release": "1.9.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "getAuthenticationV1APIResources",
        "tested_release": "1.17.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "getAuthorizationV1APIResources",
        "tested_release": "1.17.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            }
        ],
        "endpoint": "connectCoreV1GetNamespacedPodExec",
        "tested_release": "1.13.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [LinuxOnly] [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster  [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]",
                "testname": "Pods, prestop hook"
            }
        ],
        "endpoint": "connectCoreV1GetNamespacedPodProxyWithPath",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            }
        ],
        "endpoint": "connectCoreV1GetNamespacedServiceProxyWithPath",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should succeed in writing subpaths in container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            }
        ],
        "endpoint": "connectCoreV1PostNamespacedPodExec",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            }
        ],
        "endpoint": "createBatchV1NamespacedJob",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "Event resource lifecycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.18.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Docker containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with absolute path [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with backticks [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should succeed in writing subpaths in container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]",
                "testname": "Kubectl, diff Deployment"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions  [Conformance]",
                "testname": "Kubectl, check version v1"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info  [Conformance]",
                "testname": "Kubectl, cluster info"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl logs should be able to retrieve and filter logs  [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance]",
                "testname": "Kubectl, version"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [LinuxOnly] [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster  [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service  [Conformance]",
                "testname": "Kubernetes Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high  [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/events.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]",
                "testname": "Pod events, verify event from Scheduler and Kubelet"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "createCoreV1Namespace",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "createCoreV1NamespacedConfigMap",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            }
        ],
        "endpoint": "createCoreV1NamespacedEndpoints",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "Event resource lifecycle"
            }
        ],
        "endpoint": "createCoreV1NamespacedEvent",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            }
        ],
        "endpoint": "createCoreV1NamespacedLimitRange",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.18.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Docker containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with absolute path [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with backticks [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should succeed in writing subpaths in container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [LinuxOnly] [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster  [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/node/events.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]",
                "testname": "Pod events, verify event from Scheduler and Kubelet"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "createCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            }
        ],
        "endpoint": "createCoreV1NamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high  [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            }
        ],
        "endpoint": "createCoreV1NamespacedReplicationController",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            }
        ],
        "endpoint": "createCoreV1NamespacedResourceQuota",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "createCoreV1NamespacedSecret",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high  [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            }
        ],
        "endpoint": "createCoreV1NamespacedService",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            }
        ],
        "endpoint": "createCoreV1NamespacedServiceAccount",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            }
        ],
        "endpoint": "deleteBatchV1NamespacedJob",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            }
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedConfigMap",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            }
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedEndpoints",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            }
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedEvent",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            }
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedPod",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            }
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            }
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedReplicationController",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            }
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedSecret",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            }
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedServiceAccount",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "Event resource lifecycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.18.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Docker containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with absolute path [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with backticks [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should succeed in writing subpaths in container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]",
                "testname": "Kubectl, diff Deployment"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions  [Conformance]",
                "testname": "Kubectl, check version v1"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info  [Conformance]",
                "testname": "Kubectl, cluster info"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl logs should be able to retrieve and filter logs  [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance]",
                "testname": "Kubectl, version"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [LinuxOnly] [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster  [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service  [Conformance]",
                "testname": "Kubernetes Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high  [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/events.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]",
                "testname": "Pod events, verify event from Scheduler and Kubelet"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "deleteCoreV1Namespace",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedConfigMap",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "Event resource lifecycle"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedEvent",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedLimitRange",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.18.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with absolute path [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with backticks [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should succeed in writing subpaths in container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [LinuxOnly] [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster  [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/node/events.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]",
                "testname": "Pod events, verify event from Scheduler and Kubelet"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "deleteCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedReplicationController",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedResourceQuota",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedSecret",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedService",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedServiceAccount",
        "tested_release": "1.17.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "getAPIVersions",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getAppsAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getAuthenticationAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getAuthorizationAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getAutoscalingAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "getAutoscalingV1APIResources",
        "tested_release": "1.17.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getBatchAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "getBatchV1APIResources",
        "tested_release": "1.17.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "getCertificatesAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            }
        ],
        "endpoint": "getCodeVersion",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "getCoreAPIVersions",
        "tested_release": "1.17.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "getCoreV1APIResources",
        "tested_release": "1.17.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getExtensionsAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getPolicyAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getRbacAuthorizationAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            }
        ],
        "endpoint": "listCoreV1ConfigMapForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            }
        ],
        "endpoint": "listCoreV1EndpointsForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "Event resource lifecycle"
            }
        ],
        "endpoint": "listCoreV1EventForAllNamespaces",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "listCoreV1Namespace",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            }
        ],
        "endpoint": "listCoreV1NamespacedConfigMap",
        "tested_release": "1.11.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high  [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            }
        ],
        "endpoint": "listCoreV1NamespacedEndpoints",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/node/events.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]",
                "testname": "Pod events, verify event from Scheduler and Kubelet"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]",
                "testname": "Scheduler, node selector not matching"
            }
        ],
        "endpoint": "listCoreV1NamespacedEvent",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            }
        ],
        "endpoint": "listCoreV1NamespacedLimitRange",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high  [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/events.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]",
                "testname": "Pod events, verify event from Scheduler and Kubelet"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "listCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            }
        ],
        "endpoint": "listCoreV1NamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            }
        ],
        "endpoint": "listCoreV1NamespacedReplicationController",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            }
        ],
        "endpoint": "listCoreV1NamespacedResourceQuota",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            }
        ],
        "endpoint": "listCoreV1NamespacedSecret",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "Event resource lifecycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.18.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Docker containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with absolute path [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with backticks [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should succeed in writing subpaths in container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]",
                "testname": "Kubectl, diff Deployment"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions  [Conformance]",
                "testname": "Kubectl, check version v1"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info  [Conformance]",
                "testname": "Kubectl, cluster info"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl logs should be able to retrieve and filter logs  [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance]",
                "testname": "Kubectl, version"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [LinuxOnly] [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster  [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service  [Conformance]",
                "testname": "Kubernetes Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high  [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/events.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]",
                "testname": "Pod events, verify event from Scheduler and Kubelet"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "listCoreV1NamespacedServiceAccount",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "Event resource lifecycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.16.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.18.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Docker containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with absolute path [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with backticks [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should succeed in writing subpaths in container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/init_container.go",
                "release": "1.12.0",
                "codename": "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/lease.go",
                "release": "1.17.0",
                "codename": "[k8s.io] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]",
                "testname": "Kubectl, diff Deployment"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions  [Conformance]",
                "testname": "Kubectl, check version v1"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info  [Conformance]",
                "testname": "Kubectl, cluster info"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl logs should be able to retrieve and filter logs  [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance]",
                "testname": "Kubectl, version"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [LinuxOnly] [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster  [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service  [Conformance]",
                "testname": "Kubernetes Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high  [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/events.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]",
                "testname": "Pod events, verify event from Scheduler and Kubelet"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "listCoreV1Node",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "listCoreV1PodForAllNamespaces",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            }
        ],
        "endpoint": "listCoreV1PodTemplateForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            }
        ],
        "endpoint": "listCoreV1ReplicationControllerForAllNamespaces",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            }
        ],
        "endpoint": "listCoreV1SecretForAllNamespaces",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            }
        ],
        "endpoint": "listCoreV1ServiceAccountForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            }
        ],
        "endpoint": "listCoreV1ServiceForAllNamespaces",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            }
        ],
        "endpoint": "patchCoreV1Namespace",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedConfigMap",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedEndpoints",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "Event resource lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedEvent",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            }
        ],
        "endpoint": "patchCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedReplicationController",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedReplicationControllerStatus",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            }
        ],
        "endpoint": "patchCoreV1NamespacedSecret",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            }
        ],
        "endpoint": "patchCoreV1NamespacedServiceAccount",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            }
        ],
        "endpoint": "patchCoreV1Node",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "patchCoreV1NodeStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            }
        ],
        "endpoint": "readBatchV1NamespacedJob",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            }
        ],
        "endpoint": "readCoreV1Namespace",
        "tested_release": "1.10.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            }
        ],
        "endpoint": "readCoreV1NamespacedConfigMap",
        "tested_release": "1.11.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            }
        ],
        "endpoint": "readCoreV1NamespacedEndpoints",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/events.go",
                "release": "1.20.0",
                "codename": "[sig-api-machinery] Events should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "Event resource lifecycle"
            }
        ],
        "endpoint": "readCoreV1NamespacedEvent",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            }
        ],
        "endpoint": "readCoreV1NamespacedLimitRange",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.18.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/container_probe.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Docker containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with absolute path [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with backticks [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should succeed in writing subpaths in container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/runtime.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl logs should be able to retrieve and filter logs  [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [LinuxOnly] [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [LinuxOnly] [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services  [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster  [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods  [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods  [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/node/events.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]",
                "testname": "Pod events, verify event from Scheduler and Kubelet"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "readCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]",
                "testname": "Docker containers, with command"
            },
            {
                "file": "test/e2e/common/docker_containers.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Docker containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/downward_api.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/kubelet.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.13.0",
                "codename": "[k8s.io] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/security_context.go",
                "release": "1.15.0",
                "codename": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [LinuxOnly] [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            }
        ],
        "endpoint": "readCoreV1NamespacedPodLog",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            }
        ],
        "endpoint": "readCoreV1NamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]",
                "testname": "Proxy, logs service endpoint"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            }
        ],
        "endpoint": "readCoreV1NamespacedReplicationController",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            }
        ],
        "endpoint": "readCoreV1NamespacedReplicationControllerStatus",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            }
        ],
        "endpoint": "readCoreV1NamespacedResourceQuota",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            }
        ],
        "endpoint": "readCoreV1NamespacedSecret",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity timeout work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP with timeout"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service  [Conformance]",
                "testname": "Kubernetes Service"
            }
        ],
        "endpoint": "readCoreV1NamespacedService",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            }
        ],
        "endpoint": "readCoreV1NamespacedServiceAccount",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[k8s.io] [sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            }
        ],
        "endpoint": "readCoreV1Node",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            }
        ],
        "endpoint": "replaceCoreV1Namespace",
        "tested_release": "1.10.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedConfigMap",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedEndpoints",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedLimitRange",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should succeed in writing subpaths in container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/expansion.go",
                "release": "1.19.0",
                "codename": "[k8s.io] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [sig-storage][Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/pods.go",
                "release": "1.9.0",
                "codename": "[k8s.io] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedPodStatus",
        "tested_release": "1.10.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedReplicationController",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedReplicationControllerStatus",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedResourceQuota",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedSecret",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedService",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]",
                "testname": "Scheduler, node selector matching"
            }
        ],
        "endpoint": "replaceCoreV1Node",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    }
]
