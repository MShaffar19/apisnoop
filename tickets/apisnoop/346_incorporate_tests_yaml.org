#+TITLE: Incorporate tests.yaml

* Purpose
  My current thought is:

    use the new test/conformance/testdata/conformance.yaml to track when a test was added to conformance
    use the 1.9-1.18 release tags of swagger.json to map when the endpoints were added to stable
    use only master/current/latest release-blocking prow-job audit.log (to see what endpoints a given conformance test hits)
    not show any endpoints that are deprecated
    note endpoints that are currently considered very low priority OR not part of conformance as lighter color (or remove them completely)
    The coverage info for 1.9 bar is based on the endpoints those tests hit in the current/latest audit.log

Same for 1.10-1.18
* Strategy
- Import yaml as a sql table for postgres
- Build out view that shows when a test was added and the endpoints it hits.
- Build out view that shows endpoints per release, low-priority endpoints, new endpoints, new tests, and new coverage.
- share table of these findings
- design infographic for best display of this
- transpose data into sharable infographic
* Process
** Import yaml as a sql table for postgres
   We first need to turn yaml into json and then we can do a similar process to our load_swagger function, though this will be simpler as we are only wanting to load one file and we want whatever is latest on master.  In other words, we don't need to check for the right bucket and job.
*** Create table
    #+begin_src sql-mode
      CREATE TABLE tests_info(
        testname text,
        codename text,
        description text,
        release text,
        file text
      );
    #+end_src

    #+RESULTS:
    #+begin_src sql-mode
    CREATE TABLE
    #+end_src

*** Write the Sql Function   
   #+NAME: Import tests
   #+BEGIN_SRC sql-mode
     set role dba;
     DROP FUNCTION IF EXISTS load_tests;
     CREATE OR REPLACE FUNCTION load_tests()
     RETURNS text AS $$
     <<load_tests.py>>
     $$ LANGUAGE plpython3u ;
     reset role;
      #+END_SRC
*** Write the python for the sql function
   We can base it off fetch swagger, but simplified 
   #+TITLE: load_tests.py
   #+begin_src python :results output
     import yaml
     import json
     from urllib.request import urlopen, urlretrieve
     tests_url="https://raw.githubusercontent.com/kubernetes/kubernetes/master/test/conformance/testdata/conformance.yaml"

     tests = json.dumps(yaml.safe_load(urlopen(tests_url).read().decode('utf-8')))
   #+end_src

* Conclusion
