# -*- ii: apisnoop; -*-
#+TITLE: Incorporate tests.yaml

* Purpose
  My current thought is:

    use the new test/conformance/testdata/conformance.yaml to track when a test was added to conformance
    use the 1.9-1.18 release tags of swagger.json to map when the endpoints were added to stable
    use only master/current/latest release-blocking prow-job audit.log (to see what endpoints a given conformance test hits)
    not show any endpoints that are deprecated
    note endpoints that are currently considered very low priority OR not part of conformance as lighter color (or remove them completely)
    The coverage info for 1.9 bar is based on the endpoints those tests hit in the current/latest audit.log

Same for 1.10-1.18
* Strategy
- Import yaml as a sql table for postgres
- Build out view that shows when a test was added and the endpoints it hits.
- Build out view that shows endpoints per release, low-priority endpoints, new endpoints, new tests, and new coverage.
- share table of these findings
- design infographic for best display of this
- transpose data into sharable infographic
* Process
** Import yaml as a sql table for postgres
   We first need to turn yaml into json and then we can do a similar process to our load_swagger function, though this will be simpler as we are only wanting to load one file and we want whatever is latest on master.  In other words, we don't need to check for the right bucket and job.
*** Create table
    #+begin_src sql-mode
      CREATE TABLE test_info(
        testname text,
        codename text,
        release text,
        description text,
        file text
      );
    #+end_src

    #+RESULTS:
    #+begin_SRC example
    CREATE TABLE
    #+end_SRC

*** Write the Sql Function   
   #+NAME: Import tests
   #+BEGIN_SRC sql-mode
     set role dba;
     DROP FUNCTION IF EXISTS load_tests;
     CREATE OR REPLACE FUNCTION load_tests()
     RETURNS text AS $$
     from string import Template
     import json
     import yaml
     from urllib.request import urlopen, urlretrieve

     TESTS_URL = "https://raw.githubusercontent.com/kubernetes/kubernetes/master/test/conformance/testdata/conformance.yaml"
     tests = json.dumps(yaml.safe_load(urlopen(TESTS_URL)))
     sql = Template("""
                   WITH jsonb_array AS (
                   SELECT jsonb_array_elements('${tests}'::jsonb) as test_data)
                   INSERT INTO test_info(testname, codename, release, description, file)
                      SELECT
                      (test_data->>'testname') as testname,
                      (test_data->>'codename') as codename,
                      (test_data->>'release') as release,
                      (test_data->>'description') as description,
                      (test_data->>'file') as file
                      from jsonb_array;
                   """).substitute(tests = tests.replace("'","''"))
     plpy.execute(sql)
     $$ LANGUAGE plpython3u ;
     reset role;
      #+END_SRC

      #+RESULTS: Import tests
      #+begin_SRC example
      SET
      #+end_SRC

      
      #+begin_src sql-mode
      select * from load_tests();
      #+end_src

      #+RESULTS:
      #+begin_SRC example
       load_tests 
      ------------

      (1 row)

      #+end_SRC

#+begin_src sql-mode
select file, release from test_info limit 20;
#+end_src

#+RESULTS:
#+begin_SRC example
                 file                 | release 
--------------------------------------+---------
 test/e2e/common/lifecycle_hook.go    | v1.9
 test/e2e/common/lifecycle_hook.go    | v1.9
 test/e2e/common/lifecycle_hook.go    | v1.9
 test/e2e/common/lifecycle_hook.go    | v1.9
 test/e2e/common/runtime.go           | v1.15
 test/e2e/common/runtime.go           | v1.15
 test/e2e/common/runtime.go           | v1.15
 test/e2e/common/runtime.go           | v1.15
 test/e2e/common/runtime.go           | v1.13
 test/e2e/common/docker_containers.go | v1.9
 test/e2e/common/docker_containers.go | v1.9
 test/e2e/common/docker_containers.go | v1.9
 test/e2e/common/docker_containers.go | v1.9
 test/e2e/common/init_container.go    | v1.12
 test/e2e/common/init_container.go    | v1.12
 test/e2e/common/init_container.go    | v1.12
 test/e2e/common/init_container.go    | v1.12
 test/e2e/common/kubelet.go           | v1.13
 test/e2e/common/kubelet.go           | v1.13
 test/e2e/common/kubelet.go           | v1.13
(20 rows)

#+end_SRC
*** Create sample view to combine tests with endpoints
    the test_info codename matches our useragent test string, though the useragent teststring comes with a bit of extra padding (wich we should santizine in that view as a nice TODO)
   So we can easily combine the test, its release, and the endpoints it hits like so: 
#+begin_src sql-mode
  select 
    testname,
    release,
    array_length(operation_ids, 1) as endpoints_hit
  FROM test_info
  LEFT JOIN tests ON(TRIM(test) = codename)
  limit 10;
#+end_src   

#+RESULTS:
#+begin_SRC example
                                        testname                                         | release | endpoints_hit 
-----------------------------------------------------------------------------------------+---------+---------------
 Pod Lifecycle, post start exec hook                                                     | v1.9    |            14
 Pod Lifecycle, post start http hook                                                     | v1.9    |            11
 Pod Lifecycle, prestop exec hook                                                        | v1.9    |            11
 Pod Lifecycle, prestop http hook                                                        | v1.9    |            11
 Container Runtime, TerminationMessage, from log output of succeeding container          | v1.15   |             9
 Container Runtime, TerminationMessage, from file of succeeding container                | v1.15   |             9
 Container Runtime, TerminationMessage, from container's log output of failing container | v1.15   |             9
 Container Runtime, TerminationMessagePath, non-root user and non-default path           | v1.15   |             9
 Container Runtime, Restart Policy, Pod Phases                                           | v1.13   |            12
 Docker containers, with arguments                                                       | v1.9    |            16
(10 rows)

#+end_SRC
   
** Import swaggers for releases 1.9 through 1.18
   We need to get the commit for each tagged release and then load the swagger from that commit
** Build view of conformance endpoints and their release date
** Build view of stable endoints, release date, first tested date, and first tested by
** Build view of release, stable endpoint count, stable conformance tested count, new tests count
* Conclusion

# Local Variables:
# ii: enabled
# End:

* scratch
#+begin_src sql-mode
  select 
  codename
  FROM tests_info
  limit 10;
#+end_src

#+RESULTS:
#+begin_SRC example
                                                                                                               codename                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]
 [k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]
 [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]
 [k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]
 [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]
 [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]
 [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]
 [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
 [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
 [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
(10 rows)

#+end_SRC


#+begin_src sql-mode
  select
  trim(test),
  release,
  array_length(operation_ids, 1) as endpoints_hit
  from
  tests
    left join tests_info on (trim(test) = codename)
    where test like '%[Conformance]%'
        limit 20
  ;
#+end_src

#+RESULTS:
#+begin_SRC example
                                                                                                                btrim                                                                                                                 | release | endpoints_hit 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------+---------------
 [k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]                                                                                                | v1.12   |             8
 [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]                                                                                  | v1.9    |            11
 [k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]                                                                                                                  | v1.18   |             9
 [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]                                                                                  | v1.9    |            11
 [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]                                                                                    | v1.9    |            11
 [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]                                                                                    | v1.9    |            11
 [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]  | v1.15   |             9
 [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] | v1.15   |             9
 [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]              | v1.15   |             9
 [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]           | v1.15   |             9
 [k8s.io] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]                                                                                    | v1.13   |             9
 [k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]                                                                                                     | v1.9    |            11
 [k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]                                                                                                | v1.9    |            11
 [k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]                                                                                                      | v1.9    |            11
 [k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]                                                                                                               | v1.9    |             9
 [k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]                                                                                                                          | v1.12   |             8
 [k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]                                                                                                                           | v1.12   |             8
 [k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]                                                                                | v1.12   |             8
 [k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance]                                                                                       | v1.13   |             9
 [k8s.io] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]                                                                                                          | v1.13   |             9
(20 rows)

