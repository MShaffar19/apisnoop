#+TITLE: Incorporate tests.yaml

* Purpose
  My current thought is:

    use the new test/conformance/testdata/conformance.yaml to track when a test was added to conformance
    use the 1.9-1.18 release tags of swagger.json to map when the endpoints were added to stable
    use only master/current/latest release-blocking prow-job audit.log (to see what endpoints a given conformance test hits)
    not show any endpoints that are deprecated
    note endpoints that are currently considered very low priority OR not part of conformance as lighter color (or remove them completely)
    The coverage info for 1.9 bar is based on the endpoints those tests hit in the current/latest audit.log

Same for 1.10-1.18
* Strategy
- Import yaml as a sql table for postgres
- Build out view that shows when a test was added and the endpoints it hits.
- Build out view that shows endpoints per release, low-priority endpoints, new endpoints, new tests, and new coverage.
- share table of these findings
- design infographic for best display of this
- transpose data into sharable infographic
* Process
** Import yaml as a sql table for postgres
* Conclusion
