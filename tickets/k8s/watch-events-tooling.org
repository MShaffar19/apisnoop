#+TITLE: Watch events tooling
#+AUTHOR: Caleb Woodbine <caleb@ii.coop>
#+AUTHOR: Hippie Hacker <hh@ii.coop>

* Ticket status
- [ ] [[https://github.com/cncf/apisnoop/pull/323][K8s watch events test tooling #323]] 
- [ ] [[https://github.com/kubernetes/kubernetes/issues/90574][Watch event test verification tooling #90574]] 

* Current problem

Watch events may be missed and the test may still pass.
We need to ensure that all expected watch events are seen.

Watch events are not collected and checked at the end of the test.

* Proposed solution

In order to solve the problem, we must collect all watch events as they come in and perform a check at the end of the test to ensure that the order is correct and they contain no errors.

#+begin_src go :wrap "example" :tangle /home/ii/watchEventsTooling.go
  package main

  import (
    "fmt"
    "reflect"
  )

  func main() {
    expectedWatchEventsAll := [][]string{
      {
        "ADDED",
        "ADDED",
        "DELETED",
      },
      {
        "ADDED",
        "MODIFIED",
        "MODIFIED",
        "DELETED",
      },
      {
        "ADDED",
        "MODIFIED",
        "DELETED",
      },
    }
    for expectedExampleInt, expectedWatchEvents := range expectedWatchEventsAll {
      fmt.Println("Running example", expectedExampleInt)
      allowedAttempts := 3
      failure := VerifyWatchEventOrder(allowedAttempts, expectedWatchEvents, func() []string {
        var myWatchEvent string
        var watchEvent []string
        fmt.Println("An event takes place (1/3)")
        myWatchEvent = "ADDED"
        watchEvent = append(watchEvent, myWatchEvent)

        fmt.Println("An event takes place (2/3)")
        myWatchEvent = "MODIFIED"
        watchEvent = append(watchEvent, myWatchEvent)

        fmt.Println("An event takes place (3/3)")
        myWatchEvent = "DELETED"
        watchEvent = append(watchEvent, myWatchEvent)

        return watchEvent
      })
      if failure != nil {
        fmt.Println(failure, "watch events occured in the wrong or incorrect order")
      }
      fmt.Println("Check complete")
    }
  }

  func VerifyWatchEventOrder(retries int, expectedWatchEvents []string, scenario func() []string) (failure error) {
    var attemptContainsFailure bool
  attempts:
    for try := 1; try <= retries; try++ {
      if try == retries {
        return failure
      }
      actualWatchEvents := scenario()
      if len(expectedWatchEvents) < len(actualWatchEvents) {
        failure = fmt.Errorf("expected watch events count is not equal to or greater than the count of actual watch events\n")
        attemptContainsFailure = true
        continue
      }
      var validWatchEvents []string
    // expectedWatchEventsLoop:
      for watchEventIndex, watchEvent := range expectedWatchEvents {
      actualWatchEventsLoop:
        for _, watchEventActual := range actualWatchEvents {
          var validEventLast string
          if len(validWatchEvents) == 0 {
            validEventLast = ""
          } else {
            validEventLast = validWatchEvents[len(validWatchEvents) - 1]
          }
          fmt.Println(watchEvent == watchEventActual, watchEventActual != validEventLast, watchEventActual, watchEvent, validEventLast)

          if watchEvent == watchEventActual || expectedWatchEvents[watchEventIndex - 1] == watchEventActual { //&& watchEventActual != validEventLast {
            validWatchEvents = append(validWatchEvents, watchEvent)
            break actualWatchEventsLoop
          }
        }
      }
      fmt.Println("try", try, "- validWatchEvents:", validWatchEvents)
      if reflect.DeepEqual(validWatchEvents, expectedWatchEvents) == false {
        attemptContainsFailure = true
        failure = fmt.Errorf("watch events are not valid; subject to incorrect: order or event count\n")
        continue attempts
      }
      if attemptContainsFailure == false {
        failure = nil
        break attempts
      }
    }
    return failure
  }
#+end_src

#+RESULTS:
#+begin_example
Running example 0
An event takes place (1/3)
An event takes place (2/3)
An event takes place (3/3)
true true ADDED ADDED 
true false ADDED ADDED ADDED
false false ADDED DELETED ADDED
try 1 - validWatchEvents: [ADDED ADDED DELETED]
Check complete
Running example 1
An event takes place (1/3)
An event takes place (2/3)
An event takes place (3/3)
true true ADDED ADDED 
false false ADDED MODIFIED ADDED
false true ADDED MODIFIED MODIFIED
true false MODIFIED MODIFIED MODIFIED
false true ADDED DELETED MODIFIED
false false MODIFIED DELETED MODIFIED
try 1 - validWatchEvents: [ADDED MODIFIED MODIFIED DELETED]
Check complete
Running example 2
An event takes place (1/3)
An event takes place (2/3)
An event takes place (3/3)
true true ADDED ADDED 
false false ADDED MODIFIED ADDED
false true ADDED DELETED MODIFIED
false false MODIFIED DELETED MODIFIED
try 1 - validWatchEvents: [ADDED MODIFIED DELETED]
Check complete
#+end_example
