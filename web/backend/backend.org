#+NAME: APISnoop WebUI Backend
#+AUTHOR: Zach Mandeville
#+EMAIL: zz@ii.coop
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(i) | DONE(d) DONE-AND-SHARED(!)
#+PROPERTY: header-args :dir (file-name-directory buffer-file-name)
#+XPROPERTY: header-args:shell :results silent
#+XPROPERTY: header-args:shell :exports code
#+XPROPERTY: header-args:shell :wrap "SRC text"
#+PROPERTY: header-args:tmate :socket "/tmp/.zz-left.isocket"
#+PROPERTY: header-args:tmate :session api:main

* Introduction
This deals with the backend for apisnoop.cncf.io.
* Architecture
  For the backend we will be using Feathers //for right now//.  We may find that we want something completely different, or that we want our webui to be able to live in multiple places.  Our goal is for the two to be entirely separate, so either can change if needed.
** Feathers
   [[https://feathersjs.com/][Feathers]] is a well-designed and well-documented api layer written in Node.  It has good support among my Wellington dev friends, and so I have better help if I encounter any sorta problem.  It also is just really pleasant to use so far, with a good model for how to create different services.  It also has an existing React connector.
*** Feathers Resources
**** [[https://www.youtube.com/playlist?list=PLwSdIiqnDlf_lb5y1liQK2OW5daXYgKOe][youtube channel]]
**** [[https://stackoverflow.com/questions/tagged/feathersjs][stackoverflow tag]]
**** [[https://github.com/issues?utf8=%25E2%259C%2593&q=is%253Aopen+is%253Aissue+user%253Afeathersjs+][github page]]
**** [[https://blog.feathersjs.com/][medium page]]
**** [[http://slack.feathersjs.com/][slack channel]]
* The Code
** Setting up our API Initially
**** Generating the Services
     We will be using the processed data provided by the audit-log review to generate an api path for us to traverse.  Each build will have its own data, which will include the tags in it, the agents in it, and a sunburst path.
** Services
   (**NOTE**: for each service, make sure paginate is turned off.  In the future I should do this automatically.)
*** Introduction

Services refer to the different paths of our api, and the various jobs and manipulation we do to the data being fed through these paths.  They act as gatekeeepers to our various db's, so we aren't doing a bunch of db queries from all over the code and potentially causing strange behavior and hard to track errors.  Throug these, we have a consistent and reliable way to ask for and give data to our server: talk to the relevant service and have them do the work for you.

We generate a service using feathers cli.  This creates a number of files for us and makes sure the service is known to the entire backend.  Which is to say that there will be a number of file changes made when we make a new service, but the files within this section only refer to the core code we are writing.
**** Service Definitions
   We have four services now.
 - Config :: Handles the initial setup (reading json files from disk and distributing the file to the proper Releases service, performing any cleanup as necessary).
 - Releases ::  the heart of our data, has all the info we need by release and we use this for our presentational components in the front end..
 - Endpoints :: all the endpoints as taken from the releases, organized with the releases name
 - Tests :: all the tests form the releases organded by id and the releases name
*** Config
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./src/services/config/config.class.js
    :END:
   The config is run whenever the server starts up, and takes JSON files placed in =data-gen/processed= and generates paths from the data held within.


   The core of what we want is in apisnoop.json.  This lists all the endpoints and whether they're tested and the attached tests and useragents and so on.  It does _not_ include the release it is a part of, though.  This is held in =metadata.json=.  We need this info, because we organize all our sunbursts and such around the release.

   We use glob to search within our =data-gen/processed= folder, and it returns a list of filenames all with the full path after processed.  So we could take this path, and replace apisnoop.json with metadata.json, then pull the release info from there and append that as the release in the endpoints and so on.  It's a tad bit convoluted, but would at least make sure we are grabbing the info from within the file instead of the file name.


**** Overall Layout
     #+NAME: config.class.js layout
     #+BEGIN_SRC js
       /* eslint-disable no-unused-vars */
       const fs = require('fs')
       const glob = require('glob')
       const dayjs = require('dayjs')

       class Service {
         constructor (options) {
           this.options = options || {};
         }

         async setup (app, params) {
           populateAPI(app,'../../data-gen/processed')
         }
       }
       <<Define populateAPI>>

       module.exports = function (options) {
         return new Service(options);
       };

       module.exports.Service = Service;
    #+END_SRC

     We only have a single method here, which is setup.  We don't want this to be an accessible path, we are just using it to run through commands when the server first starts up.  In this case, we run a command that looks in a directory for processed JSons and puts each file into its own entry in our releases api path.

**** Define populateAPI
     This is our main set of functions for bringing in the data from our jsons into the api.  originally we had it set to a specific folder, and knowing the exact files we were looking for.  But now, we need to glob anything starting within =../../data-gen/processed/=

     #+NAME: Define populateAPI
     #+BEGIN_SRC js :tangle no
       function populateAPI (app, dir)  {
         var globOpts = {
           cwd: dir
         }
         populateEndpointsAndTestsAndUseragents(app, globOpts, dir)
         populateReleases(app, globOpts, dir)
       }

       function populateEndpointsAndTestsAndUseragents (app, opts, dir) {
         glob("**/apisnoop.json", opts, (err, processedAudits) => {
           for (var i = 0; i < processedAudits.length; i++) {
             var fileName = processedAudits[i]
             var releaseJson = fs.readFileSync(`${dir}/${fileName}`, 'utf-8')
             var releaseData = JSON.parse(releaseJson)
             var bucketJobRelease = getBucketJobReleaseFrom(fileName)
             addEntryToEndpointService(app, releaseData, bucketJobRelease)
             addEntryToTestService(app, releaseData, bucketJobRelease)
             addEntryToUseragentsService(app, releaseData, bucketJobRelease)
           }
         })
       }

       function populateReleases (app, opts, dir) {
         glob("**/metadata.json", opts, (err, processedAudits) => {
           for (var i = 0; i < processedAudits.length; i++) {
             var fileName = processedAudits[i]
             var metadataJson = fs.readFileSync(`${dir}/${fileName}`, 'utf-8')
             var metadata = JSON.parse(metadataJson)
             var finishedFile = fileName.replace('metadata.json', 'finished.json')
             var finishedJson = fs.readFileSync(`${dir}/${finishedFile}`, 'utf-8')
             var finishedData = JSON.parse(finishedJson)
             var bucketJobRelease = getBucketJobReleaseFrom(fileName)
             addEntryToReleasesService(app, metadata, finishedData, bucketJobRelease)
           }
         })
       }

       function getBucketJobReleaseFrom (fileName) {
         fileNameArr = fileName.split('/')
         return {
           bucket: fileNameArr[1],
           job: fileNameArr[2],
           release: fileNameArr[1] + "_" + fileNameArr[2]
         }
       }

       async function addEntryToEndpointService (app, releaseData, bucketJobRelease) {
         var service = app.service('/api/v1/endpoints')
         var endpointNames = Object.keys(releaseData.endpoints)
         var tests = releaseData.tests
         for (var endpointName of endpointNames) {
           var endpointMethods = Object.keys(releaseData.endpoints[endpointName])
           for (var endpointMethod of endpointMethods) {
             var rawEndpoint = releaseData.endpoints[endpointName][endpointMethod]
             var endpoint = {
               name: endpointName,
               method: endpointMethod,
               level: rawEndpoint.level,
               test_tags: rawEndpoint.test_tags,
               tests: rawEndpoint.tests,
               description: rawEndpoint.desc,
               path: rawEndpoint.path,
               category: rawEndpoint.cat,
               isTested: rawEndpoint.counter > 0,
               ...bucketJobRelease
             }
             // An endpoint is unique by name, release, method.
             var uniqueQuery = {
               name: endpoint.name,
               method: endpoint.method,
               release: endpoint.release
             }
             addOrUpdateEntry(service, endpoint, uniqueQuery)
           }
         }
       }

       async function addEntryToTestService (app, releaseData, bucketJobRelease) {
         var service = app.service('/api/v1/tests')
         var testNames = Object.keys(releaseData.test_sequences)
         for (var testName of testNames) {
           var testSequence = releaseData.test_sequences[testName]
           var test = {
             name: testName,
             sequence: testSequence,
             ...bucketJobRelease

           }
           // An test is unique by testName and Release.
           var uniqueQuery = {
             name: test.name,
             release: test.release
           }
           addOrUpdateEntry(service, test, uniqueQuery)
         }
       }

       async function addEntryToUseragentsService (app, releaseData, bucketJobRelease) {
         var service = app.service('/api/v1/useragents')
         var useragents = Object.keys(releaseData.useragents)
         for (var useragentEntry of useragents) {
           var touchedEndpoints = releaseData
           var touchedEndpoints = releaseData.useragents[useragentEntry]
           var useragent = {
             name: useragentEntry,
             endpoints: touchedEndpoints,
             ...bucketJobRelease
           }
           // A useragent is unique by Name and Release.
           var uniqueQuery = {
             name: useragent.name,
             release: useragent.release
           }
           addOrUpdateEntry(service, useragent, uniqueQuery)
         }
       }

       async function addEntryToReleasesService (app, metadata, finishedData, bucketJobRelease) {
         var service = app.service('/api/v1/releases')
         var release = {
           name: bucketJobRelease.release,
           ...metadata,
           ...finishedData,
           ...bucketJobRelease,
           release_short: metadata["job-version"].split("+")[0],
           gathered_datetime: dayjs(finishedData.timestamp * 1000).format('YYYY-MM-DD, HH:mm:ss')
         }
         // Release is unique by bucket, job, and timestamp
         var uniqueQuery = {
           bucket: release.bucket,
           timestamp: release.timestamp
         }
         addOrUpdateEntry(service, release, uniqueQuery)
       }

       async function addOrUpdateEntry (service, entry, uniqueQuery) {
         var existingEntry = await service.find({query:uniqueQuery})
         if (existingEntry.length === 0) {
           await service.create(entry)
         } else {
           await service.update(existingEntry[0]._id, entry)
         }
       }



     #+END_SRC

     This will read the file and send the data to our releases service, but releaes will reject it by default because some of the fiels in the data have periods and our database does not like that.  So we add a hook to Releases that takes this data given to it and changes it's peirods to underscores before trying to add it to the database.  We generated the hook using feathers/cli, setting it to be before any create or update action...meaning it manipualtes the file BEFORE it is added to the db through CREATE or UPDATE
*** Releases
    The file that handles this service is boilerplate feathers, so we will use this section to write and discuss the hooks used as part of the releases service.
**** cleanReleaseData
     :PROPERTIES:
     :header-args: :noweb yes :tangle ./src/hooks/clean-release-data.js
     :END:
    #+NAME clean-release-data.js
    #+BEGIN_SRC js
      const _ = require('lodash')

      module.exports = function (options = {}) {
        return async context => {
          var data = context.data.data
          data = cleanUp(data)
          context.data = {name: context.data.name, data: data}
          return context;
        }
      }

      function cleanUp (obj) {
        var cleanObj = {}
        for (key in obj) {
          if (_.isPlainObject(obj[key])) {
            cleanObj[key.replace(/\./g,'_')] = cleanUp(obj[key])
          } else {
            cleanObj[key.replace(/\./g,'_')] = obj[key]
          }
        }
        return cleanObj
      }
    #+END_SRC
