{"count": {"/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/batch/v1beta1/watch/cronjobs": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/watch/namespaces/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/namespaces/{namespace}/configmaps/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/policy/v1beta1/podsecuritypolicies/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/coordination.k8s.io/v1beta1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "coordination", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/api/v1/nodes/{name}/proxy": {"misses": {}, "counter": 100, "methods": {"head": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": ["[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 100, "agents": ["e2e.test/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "options": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/batch/v2alpha1/watch/cronjobs": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"misses": {}, "counter": 1807, "methods": {"post": {"category": "core", "tests": ["[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 234, "agents": ["kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "e2e.test/v1.12.2"]}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 766, "agents": ["e2e.test/v1.12.2"]}, "get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 499, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/batch/v1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "batch", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["batch_v1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/storage.k8s.io/v1alpha1/watch/volumeattachments/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/certificates.k8s.io/v1beta1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "certificates", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/watch/roles": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/networking.k8s.io/v1/networkpolicies": {"misses": {}, "counter": 24, "methods": {"watch": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 23, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/namespaces/{namespace}/services": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apiextensions.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "apiextensions", "tests": [], "tags": ["apiextensions"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/nodes/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/namespaces/{namespace}/pods": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/coordination.k8s.io/v1beta1/watch/leases": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/configmaps": {"misses": {}, "counter": 28, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 27, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/api/v1/namespaces/{name}/finalize": {"misses": {}, "counter": 193, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 193, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}": {"misses": {}, "counter": 5824, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 339, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": ["[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 5485, "agents": ["kubectl/v1.10.7", "kube-controller-manager/v1.12.2", "kube-apiserver/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/batch/v1/jobs": {"misses": {}, "counter": 609, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 23, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 586, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"misses": {}, "counter": 1034, "methods": {"post": {"category": "core", "tests": ["[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 21, "agents": ["kubectl/v1.12.2", "e2e.test/v1.12.2"]}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "core", "tests": ["[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 2, "agents": ["e2e.test/v1.12.2"]}, "get": {"category": "core", "tests": ["none given", "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 703, "agents": ["kubectl/v1.10.7", "e2e.test/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.12.2"]}}, "level": "stable"}, "/apis/extensions/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "extensions", "tests": [], "tags": ["extensions"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/services/{name}/proxy": {"misses": {}, "counter": 632, "methods": {"head": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": ["[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 632, "agents": ["dashboard/v1.8.3", "e2e.test/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "options": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/scheduling.k8s.io/v1alpha1/priorityclasses": {"misses": {}, "counter": 0, "methods": {"post": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/batch/v1/watch/namespaces/{namespace}/jobs": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"misses": {}, "counter": 807, "methods": {"post": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "events", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["events_v1beta1"], "fields": {}, "counter": 499, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/events.k8s.io/v1beta1/watch/events": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval": {"misses": {}, "counter": 3, "methods": {"put": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 3, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status": {"misses": {}, "counter": 2, "methods": {"put": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 2, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/rolebindings": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/scheduling.k8s.io/v1beta1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "scheduling", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/apps/v1beta2/": {"misses": {}, "counter": 1508, "methods": {"get": {"category": "apps", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apps_v1beta2"], "fields": {}, "counter": 1508, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/api/v1/events": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/networking.k8s.io/v1/watch/networkpolicies": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status": {"misses": {}, "counter": 105, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 105, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/coordination.k8s.io/v1beta1/leases": {"misses": {}, "counter": 28, "methods": {"watch": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 27, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/authorization.k8s.io/v1beta1/subjectaccessreviews": {"misses": {}, "counter": 1092, "methods": {"post": {"category": "authorization", "tests": [], "tags": ["authorization_v1beta1"], "fields": {}, "counter": 1092, "agents": ["kube-controller-manager/v1.12.2", "kubelet/v1.12.2", "metrics-server/v0.0.0"]}}, "level": "beta"}, "/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}": {"misses": {}, "counter": 2181, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 1067, "agents": ["kubectl/v1.10.7"]}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 1114, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7"]}}, "level": "stable"}, "/api/v1/componentstatuses/{name}": {"misses": {}, "counter": 0, "methods": {"get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale": {"misses": {}, "counter": 0, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/watch/ingresses": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/daemonsets": {"misses": {}, "counter": 28, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 27, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/apps/v1beta1/namespaces/{namespace}/statefulsets": {"misses": {}, "counter": 196, "methods": {"post": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 196, "agents": ["kubectl/v1.10.7"]}}, "level": "beta"}, "/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/authorization.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "authorization", "tests": [], "tags": ["authorization"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1/rolebindings": {"misses": {}, "counter": 50, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 48, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/autoscaling/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/resourcequotas": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/events": {"misses": {}, "counter": 0, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/watch/replicasets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/policy/v1beta1/watch/podsecuritypolicies/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/serviceaccounts": {"misses": {}, "counter": 56, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 54, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/autoscaling/v1/watch/horizontalpodautoscalers": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/roles": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests": {"misses": {}, "counter": 48, "methods": {"post": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 11, "agents": ["kubelet/v1.12.2"]}, "delete": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 33, "agents": ["kube-controller-manager/v1.12.2", "kubelet/v1.12.2"]}, "get": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 4, "agents": ["kube-controller-manager/v1.12.2", "kubelet/v1.12.2"]}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}": {"misses": {}, "counter": 0, "methods": {"head": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "options": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"misses": {"get": {"tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "counter": 191, "agents": ["e2e.test/v1.12.2"]}}, "counter": 191, "methods": {"post": {"category": "authorization", "tests": [], "tags": ["authorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/storage.k8s.io/v1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "storage", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["storage_v1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/events.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "events", "tests": [], "tags": ["events"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta1/controllerrevisions": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/namespaces/{namespace}/replicasets": {"misses": {}, "counter": 0, "methods": {"post": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/events/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/storage.k8s.io/v1/watch/storageclasses": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "storage", "tests": [], "tags": ["storage_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"misses": {}, "counter": 1005, "methods": {"post": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 2, "agents": ["kubectl/v1.12.2"]}, "delete": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["batch_v1"], "fields": {}, "counter": 695, "agents": ["kubectl/v1.10.7", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/storage.k8s.io/v1/storageclasses": {"misses": {}, "counter": 180, "methods": {"post": {"category": "storage", "tests": [], "tags": ["storage_v1"], "fields": {}, "counter": 98, "agents": ["kubectl/v1.10.7"]}, "delete": {"category": "storage", "tests": [], "tags": ["storage_v1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "storage", "tests": [], "tags": ["storage_v1"], "fields": {}, "counter": 77, "agents": ["kube-apiserver/v1.12.2", "kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1"], "fields": {}, "counter": 5, "agents": ["kube-scheduler/v1.12.2", "kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1/watch/namespaces/{namespace}/statefulsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1/roles": {"misses": {}, "counter": 52, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 50, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/apps/v1/watch/deployments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/rollback": {"misses": {}, "counter": 0, "methods": {"post": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/policy/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "policy", "tests": [], "tags": ["policy"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta1/namespaces/{namespace}/deployments": {"misses": {}, "counter": 198, "methods": {"post": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 2, "agents": ["kubectl/v1.10.7", "kubectl/v1.12.2"]}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 196, "agents": ["kubectl/v1.10.7"]}}, "level": "beta"}, "/apis/extensions/v1beta1/podsecuritypolicies/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/namespaces/{namespace}/serviceaccounts": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/persistentvolumeclaims": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/namespaces": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/": {"misses": {}, "counter": 1510, "methods": {"get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 1510, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"misses": {}, "counter": 805, "methods": {"post": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["autoscaling_v1"], "fields": {}, "counter": 498, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/configmaps/{name}": {"misses": {}, "counter": 3522, "methods": {"put": {"category": "core", "tests": ["[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 2916, "agents": ["glbc/v0.0.0", "e2e.test/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": ["[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 7, "agents": ["e2e.test/v1.12.2"]}, "get": {"category": "core", "tests": ["[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 599, "agents": ["kube-apiserver/v1.12.2", "metrics-server/v0.0.0", "cluster-proportional-autoscaler/v1.6.5", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/persistentvolumes": {"misses": {}, "counter": 283, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 77, "agents": ["kube-apiserver/v1.12.2", "kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "core", "tests": ["[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 206, "agents": ["kube-scheduler/v1.12.2", "kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/namespaces/{namespace}/configmaps": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status": {"misses": {}, "counter": 3, "methods": {"put": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 3, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions": {"misses": {}, "counter": 2, "methods": {"post": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": ["[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]"], "tags": ["apps_v1beta1"], "fields": {}, "counter": 2, "agents": ["e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/apiextensions.k8s.io/v1beta1/": {"misses": {}, "counter": 1508, "methods": {"get": {"category": "apiextensions", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 1508, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"misses": {}, "counter": 805, "methods": {"post": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 498, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}": {"misses": {}, "counter": 0, "methods": {"head": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "options": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/settings.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "settings", "tests": [], "tags": ["settings"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/authorization.k8s.io/v1/subjectaccessreviews": {"misses": {}, "counter": 0, "methods": {"post": {"category": "authorization", "tests": [], "tags": ["authorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/settings.k8s.io/v1alpha1/podpresets": {"misses": {}, "counter": 54, "methods": {"watch": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 52, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "alpha"}, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/admissionregistration.k8s.io/v1alpha1/initializerconfigurations": {"misses": {}, "counter": 0, "methods": {"post": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/nodes/{name}/status": {"misses": {}, "counter": 2641, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 2641, "agents": ["node-problem-detector/v1.4.0", "kubelet/v1.12.2", "kube-controller-manager/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews": {"misses": {}, "counter": 0, "methods": {"post": {"category": "authorization", "tests": [], "tags": ["authorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta1/": {"misses": {}, "counter": 1509, "methods": {"get": {"category": "apps", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apps_v1beta1"], "fields": {}, "counter": 1509, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"misses": {}, "counter": 818, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 11, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7"]}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 499, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/extensions/v1beta1/watch/replicasets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/batch/v1beta1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "batch", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["batch_v1beta1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/namespaces/{namespace}/secrets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/authentication.k8s.io/v1beta1/": {"misses": {}, "counter": 1508, "methods": {"get": {"category": "authentication", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["authentication_v1beta1"], "fields": {}, "counter": 1508, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/apps/v1beta2/watch/namespaces/{namespace}/deployments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/watch/replicasets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/persistentvolumes": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles": {"misses": {}, "counter": 0, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/extensions/v1beta1/watch/daemonsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/persistentvolumes/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/namespaces/{namespace}/replicationcontrollers": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta2/namespaces/{namespace}/daemonsets": {"misses": {}, "counter": 0, "methods": {"post": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/networking.k8s.io/v1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "networking", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["networking_v1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/policy/v1beta1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "policy", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["policy_v1beta1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/roles": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/apps/v1/watch/namespaces/{namespace}/deployments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/autoscaling/v2beta2/watch/horizontalpodautoscalers": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/controllerrevisions": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale": {"misses": {}, "counter": 0, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/services": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1beta1/rolebindings": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apiregistration.k8s.io/v1/apiservices/{name}/status": {"misses": {}, "counter": 6114, "methods": {"put": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 6114, "agents": ["kube-apiserver/v1.12.2"]}, "patch": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta2/watch/statefulsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/namespaces/{namespace}/endpoints": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/watch/namespaces/{namespace}/limitranges/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}": {"misses": {}, "counter": 32, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 2, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 15, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 15, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/coordination.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "coordination", "tests": [], "tags": ["coordination"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/networkpolicies": {"misses": {}, "counter": 26, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 25, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/namespaces/{namespace}/podtemplates": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"misses": {}, "counter": 1013, "methods": {"post": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": ["none given", "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 705, "agents": ["kubectl/v1.10.7", "e2e.test/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/autoscaling/v2beta1/horizontalpodautoscalers": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status": {"misses": {}, "counter": 200, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 200, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/pods/{name}/binding": {"misses": {}, "counter": 357, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 357, "agents": ["kube-scheduler/v1.12.2"]}}, "level": "stable"}, "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/admissionregistration.k8s.io/v1alpha1/watch/initializerconfigurations": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/watch/namespaces/{namespace}/endpoints/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/resourcequotas": {"misses": {}, "counter": 54, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 52, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/extensions/v1beta1/replicasets": {"misses": {}, "counter": 28, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 27, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations": {"misses": {}, "counter": 56, "methods": {"post": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 54, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/pods/{name}/attach": {"misses": {}, "counter": 2, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 2, "agents": ["kubectl/v1.12.2"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/namespaces/{namespace}/events": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"misses": {}, "counter": 805, "methods": {"post": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "networking", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["networking_v1"], "fields": {}, "counter": 498, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1/watch/daemonsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings": {"misses": {}, "counter": 0, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}": {"misses": {}, "counter": 195, "methods": {"put": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 97, "agents": ["kubectl/v1.10.7"]}, "patch": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 98, "agents": ["kubectl/v1.10.7"]}}, "level": "beta"}, "/apis/storage.k8s.io/v1alpha1/volumeattachments": {"misses": {}, "counter": 0, "methods": {"post": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/configmaps": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apiregistration.k8s.io/v1/watch/apiservices": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1/watch/rolebindings": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1/watch/roles": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/policy/v1beta1/poddisruptionbudgets": {"misses": {}, "counter": 54, "methods": {"watch": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 50, "agents": ["kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 4, "agents": ["kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/resourcequotas/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/persistentvolumes/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/autoscaling/v2beta1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "autoscaling", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}": {"misses": {}, "counter": 417, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 103, "agents": ["pod_nanny/v0.0.0", "kubectl/v1.10.7", "kube-controller-manager/v1.12.2"]}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "extensions", "tests": ["[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 7, "agents": ["kubectl/v1.12.2", "e2e.test/v1.12.2"]}, "get": {"category": "extensions", "tests": ["[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 307, "agents": ["kubectl/v1.10.7", "pod_nanny/v0.0.0", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"misses": {}, "counter": 556, "methods": {"head": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": ["[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 556, "agents": ["e2e.test/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "options": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/endpoints": {"misses": {}, "counter": 1302, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 296, "agents": ["kube-controller-manager/v1.12.2", "kube-scheduler/v1.12.2"]}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "core", "tests": ["[sig-network] Service endpoints latency should not be very high  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 2, "agents": ["e2e.test/v1.12.2"]}, "get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 696, "agents": ["kubectl/v1.10.7", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"misses": {}, "counter": 817, "methods": {"post": {"category": "apps", "tests": ["[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 5, "agents": ["e2e.test/v1.12.2"]}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 504, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/watch/secrets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/replicationcontrollers": {"misses": {}, "counter": 56, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 52, "agents": ["kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 4, "agents": ["kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1beta1/watch/deployments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers": {"misses": {}, "counter": 0, "methods": {"post": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "rbacAuthorization", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "extensions", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}": {"misses": {}, "counter": 27, "methods": {"put": {"category": "apps", "tests": ["[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 4, "agents": ["e2e.test/v1.12.2"]}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": ["[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 23, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/watch/endpoints": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/limitranges": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/nodes": {"misses": {}, "counter": 1339, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 8, "agents": ["kubelet/v1.12.2"]}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 513, "agents": ["kube-apiserver/v1.12.2", "kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2", "glbc/v0.0.0", "kubelet/v1.12.2", "heapster/v0.0.0", "metrics-server/v0.0.0", "pod_nanny/v0.0.0", "cluster-proportional-autoscaler/v1.6.5"]}, "get": {"category": "core", "tests": ["none given", "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 818, "agents": ["kube-scheduler/v1.12.2", "kubelet/v1.12.2", "kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "glbc/v0.0.0", "heapster/v0.0.0", "metrics-server/v0.0.0", "pod_nanny/v0.0.0", "cluster-proportional-autoscaler/v1.6.5", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/pods/{name}/eviction": {"misses": {}, "counter": 0, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/endpoints/{name}": {"misses": {}, "counter": 509, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 161, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 221, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "core", "tests": ["[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 127, "agents": ["kubectl/v1.10.7", "kubectl/v1.12.2", "e2e.test/v1.12.2", "nettest/v0.0.0"]}}, "level": "stable"}, "/apis/policy/v1beta1/podsecuritypolicies": {"misses": {}, "counter": 28, "methods": {"post": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 27, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}": {"misses": {}, "counter": 2, "methods": {"put": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2"]}}, "level": "beta"}, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/watch/nodes": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/storage.k8s.io/v1beta1/watch/storageclasses/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/storage.k8s.io/v1beta1/volumeattachments": {"misses": {}, "counter": 58, "methods": {"post": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 56, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"misses": {}, "counter": 819, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 12, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7"]}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 499, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/pods": {"misses": {}, "counter": 312, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 262, "agents": ["kube-apiserver/v1.12.2", "kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2", "glbc/v0.0.0", "kubelet/v1.12.2", "heapster/v0.0.0", "metrics-server/v0.0.0"]}, "get": {"category": "core", "tests": ["[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 50, "agents": ["kube-scheduler/v1.12.2", "kubelet/v1.12.2", "curl/7.38.0", "kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2", "glbc/v0.0.0", "heapster/v0.0.0", "metrics-server/v0.0.0", "kubectl/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/configmaps": {"misses": {}, "counter": 2113, "methods": {"post": {"category": "core", "tests": ["[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 434, "agents": ["kube-apiserver/v1.12.2", "glbc/v0.0.0", "kubectl/v1.10.7", "cluster-proportional-autoscaler/v1.6.5", "e2e.test/v1.12.2"]}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "core", "tests": ["[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 523, "agents": ["kube-controller-manager/v1.12.2", "kubelet/v1.12.2", "e2e.test/v1.12.2"]}, "get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 849, "agents": ["kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kubelet/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/watch/events": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/limitranges/{name}": {"misses": {}, "counter": 1, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 1, "agents": ["kubectl/v1.10.7"]}}, "level": "stable"}, "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"misses": {}, "counter": 805, "methods": {"post": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "settings", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 498, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "alpha"}, "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}": {"misses": {}, "counter": 197, "methods": {"put": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 97, "agents": ["kubectl/v1.10.7"]}, "patch": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apiextensions", "tests": ["none given"], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 2, "agents": ["e2e.test/v1.12.2", "kube-apiserver/v1.12.2"]}, "get": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 98, "agents": ["kubectl/v1.10.7"]}}, "level": "beta"}, "/apis/apps/v1/controllerrevisions": {"misses": {}, "counter": 26, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 25, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/events.k8s.io/v1beta1/events": {"misses": {}, "counter": 30, "methods": {"watch": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 29, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1alpha1/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/rbac.authorization.k8s.io/v1/watch/clusterroles": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/admissionregistration.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status": {"misses": {}, "counter": 104, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 104, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/networking.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "networking", "tests": [], "tags": ["networking"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/": {"misses": {}, "counter": 1511, "methods": {"get": {"category": "apis", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apis"], "fields": {}, "counter": 1511, "agents": ["kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/batch/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "batch", "tests": [], "tags": ["batch"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions": {"misses": {}, "counter": 54, "methods": {"post": {"category": "apiextensions", "tests": ["none given"], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 2, "agents": ["kubectl/v1.10.7", "e2e.test/v1.12.2"]}, "delete": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 50, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/pods/{name}/portforward": {"misses": {}, "counter": 0, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/storage.k8s.io/v1/storageclasses/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "storage", "tests": [], "tags": ["storage_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "storage", "tests": [], "tags": ["storage_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "storage", "tests": [], "tags": ["storage_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/admissionregistration.k8s.io/v1alpha1/watch/initializerconfigurations/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/rbac.authorization.k8s.io/v1alpha1/roles": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/namespaces/{namespace}/services": {"misses": {}, "counter": 1234, "methods": {"post": {"category": "core", "tests": ["[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 225, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7", "e2e.test/v1.12.2", "kubectl/v1.12.2"]}, "watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 1009, "agents": ["kubectl/v1.10.7", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/podtemplates": {"misses": {}, "counter": 28, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 27, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/batch/v1/watch/jobs": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/pods/{name}": {"misses": {}, "counter": 4750, "methods": {"put": {"category": "core", "tests": ["[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 45, "agents": ["e2e.test/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 400, "agents": ["kube-controller-manager/v1.12.2", "kubelet/v1.12.2", "e2e.test/v1.12.2", "kubectl/v1.12.2"]}, "get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 4305, "agents": ["kubelet/v1.12.2", "kube-scheduler/v1.12.2", "pod_nanny/v0.0.0", "e2e.test/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1beta1/watch/controllerrevisions": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apiregistration.k8s.io/v1beta1/": {"misses": {}, "counter": 1510, "methods": {"get": {"category": "apiregistration", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 1510, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/authorization.k8s.io/v1/": {"misses": {}, "counter": 1508, "methods": {"get": {"category": "authorization", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["authorization_v1"], "fields": {}, "counter": 1508, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/policy/v1beta1/watch/podsecuritypolicies": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/podtemplates/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"misses": {}, "counter": 498, "methods": {"get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 498, "agents": ["e2e.test/v1.12.2", "kubectl/v1.12.2"]}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/authorization.k8s.io/v1beta1/selfsubjectrulesreviews": {"misses": {}, "counter": 0, "methods": {"post": {"category": "authorization", "tests": [], "tags": ["authorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/scheduling.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "scheduling", "tests": [], "tags": ["scheduling"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers": {"misses": {}, "counter": 0, "methods": {"post": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/namespaces/{namespace}/secrets/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/watch/namespaces/{namespace}/daemonsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/scheduling.k8s.io/v1alpha1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "scheduling", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "alpha"}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"misses": {}, "counter": 887, "methods": {"post": {"category": "apps", "tests": ["[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 56, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 523, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/services/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/authorization.k8s.io/v1beta1/": {"misses": {}, "counter": 1508, "methods": {"get": {"category": "authorization", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["authorization_v1beta1"], "fields": {}, "counter": 1508, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/api/v1/watch/namespaces/{namespace}/limitranges": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/autoscaling/v2beta2/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "autoscaling", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/pods/{name}/exec": {"misses": {}, "counter": 84, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 84, "agents": ["Go-http-client/1.1", "kubectl/v1.12.2"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/authentication.k8s.io/v1/tokenreviews": {"misses": {}, "counter": 35, "methods": {"post": {"category": "authentication", "tests": [], "tags": ["authentication_v1"], "fields": {}, "counter": 35, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1/daemonsets": {"misses": {}, "counter": 26, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 25, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/bindings": {"misses": {}, "counter": 0, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/namespaces/{namespace}/pods/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/autoscaling/v1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "autoscaling", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["autoscaling_v1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/events.k8s.io/v1beta1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "events", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["events_v1beta1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/extensions/v1beta1/ingresses": {"misses": {}, "counter": 53, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 50, "agents": ["kube-controller-manager/v1.12.2", "glbc/v0.0.0"]}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 3, "agents": ["glbc/v0.0.0", "kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/storage.k8s.io/v1beta1/watch/volumeattachments/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs": {"misses": {}, "counter": 0, "methods": {"post": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"misses": {}, "counter": 1005, "methods": {"post": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 2, "agents": ["kubectl/v1.10.7"]}, "delete": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 695, "agents": ["kubectl/v1.10.7", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/scheduling.k8s.io/v1beta1/watch/priorityclasses/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/pods": {"misses": {}, "counter": 2427, "methods": {"post": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 437, "agents": ["kube-controller-manager/v1.12.2", "kubelet/v1.12.2", "e2e.test/v1.12.2", "kubectl/v1.12.2"]}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "core", "tests": ["[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 44, "agents": ["e2e.test/v1.12.2", "kubectl/v1.12.2"]}, "get": {"category": "core", "tests": ["none given", "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 1638, "agents": ["kubectl/v1.10.7", "e2e.test/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.12.2"]}}, "level": "stable"}, "/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta1/deployments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/replicasets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"misses": {}, "counter": 1008, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 700, "agents": ["kubectl/v1.10.7", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles": {"misses": {}, "counter": 0, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/namespaces/{name}": {"misses": {}, "counter": 2130, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 1, "agents": ["kubectl/v1.10.7"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 388, "agents": ["e2e.test/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 1741, "agents": ["kubectl/v1.10.7", "kube-controller-manager/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2", "kubectl/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1beta2/watch/deployments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions": {"misses": {}, "counter": 0, "methods": {"post": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}": {"misses": {}, "counter": 81, "methods": {"put": {"category": "apps", "tests": ["[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 17, "agents": ["e2e.test/v1.12.2"]}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": ["[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 5, "agents": ["e2e.test/v1.12.2"]}, "get": {"category": "apps", "tests": ["[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 59, "agents": ["e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/persistentvolumes/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/namespaces/{namespace}/deployments/{name}": {"misses": {}, "counter": 430, "methods": {"put": {"category": "apps", "tests": ["[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 4, "agents": ["e2e.test/v1.12.2"]}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": ["[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 426, "agents": ["kubectl/v1.10.7", "e2e.test/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apiregistration.k8s.io/v1/apiservices": {"misses": {}, "counter": 81, "methods": {"post": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 31, "agents": ["kube-apiserver/v1.12.2"]}, "delete": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 48, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/autoscaling/v2beta2/horizontalpodautoscalers": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status": {"misses": {}, "counter": 150, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 150, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}": {"misses": {}, "counter": 496, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 496, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7"]}}, "level": "stable"}, "/apis/storage.k8s.io/v1beta1/watch/storageclasses": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/watch/namespaces/{namespace}/deployments/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces": {"misses": {}, "counter": 495, "methods": {"post": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 209, "agents": ["kube-apiserver/v1.12.2", "e2e.test/v1.12.2"]}, "watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 83, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2", "heapster/v0.0.0"]}, "get": {"category": "core", "tests": ["[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 203, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "heapster/v0.0.0", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/services": {"misses": {}, "counter": 380, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 270, "agents": ["kube-apiserver/v1.12.2", "kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2", "glbc/v0.0.0", "kubelet/v1.12.2", "kube-dns/1.14.13"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 110, "agents": ["kube-scheduler/v1.12.2", "kubelet/v1.12.2", "kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2", "glbc/v0.0.0", "kube-proxy/v1.12.2", "kube-dns/1.14.13"]}}, "level": "stable"}, "/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"misses": {}, "counter": 1001, "methods": {"post": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 694, "agents": ["kubectl/v1.10.7", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}": {"misses": {}, "counter": 497, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 497, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7"]}}, "level": "stable"}, "/apis/batch/v1beta1/cronjobs": {"misses": {}, "counter": 613, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 27, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 586, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/extensions/v1beta1/watch/podsecuritypolicies": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/nodes/{name}/proxy/{path}": {"misses": {}, "counter": 0, "methods": {"head": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "options": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/storage.k8s.io/v1beta1/storageclasses/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/settings.k8s.io/v1alpha1/watch/podpresets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/apps/v1/statefulsets": {"misses": {}, "counter": 54, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 50, "agents": ["kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 4, "agents": ["kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1beta2/daemonsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/limitranges": {"misses": {}, "counter": 1000, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 1, "agents": ["kubectl/v1.10.7"]}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 691, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2", "kubectl/v1.12.2"]}}, "level": "stable"}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "settings", "tests": [], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles": {"misses": {}, "counter": 0, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"misses": {}, "counter": 823, "methods": {"post": {"category": "apps", "tests": ["[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 9, "agents": ["kubectl/v1.10.7", "e2e.test/v1.12.2"]}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "apps", "tests": ["[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 2, "agents": ["e2e.test/v1.12.2"]}, "get": {"category": "apps", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 504, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/pods/{name}/status": {"misses": {}, "counter": 1370, "methods": {"put": {"category": "core", "tests": ["[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 1370, "agents": ["kube-scheduler/v1.12.2", "kubelet/v1.12.2", "e2e.test/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}": {"misses": {}, "counter": 687, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 1, "agents": ["kubectl/v1.11.3"]}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "extensions", "tests": ["[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 5, "agents": ["e2e.test/v1.12.2"]}, "get": {"category": "extensions", "tests": ["[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 681, "agents": ["kubectl/v1.10.7", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/certificates.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "certificates", "tests": [], "tags": ["certificates"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/": {"misses": {}, "counter": 1511, "methods": {"get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core"], "fields": {}, "counter": 1511, "agents": ["kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings": {"misses": {}, "counter": 0, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings": {"misses": {}, "counter": 0, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/apps/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "apps", "tests": [], "tags": ["apps"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/watch/podsecuritypolicies/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta1/watch/statefulsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/limitranges": {"misses": {}, "counter": 56, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 54, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/componentstatuses": {"misses": {}, "counter": 2, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 2, "agents": ["kubectl/v1.12.2"]}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/storage.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "storage", "tests": [], "tags": ["storage"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/endpoints": {"misses": {}, "counter": 135, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 127, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2", "glbc/v0.0.0", "kube-dns/1.14.13"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 8, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2", "glbc/v0.0.0", "kube-proxy/v1.12.2", "kube-dns/1.14.13"]}}, "level": "stable"}, "/apis/apps/v1beta2/deployments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"misses": {}, "counter": 821, "methods": {"post": {"category": "apps", "tests": ["[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 5, "agents": ["e2e.test/v1.12.2"]}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": ["none given", "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 509, "agents": ["e2e.test/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "certificates", "tests": [], "tags": ["certificates_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/authentication.k8s.io/v1/": {"misses": {}, "counter": 1508, "methods": {"get": {"category": "authentication", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["authentication_v1"], "fields": {}, "counter": 1508, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/scheduling.k8s.io/v1beta1/priorityclasses": {"misses": {}, "counter": 50, "methods": {"post": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2"]}, "delete": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 46, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/apps/v1beta2/namespaces/{namespace}/deployments": {"misses": {}, "counter": 0, "methods": {"post": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1/watch/statefulsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews": {"misses": {}, "counter": 0, "methods": {"post": {"category": "authorization", "tests": [], "tags": ["authorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apiregistration.k8s.io/v1beta1/watch/apiservices": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/storage.k8s.io/v1beta1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "storage", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["storage_v1beta1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale": {"misses": {}, "counter": 580, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 1, "agents": ["cluster-proportional-autoscaler/v1.6.5"]}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 579, "agents": ["cluster-proportional-autoscaler/v1.6.5"]}}, "level": "beta"}, "/apis/apps/v1beta2/namespaces/{namespace}/statefulsets": {"misses": {}, "counter": 0, "methods": {"post": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"misses": {}, "counter": 807, "methods": {"post": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "coordination", "tests": [], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "coordination", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["coordination_v1beta1"], "fields": {}, "counter": 499, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/apps/v1beta2/watch/daemonsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/storage.k8s.io/v1alpha1/watch/volumeattachments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/apiregistration.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "apiregistration", "tests": [], "tags": ["apiregistration"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/watch/namespaces/{namespace}/resourcequotas": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/storage.k8s.io/v1/watch/storageclasses/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "storage", "tests": [], "tags": ["storage_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"misses": {}, "counter": 1001, "methods": {"post": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["batch_v1beta1"], "fields": {}, "counter": 694, "agents": ["kubectl/v1.10.7", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/authorization.k8s.io/v1/selfsubjectaccessreviews": {"misses": {}, "counter": 0, "methods": {"post": {"category": "authorization", "tests": [], "tags": ["authorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}": {"misses": {}, "counter": 12, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 4, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 4, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 4, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/scheduling.k8s.io/v1beta1/watch/priorityclasses": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "scheduling", "tests": [], "tags": ["scheduling_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}": {"misses": {}, "counter": 1431, "methods": {"put": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 686, "agents": ["kube-controller-manager/v1.12.2", "kubectl/v1.10.7"]}, "patch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 745, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7"]}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/podtemplates": {"misses": {}, "counter": 805, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 498, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/autoscaling/v2beta1/watch/horizontalpodautoscalers": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/autoscaling/v1/horizontalpodautoscalers": {"misses": {}, "counter": 26, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 25, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/storage.k8s.io/v1beta1/volumeattachments/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/policy/v1beta1/watch/poddisruptionbudgets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1/replicasets": {"misses": {}, "counter": 52, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 48, "agents": ["kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 4, "agents": ["kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/logs/{logpath}": {"misses": {}, "counter": 0, "methods": {"get": {"category": "logs", "tests": [], "tags": ["logs"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "rbacAuthorization", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/apiregistration.k8s.io/v1/watch/apiservices/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/podsecuritypolicies": {"misses": {}, "counter": 29, "methods": {"post": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 27, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "extensions", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 2, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings": {"misses": {}, "counter": 102, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 47, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7"]}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 52, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 3, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/api/v1/watch/serviceaccounts": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/extensions/v1beta1/watch/networkpolicies": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/namespaces/{namespace}/events/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/watch/controllerrevisions": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/storage.k8s.io/v1alpha1/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "storage", "tests": [], "tags": ["storage_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/admissionregistration.k8s.io/v1alpha1/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/apiregistration.k8s.io/v1/apiservices/{name}": {"misses": {}, "counter": 1, "methods": {"put": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 1, "agents": ["kube-apiserver/v1.12.2"]}, "get": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale": {"misses": {}, "counter": 32, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 8, "agents": ["kubectl/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 24, "agents": ["kubectl/v1.12.2"]}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/logs/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "logs", "tests": [], "tags": ["logs"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations": {"misses": {}, "counter": 56, "methods": {"post": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 54, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 2, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/resourcequotas": {"misses": {}, "counter": 1115, "methods": {"post": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 808, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2", "kubectl/v1.12.2"]}}, "level": "stable"}, "/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/pods": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/settings.k8s.io/v1alpha1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "settings", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["settings_v1alpha1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "alpha"}, "/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {"misses": {}, "counter": 126, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 16, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": ["[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 14, "agents": ["kubectl/v1.12.2", "e2e.test/v1.12.2"]}, "get": {"category": "core", "tests": ["[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 96, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/storage.k8s.io/v1beta1/storageclasses": {"misses": {}, "counter": 0, "methods": {"post": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/authentication.k8s.io/v1beta1/tokenreviews": {"misses": {}, "counter": 0, "methods": {"post": {"category": "authentication", "tests": [], "tags": ["authentication_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback": {"misses": {}, "counter": 0, "methods": {"post": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/version/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "version", "tests": [], "tags": ["version"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/nodes/{name}": {"misses": {}, "counter": 98, "methods": {"put": {"category": "core", "tests": ["[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 34, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": ["[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 64, "agents": ["kube-controller-manager/v1.12.2", "kube-proxy/v1.12.2", "kubectl/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status": {"misses": {}, "counter": 139, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 139, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/": {"misses": {}, "counter": 1508, "methods": {"get": {"category": "apps", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 1508, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/services/{name}": {"misses": {}, "counter": 1481, "methods": {"put": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": ["[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 219, "agents": ["kube-controller-manager/v1.12.2", "kubectl/v1.12.2", "e2e.test/v1.12.2"]}, "get": {"category": "core", "tests": ["[sig-network] Services should provide secure master service  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 1262, "agents": ["kube-apiserver/v1.12.2", "glbc/v0.0.0", "kubectl/v1.10.7", "e2e.test/v1.12.2", "kubectl/v1.12.2"]}}, "level": "stable"}, "/apis/authorization.k8s.io/v1/selfsubjectrulesreviews": {"misses": {}, "counter": 0, "methods": {"post": {"category": "authorization", "tests": [], "tags": ["authorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}": {"misses": {}, "counter": 47, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 14, "agents": ["kube-controller-manager/v1.12.2"]}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 4, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "apps", "tests": ["[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 29, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"misses": {}, "counter": 827, "methods": {"post": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 18, "agents": ["kube-controller-manager/v1.12.2"]}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 308, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apps_v1"], "fields": {}, "counter": 501, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status": {"misses": {}, "counter": 6, "methods": {"put": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 6, "agents": ["kube-apiserver/v1.12.2"]}, "patch": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apiextensions", "tests": [], "tags": ["apiextensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings": {"misses": {}, "counter": 0, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "events", "tests": [], "tags": ["events_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apiregistration.k8s.io/v1beta1/watch/apiservices/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1/clusterroles": {"misses": {}, "counter": 113, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 60, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7"]}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 50, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1"], "fields": {}, "counter": 3, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/apiregistration.k8s.io/v1/": {"misses": {}, "counter": 1510, "methods": {"get": {"category": "apiregistration", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["apiregistration_v1"], "fields": {}, "counter": 1510, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/api/v1/watch/podtemplates": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/admissionregistration.k8s.io/v1alpha1/initializerconfigurations/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "admissionregistration", "tests": [], "tags": ["admissionregistration_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/apiregistration.k8s.io/v1beta1/apiservices": {"misses": {}, "counter": 1, "methods": {"post": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 1, "agents": ["kubectl/v1.10.7"]}, "delete": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apiregistration", "tests": [], "tags": ["apiregistration_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "autoscaling", "tests": [], "tags": ["autoscaling_v2beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/api/v1/persistentvolumeclaims": {"misses": {}, "counter": 56, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 52, "agents": ["kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 4, "agents": ["kube-scheduler/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"misses": {}, "counter": 805, "methods": {"post": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "policy", "tests": [], "tags": ["policy_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "policy", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["policy_v1beta1"], "fields": {}, "counter": 498, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/apps/v1/deployments": {"misses": {}, "counter": 24, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 23, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1beta2/statefulsets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/watch/replicationcontrollers": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1/watch/namespaces/{namespace}/replicasets": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/batch/v2alpha1/": {"misses": {}, "counter": 1507, "methods": {"get": {"category": "batch", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 1507, "agents": ["kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kube-apiserver/v1.12.2", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "alpha"}, "/apis/extensions/v1beta1/watch/deployments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"misses": {}, "counter": 1013, "methods": {"post": {"category": "extensions", "tests": ["[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 9, "agents": ["kubectl/v1.10.7", "e2e.test/v1.12.2", "kubectl/v1.12.2"]}, "delete": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "extensions", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 697, "agents": ["kubectl/v1.10.7", "kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/api/v1/watch/namespaces/{namespace}/services/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status": {"misses": {}, "counter": 0, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/admissionregistration.k8s.io/v1beta1/": {"misses": {}, "counter": 1508, "methods": {"get": {"category": "admissionregistration", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["admissionregistration_v1beta1"], "fields": {}, "counter": 1508, "agents": ["kube-apiserver/v1.12.2", "kubectl/v1.12.2", "kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kubectl/v1.11.3", "e2e.test/v1.12.2"]}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles": {"misses": {}, "counter": 0, "methods": {"post": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/storage.k8s.io/v1beta1/watch/volumeattachments": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "storage", "tests": [], "tags": ["storage_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/batch/v1/namespaces/{namespace}/jobs/{name}": {"misses": {}, "counter": 9, "methods": {"put": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "batch", "tests": [], "tags": ["batch_v1"], "fields": {}, "counter": 2, "agents": ["kubectl/v1.12.2"]}, "get": {"category": "batch", "tests": ["[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]"], "tags": ["batch_v1"], "fields": {}, "counter": 7, "agents": ["kube-controller-manager/v1.12.2", "kubectl/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/extensions/v1beta1/deployments": {"misses": {}, "counter": 28, "methods": {"watch": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 27, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "extensions", "tests": [], "tags": ["extensions_v1beta1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/api/v1/namespaces/{namespace}/secrets/{name}": {"misses": {}, "counter": 3899, "methods": {"put": {"category": "core", "tests": ["[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 3, "agents": ["dashboard/v1.8.3", "e2e.test/v1.12.2"]}, "patch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "core", "tests": ["[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 92, "agents": ["kube-controller-manager/v1.12.2", "e2e.test/v1.12.2"]}, "get": {"category": "core", "tests": ["[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 3804, "agents": ["kube-apiserver/v1.12.2", "dashboard/v1.8.3", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/authentication.k8s.io/": {"misses": {}, "counter": 0, "methods": {"get": {"category": "authentication", "tests": [], "tags": ["authentication"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}, "/api/v1/namespaces/{namespace}/secrets": {"misses": {}, "counter": 3488, "methods": {"post": {"category": "core", "tests": ["[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 840, "agents": ["kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "e2e.test/v1.12.2"]}, "delete": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 307, "agents": ["kube-controller-manager/v1.12.2"]}, "watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 1170, "agents": ["kube-controller-manager/v1.12.2", "kubelet/v1.12.2"]}, "get": {"category": "core", "tests": ["[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]", "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]", "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]", "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]", "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]", "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for the cluster  [Conformance]", "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]", "[sig-network] Services should provide secure master service  [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]", "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]", "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]", "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]", "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]", "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]", "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]", "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]", "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]", "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]", "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]", "[sig-network] Service endpoints latency should not be very high  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]", "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]", "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]", "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]", "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-network] DNS should provide DNS for services  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]", "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]", "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should support proportional scaling [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]", "[k8s.io] Pods should be updated [NodeConformance] [Conformance]", "[sig-network] Services should serve a basic endpoint from pods  [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]", "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]", "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]", "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]", "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]", "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]", "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]", "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]", "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]", "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]", "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]", "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]", "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]", "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]", "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]", "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]", "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]", "[sig-apps] Deployment deployment should delete old replica sets [Conformance]", "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]", "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]", "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]", "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]", "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]", "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]", "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]", "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]", "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]", "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]", "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]", "[sig-network] Services should serve multiport endpoints from pods  [Conformance]", "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]", "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]", "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]", "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]", "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]", "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]", "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]", "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]", "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]", "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]", "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]", "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]", "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]", "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]", "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]", "[sig-apps] Deployment deployment should support rollover [Conformance]", "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]", "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]", "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]", "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]", "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]", "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]"], "tags": ["core_v1"], "fields": {}, "counter": 1171, "agents": ["kube-controller-manager/v1.12.2", "kubectl/v1.10.7", "kubelet/v1.12.2", "e2e.test/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}": {"misses": {}, "counter": 98, "methods": {"put": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 98, "agents": ["kubectl/v1.10.7"]}}, "level": "beta"}, "/apis/apps/v1beta2/watch/controllerrevisions": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta2"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "rbacAuthorization", "tests": [], "tags": ["rbacAuthorization_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions/{name}": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 0, "agents": []}}, "level": "beta"}, "/api/v1/secrets": {"misses": {}, "counter": 82, "methods": {"watch": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 79, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}, "get": {"category": "core", "tests": [], "tags": ["core_v1"], "fields": {}, "counter": 3, "agents": ["kube-apiserver/v1.12.2", "kube-controller-manager/v1.12.2"]}}, "level": "stable"}, "/apis/apps/v1beta1/statefulsets": {"misses": {}, "counter": 30, "methods": {"watch": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 29, "agents": ["kube-controller-manager/v1.12.2"]}, "get": {"category": "apps", "tests": [], "tags": ["apps_v1beta1"], "fields": {}, "counter": 1, "agents": ["kube-controller-manager/v1.12.2"]}}, "level": "beta"}, "/apis/batch/v2alpha1/cronjobs": {"misses": {}, "counter": 0, "methods": {"watch": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "batch", "tests": [], "tags": ["batch_v2alpha1"], "fields": {}, "counter": 0, "agents": []}}, "level": "alpha"}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}": {"misses": {}, "counter": 0, "methods": {"put": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 0, "agents": []}, "patch": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 0, "agents": []}, "delete": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 0, "agents": []}, "get": {"category": "networking", "tests": [], "tags": ["networking_v1"], "fields": {}, "counter": 0, "agents": []}}, "level": "stable"}}, "statistics": {"alpha": {"total": 124, "hit": 7}, "beta": {"total": 548, "hit": 104}, "total": {"total": 1228, "hit": 317}, "stable": {"total": 556, "hit": 206}}, "unknown_urls": ["/api/", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-67pg5/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-bsxg7/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-cfjdf/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-g6xmr/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-mdmgn/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-mhc2z/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-mzrbx/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-ndnvx/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-tfmpw/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-v8kd5/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-wdn55/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-configmap-wjjdx/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-container-lifecycle-hook-2nf9b/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-container-lifecycle-hook-72tlg/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-container-lifecycle-hook-blph5/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-container-lifecycle-hook-g4bxc/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-container-probe-7l8s8/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-container-probe-7n9ls/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-container-probe-hgj8m/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-container-probe-mfxjx/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-container-probe-mgkbr/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-container-probe-n86jj/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-container-probe-szs8v/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-containers-4v8w6/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-containers-7h52m/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-containers-fqwvd/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-containers-p2thk/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-custom-resource-definition-n4b97/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-daemonsets-58tlw/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-daemonsets-78qxj/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-daemonsets-bjsx9/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-daemonsets-mgfbx/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-daemonsets-rlfz7/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-deployment-9tdj5/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-deployment-gfmwd/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-deployment-ll5fc/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-deployment-tb98v/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-deployment-v27vg/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-dns-d48g2/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-dns-x7l68/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-5q7gb/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-5ql2d/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-8vbvk/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-94z7t/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-cfbxc/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-dqcn8/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-gmr68/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-h425x/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-h8gh8/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-pjmx8/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-ptmt7/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-r62rg/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-vcv8n/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-xxlkk/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-z2wlf/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-downward-api-z75zn/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-2fbxp/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-5dslz/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-5rmcd/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-6kvfg/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-d5fgx/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-dxbst/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-jlsx9/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-jsg9l/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-m5c2p/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-mspvf/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-pfq76/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-t45pc/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-vlqlg/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-emptydir-xcd97/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-events-csrz7/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-gc-24m5l/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-gc-2r5s9/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-gc-7jmng/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-gc-9zstl/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-gc-q5ckv/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-gc-rg5h6/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-gc-wl95q/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-hostpath-zmlr4/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-init-container-82d2k/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-init-container-bxzd2/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-init-container-rx5m8/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-init-container-xbk5z/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-2zm6l/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-5pbfz/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-5qmjj/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-6qlqj/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-8tckq/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-96r54/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-9kndw/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-c2trt/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-dkcvd/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-k49kw/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-khl7m/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-l567g/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-n75jt/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-nxxvc/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-s5xxz/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-spvmm/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-t76n9/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-vhjtq/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-vt82b/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-wmc87/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-xj8tp/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-kubectl-z57pp/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-namespaces-cpsnd/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-namespaces-sbxdh/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-nsdeletetest-vw4t7/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-nsdeletetest-zvp9s/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-pod-network-test-27m96/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-pod-network-test-2vb2h/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-pod-network-test-9w5tw/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-pod-network-test-fb4sp/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-pods-8qqc8/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-pods-94rfc/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-pods-hcwt2/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-pods-ldwlf/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-pods-n2mrt/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-pods-rt2ng/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-prestop-h25xb/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-2g9t4/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-2v2n2/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-4vzkc/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-7xjml/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-9rzk9/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-bjnz5/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-cpkgq/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-fqsmx/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-g5f8n/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-g9gkt/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-gjfmv/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-grw2h/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-hdcj4/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-k58z6/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-kxgqp/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-mshcc/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-n4ds2/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-nr9zd/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-pw4h9/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-rqvwp/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-rtpgf/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-skk8z/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-snrxk/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-t9p5s/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-vwkgl/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-xsxzv/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-xtwqd/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-projected-zh4ml/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-proxy-5gj6l/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-proxy-bhkcj/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-proxy-ksrmt/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-replicaset-9qpjb/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-replication-controller-qzgf2/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-sched-pred-cp8kx/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-sched-pred-jrtz9/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-sched-pred-mxl9n/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-secret-namespace-6s7mn/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-secrets-2gq4z/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-secrets-67p4z/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-secrets-796q9/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-secrets-95ngv/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-secrets-fk8qn/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-secrets-hqghm/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-secrets-mbddx/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-secrets-qg98s/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-secrets-rcnf5/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-secrets-zdh5b/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-services-52wgb/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-services-5lzng/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-services-ttkph/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-statefulset-bwv7h/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-statefulset-f6wmj/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-statefulset-lmlvh/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-statefulset-rlhp8/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-statefulset-x9gwd/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-subpath-285cp/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-subpath-7ncgt/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-subpath-7tfpq/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-subpath-dq7zf/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-subpath-lr6km/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-svc-latency-nfnvk/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-svcaccounts-ncw9h/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-svcaccounts-qkj6t/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-var-expansion-9wghb/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-var-expansion-bgfjp/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-var-expansion-p5k6c/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-watch-54xhb/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-watch-lh8g8/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-watch-q6qbm/replicationcontrollers", "/apis/extensions/v1beta1/namespaces/e2e-tests-watch-tcv79/replicationcontrollers", "/apis/metrics.k8s.io/v1beta1", "/apis/metrics.k8s.io/v1beta1", "/apis/metrics.k8s.io/v1beta1", "/apis/metrics.k8s.io/v1beta1", "/apis/metrics.k8s.io/v1beta1", "/apis/metrics.k8s.io/v1beta1", "/apis/metrics.k8s.io/v1beta1", "/apis/metrics.k8s.io/v1beta1", "/apis/metrics.k8s.io/v1beta1", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-67pg5/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-bsxg7/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-cfjdf/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-g6xmr/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-mdmgn/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-mhc2z/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-mzrbx/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-ndnvx/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-tfmpw/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-v8kd5/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-wdn55/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-configmap-wjjdx/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-container-lifecycle-hook-2nf9b/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-container-lifecycle-hook-72tlg/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-container-lifecycle-hook-blph5/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-container-lifecycle-hook-g4bxc/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-container-probe-7l8s8/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-container-probe-7n9ls/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-container-probe-hgj8m/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-container-probe-mfxjx/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-container-probe-mgkbr/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-container-probe-n86jj/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-container-probe-szs8v/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-containers-4v8w6/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-containers-7h52m/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-containers-fqwvd/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-containers-p2thk/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-custom-resource-definition-n4b97/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-daemonsets-58tlw/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-daemonsets-78qxj/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-daemonsets-bjsx9/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-daemonsets-mgfbx/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-daemonsets-rlfz7/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-deployment-9tdj5/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-deployment-gfmwd/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-deployment-ll5fc/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-deployment-tb98v/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-deployment-v27vg/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-dns-d48g2/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-dns-x7l68/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-5q7gb/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-5ql2d/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-8vbvk/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-94z7t/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-cfbxc/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-dqcn8/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-gmr68/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-h425x/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-h8gh8/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-pjmx8/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-ptmt7/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-r62rg/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-vcv8n/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-xxlkk/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-z2wlf/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-downward-api-z75zn/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-2fbxp/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-5dslz/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-5rmcd/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-6kvfg/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-d5fgx/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-dxbst/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-jlsx9/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-jsg9l/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-m5c2p/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-mspvf/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-pfq76/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-t45pc/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-vlqlg/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-emptydir-xcd97/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-events-csrz7/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-gc-24m5l/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-gc-2r5s9/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-gc-7jmng/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-gc-9zstl/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-gc-q5ckv/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-gc-rg5h6/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-gc-wl95q/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-hostpath-zmlr4/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-init-container-82d2k/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-init-container-bxzd2/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-init-container-rx5m8/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-init-container-xbk5z/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-2zm6l/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-5pbfz/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-5qmjj/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-6qlqj/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-8tckq/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-96r54/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-9kndw/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-c2trt/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-dkcvd/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-k49kw/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-khl7m/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-l567g/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-n75jt/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-nxxvc/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-s5xxz/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-spvmm/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-t76n9/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-vhjtq/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-vt82b/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-wmc87/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-xj8tp/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-kubectl-z57pp/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-namespaces-cpsnd/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-namespaces-sbxdh/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-nsdeletetest-vw4t7/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-nsdeletetest-zvp9s/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-pod-network-test-27m96/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-pod-network-test-2vb2h/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-pod-network-test-9w5tw/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-pod-network-test-fb4sp/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-pods-8qqc8/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-pods-94rfc/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-pods-hcwt2/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-pods-ldwlf/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-pods-n2mrt/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-pods-rt2ng/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-prestop-h25xb/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-2g9t4/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-2v2n2/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-4vzkc/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-7xjml/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-9rzk9/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-bjnz5/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-cpkgq/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-fqsmx/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-g5f8n/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-g9gkt/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-gjfmv/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-grw2h/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-hdcj4/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-k58z6/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-kxgqp/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-mshcc/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-n4ds2/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-nr9zd/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-pw4h9/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-rqvwp/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-rtpgf/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-skk8z/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-snrxk/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-t9p5s/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-vwkgl/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-xsxzv/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-xtwqd/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-projected-zh4ml/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-proxy-5gj6l/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-proxy-bhkcj/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-proxy-ksrmt/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-replicaset-9qpjb/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-replication-controller-qzgf2/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-sched-pred-cp8kx/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-sched-pred-jrtz9/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-sched-pred-mxl9n/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-secret-namespace-6s7mn/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-secrets-2gq4z/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-secrets-67p4z/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-secrets-796q9/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-secrets-95ngv/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-secrets-fk8qn/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-secrets-hqghm/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-secrets-mbddx/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-secrets-qg98s/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-secrets-rcnf5/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-secrets-zdh5b/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-services-52wgb/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-services-5lzng/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-services-ttkph/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-statefulset-bwv7h/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-statefulset-f6wmj/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-statefulset-lmlvh/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-statefulset-rlhp8/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-statefulset-x9gwd/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-subpath-285cp/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-subpath-7ncgt/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-subpath-7tfpq/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-subpath-dq7zf/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-subpath-lr6km/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-svc-latency-nfnvk/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-svcaccounts-ncw9h/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-svcaccounts-qkj6t/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-var-expansion-9wghb/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-var-expansion-bgfjp/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-var-expansion-p5k6c/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-watch-54xhb/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-watch-lh8g8/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-watch-q6qbm/pods", "/apis/metrics.k8s.io/v1beta1/namespaces/e2e-tests-watch-tcv79/pods", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/metrics.k8s.io/v1beta1?timeout=32s", "/apis/mygroup.example.com/v1beta1/fooql74nas", "/apis/mygroup.example.com/v1beta1/fooql74nas/setup-instance", "/apis/mygroup.example.com/v1beta1/fooql74nas?resourceVersion=4381&watch=true", "/apis/mygroup.example.com/v1beta1/fooql74nas?resourceVersion=4381&watch=true", "/apis/mygroup.example.com/v1beta1?timeout=32s", "/apis/mygroup.example.com/v1beta1?timeout=32s", "/apis/mygroup.example.com/v1beta1?timeout=32s", "/apis/mygroup.example.com/v1beta1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1", "/apis/scalingpolicy.kope.io/v1alpha1", "/apis/scalingpolicy.kope.io/v1alpha1", "/apis/scalingpolicy.kope.io/v1alpha1", "/apis/scalingpolicy.kope.io/v1alpha1", "/apis/scalingpolicy.kope.io/v1alpha1", "/apis/scalingpolicy.kope.io/v1alpha1", "/apis/scalingpolicy.kope.io/v1alpha1", "/apis/scalingpolicy.kope.io/v1alpha1", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-67pg5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-67pg5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-67pg5/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-bsxg7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-bsxg7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-bsxg7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-cfjdf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-cfjdf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-cfjdf/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-g6xmr/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-g6xmr/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-g6xmr/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-mdmgn/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-mdmgn/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-mdmgn/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-mhc2z/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-mhc2z/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-mhc2z/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-mzrbx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-mzrbx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-mzrbx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-mzrbx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-mzrbx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-ndnvx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-ndnvx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-ndnvx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-tfmpw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-v8kd5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-v8kd5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-v8kd5/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-wdn55/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-wdn55/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-wdn55/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-wjjdx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-wjjdx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-wjjdx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-wjjdx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-configmap-wjjdx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-2nf9b/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-2nf9b/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-2nf9b/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-2nf9b/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-2nf9b/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-72tlg/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-72tlg/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-72tlg/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-72tlg/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-72tlg/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-blph5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-blph5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-blph5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-blph5/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-blph5/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-g4bxc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-g4bxc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-g4bxc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-g4bxc/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-lifecycle-hook-g4bxc/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-7l8s8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-7l8s8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-7l8s8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-7n9ls/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-7n9ls/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-7n9ls/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-7n9ls/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-7n9ls/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-hgj8m/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-hgj8m/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-hgj8m/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-hgj8m/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-hgj8m/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-mfxjx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-mfxjx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-mfxjx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-mgkbr/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-mgkbr/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-mgkbr/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-n86jj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-n86jj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-n86jj/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-szs8v/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-szs8v/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-container-probe-szs8v/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-4v8w6/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-4v8w6/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-4v8w6/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-7h52m/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-7h52m/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-7h52m/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-fqwvd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-fqwvd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-fqwvd/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-p2thk/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-p2thk/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-containers-p2thk/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-custom-resource-definition-n4b97/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-custom-resource-definition-n4b97/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-custom-resource-definition-n4b97/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-58tlw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-58tlw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-58tlw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-78qxj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-78qxj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-78qxj/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-bjsx9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-bjsx9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-bjsx9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-mgfbx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-mgfbx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-mgfbx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-rlfz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-rlfz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-daemonsets-rlfz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-9tdj5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-9tdj5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-9tdj5/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-gfmwd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-gfmwd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-gfmwd/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-ll5fc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-ll5fc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-ll5fc/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-tb98v/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-tb98v/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-tb98v/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-v27vg/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-v27vg/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-deployment-v27vg/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-dns-d48g2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-dns-d48g2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-dns-d48g2/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-dns-x7l68/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-dns-x7l68/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-dns-x7l68/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-5q7gb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-5q7gb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-5q7gb/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-5ql2d/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-5ql2d/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-5ql2d/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-5ql2d/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-5ql2d/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-8vbvk/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-8vbvk/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-8vbvk/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-94z7t/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-94z7t/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-94z7t/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-cfbxc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-cfbxc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-cfbxc/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-dqcn8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-dqcn8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-dqcn8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-gmr68/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-gmr68/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-gmr68/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-h425x/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-h425x/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-h425x/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-h425x/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-h425x/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-h8gh8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-h8gh8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-h8gh8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-pjmx8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-pjmx8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-pjmx8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-ptmt7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-ptmt7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-ptmt7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-r62rg/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-r62rg/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-r62rg/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-vcv8n/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-vcv8n/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-vcv8n/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-xxlkk/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-xxlkk/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-xxlkk/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-z2wlf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-z2wlf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-z2wlf/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-z75zn/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-z75zn/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-downward-api-z75zn/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-e2e-kubelet-etc-hosts-lr4kz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-2fbxp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-2fbxp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-2fbxp/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-5dslz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-5dslz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-5dslz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-5rmcd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-5rmcd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-5rmcd/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-6kvfg/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-6kvfg/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-6kvfg/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-d5fgx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-d5fgx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-d5fgx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-dxbst/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-dxbst/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-dxbst/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-jlsx9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-jlsx9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-jlsx9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-jsg9l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-jsg9l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-jsg9l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-m5c2p/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-m5c2p/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-m5c2p/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-mspvf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-mspvf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-mspvf/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-pfq76/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-pfq76/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-pfq76/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-t45pc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-t45pc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-t45pc/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-vlqlg/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-vlqlg/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-vlqlg/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-xcd97/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-xcd97/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-emptydir-xcd97/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-events-csrz7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-24m5l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-24m5l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-24m5l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-2r5s9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-2r5s9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-2r5s9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-7jmng/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-7jmng/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-7jmng/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-9zstl/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-9zstl/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-9zstl/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-q5ckv/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-q5ckv/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-q5ckv/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-rg5h6/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-rg5h6/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-rg5h6/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-wl95q/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-wl95q/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-gc-wl95q/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-hostpath-zmlr4/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-hostpath-zmlr4/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-hostpath-zmlr4/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-82d2k/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-82d2k/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-82d2k/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-bxzd2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-bxzd2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-bxzd2/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-rx5m8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-rx5m8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-rx5m8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-rx5m8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-rx5m8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-xbk5z/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-xbk5z/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-xbk5z/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-xbk5z/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-init-container-xbk5z/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-2zm6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-5pbfz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-5pbfz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-5pbfz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-5qmjj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-5qmjj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-5qmjj/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-6qlqj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-6qlqj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-6qlqj/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-8tckq/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-8tckq/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-8tckq/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-8tckq/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-8tckq/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-96r54/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-9kndw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-9kndw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-9kndw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-9kndw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-9kndw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-c2trt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-c2trt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-c2trt/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-dkcvd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-dkcvd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-dkcvd/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-k49kw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-k49kw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-k49kw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-k49kw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-k49kw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-khl7m/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-khl7m/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-khl7m/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-l567g/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-l567g/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-l567g/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-n75jt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-n75jt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-n75jt/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-nxxvc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-nxxvc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-nxxvc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-nxxvc/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-nxxvc/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-s5xxz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-s5xxz/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-s5xxz/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-spvmm/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-spvmm/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-spvmm/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-spvmm/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-spvmm/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-t76n9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-t76n9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-t76n9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-t76n9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-t76n9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-vhjtq/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-vhjtq/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-vhjtq/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-vt82b/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-vt82b/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-vt82b/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-vt82b/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-vt82b/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-wmc87/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-wmc87/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-wmc87/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-xj8tp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-xj8tp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-xj8tp/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-z57pp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-z57pp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-kubectl-z57pp/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-namespaces-cpsnd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-namespaces-cpsnd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-namespaces-cpsnd/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-namespaces-sbxdh/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-namespaces-sbxdh/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-namespaces-sbxdh/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-n5jf4/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-n5jf4/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-vw4t7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-vw4t7/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-vw4t7/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-xgnz6/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-xgnz6/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-xgnz6/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-xgnz6/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-zvp9s/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-zvp9s/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-nsdeletetest-zvp9s/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-27m96/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-27m96/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-27m96/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-27m96/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-27m96/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-2vb2h/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-2vb2h/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-2vb2h/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-2vb2h/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-2vb2h/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-9w5tw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-9w5tw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-9w5tw/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-9w5tw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-9w5tw/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-fb4sp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-fb4sp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-fb4sp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-fb4sp/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pod-network-test-fb4sp/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-8qqc8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-94rfc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-94rfc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-94rfc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-94rfc/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-94rfc/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-hcwt2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-hcwt2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-hcwt2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-hcwt2/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-hcwt2/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-ldwlf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-ldwlf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-ldwlf/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-n2mrt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-n2mrt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-n2mrt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-n2mrt/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-n2mrt/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-rt2ng/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-rt2ng/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-pods-rt2ng/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-prestop-h25xb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-prestop-h25xb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-prestop-h25xb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-prestop-h25xb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-prestop-h25xb/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-prestop-h25xb/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-prestop-h25xb/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-2g9t4/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-2g9t4/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-2g9t4/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-2v2n2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-2v2n2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-2v2n2/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-4vzkc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-4vzkc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-4vzkc/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-7xjml/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-7xjml/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-7xjml/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-9rzk9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-9rzk9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-9rzk9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-bjnz5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-bjnz5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-bjnz5/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-cpkgq/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-cpkgq/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-cpkgq/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-fqsmx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-fqsmx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-fqsmx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-g5f8n/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-g5f8n/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-g5f8n/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-g5f8n/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-g5f8n/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-g9gkt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-g9gkt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-g9gkt/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-gjfmv/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-gjfmv/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-gjfmv/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-grw2h/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-grw2h/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-grw2h/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-hdcj4/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-hdcj4/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-hdcj4/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-k58z6/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-k58z6/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-k58z6/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-k58z6/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-k58z6/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-kxgqp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-kxgqp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-kxgqp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-kxgqp/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-kxgqp/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-mshcc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-mshcc/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-mshcc/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-n4ds2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-n4ds2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-n4ds2/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-nr9zd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-nr9zd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-nr9zd/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-pw4h9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-pw4h9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-pw4h9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-rqvwp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-rqvwp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-rqvwp/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-rtpgf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-rtpgf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-rtpgf/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-skk8z/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-skk8z/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-skk8z/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-snrxk/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-snrxk/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-snrxk/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-t9p5s/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-t9p5s/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-t9p5s/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-vwkgl/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-vwkgl/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-vwkgl/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-vwkgl/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-vwkgl/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-xsxzv/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-xsxzv/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-xsxzv/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-xtwqd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-xtwqd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-xtwqd/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-zh4ml/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-zh4ml/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-zh4ml/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-zh4ml/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-projected-zh4ml/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-proxy-5gj6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-proxy-5gj6l/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-proxy-5gj6l/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-proxy-bhkcj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-proxy-bhkcj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-proxy-bhkcj/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-proxy-ksrmt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-proxy-ksrmt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-proxy-ksrmt/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-replicaset-9qpjb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-replicaset-9qpjb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-replicaset-9qpjb/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-replication-controller-qzgf2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-replication-controller-qzgf2/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-replication-controller-qzgf2/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-cp8kx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-cp8kx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-cp8kx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-jrtz9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-mxl9n/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-mxl9n/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-sched-pred-mxl9n/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secret-namespace-6s7mn/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secret-namespace-6s7mn/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secret-namespace-6s7mn/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-2gq4z/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-2gq4z/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-2gq4z/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-67p4z/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-67p4z/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-67p4z/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-796q9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-796q9/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-796q9/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-95ngv/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-95ngv/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-95ngv/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-fk8qn/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-fk8qn/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-fk8qn/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-hqghm/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-hqghm/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-hqghm/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-mbddx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-mbddx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-mbddx/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-mbddx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-mbddx/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-qg98s/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-qg98s/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-qg98s/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-rcnf5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-rcnf5/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-rcnf5/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-zdh5b/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-zdh5b/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-secrets-zdh5b/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-services-52wgb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-services-52wgb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-services-52wgb/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-services-5lzng/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-services-5lzng/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-services-5lzng/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-services-5lzng/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-services-5lzng/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-services-ttkph/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-services-ttkph/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-services-ttkph/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-bwv7h/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-bwv7h/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-bwv7h/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-f6wmj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-f6wmj/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-f6wmj/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-lmlvh/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-lmlvh/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-lmlvh/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-rlhp8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-rlhp8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-rlhp8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-x9gwd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-x9gwd/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-statefulset-x9gwd/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-285cp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-285cp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-285cp/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-7ncgt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-7ncgt/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-7ncgt/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-7tfpq/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-7tfpq/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-7tfpq/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-dq7zf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-dq7zf/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-dq7zf/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-lr6km/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-lr6km/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-subpath-lr6km/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-svc-latency-nfnvk/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-svc-latency-nfnvk/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-svc-latency-nfnvk/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-svc-latency-nfnvk/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-svc-latency-nfnvk/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-svcaccounts-ncw9h/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-svcaccounts-ncw9h/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-svcaccounts-ncw9h/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-svcaccounts-qkj6t/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-svcaccounts-qkj6t/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-svcaccounts-qkj6t/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-var-expansion-9wghb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-var-expansion-9wghb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-var-expansion-9wghb/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-var-expansion-bgfjp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-var-expansion-bgfjp/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-var-expansion-bgfjp/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-var-expansion-p5k6c/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-var-expansion-p5k6c/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-var-expansion-p5k6c/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-54xhb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-54xhb/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-54xhb/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-lh8g8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-lh8g8/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-lh8g8/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-q6qbm/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-q6qbm/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-q6qbm/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-tcv79/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-tcv79/scalingpolicies", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/e2e-tests-watch-tcv79/scalingpolicies?includeUninitialized=true", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/namespaces/kube-system/scalingpolicies/fluentd-gcp-scaling-policy", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?limit=500&resourceVersion=0", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=305&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=305&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=335&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=335&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=336&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=336&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=378&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=378&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=396&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=396&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=409&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=409&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=435&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=479&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=479&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=492&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=492&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=496&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=496&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=515&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=515&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=547&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=547&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=555&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=555&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=559&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1/scalingpolicies?resourceVersion=607&timeoutSeconds=559&watch=true", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/apis/scalingpolicy.kope.io/v1alpha1?timeout=32s", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s", "/openapi/v2?timeout=32s"], "results": [{"category": "apiregistration", "count": 6114, "tags": "apiregistration_v1", "level": "stable"}, {"category": "core", "count": 5485, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 4305, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 3804, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 2916, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 2641, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 1741, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 1638, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 1511, "tags": "core", "level": "stable"}, {"category": "apis", "count": 1511, "tags": "apis", "level": "stable"}, {"category": "apiregistration", "count": 1510, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "core", "count": 1510, "tags": "core_v1", "level": "stable"}, {"category": "apiregistration", "count": 1510, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apps", "count": 1509, "tags": "apps_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 1508, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "apiextensions", "count": 1508, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apps", "count": 1508, "tags": "apps_v1beta2", "level": "beta"}, {"category": "authentication", "count": 1508, "tags": "authentication_v1beta1", "level": "beta"}, {"category": "authorization", "count": 1508, "tags": "authorization_v1beta1", "level": "beta"}, {"category": "apps", "count": 1508, "tags": "apps_v1", "level": "stable"}, {"category": "authentication", "count": 1508, "tags": "authentication_v1", "level": "stable"}, {"category": "authorization", "count": 1508, "tags": "authorization_v1", "level": "stable"}, {"category": "batch", "count": 1507, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "scheduling", "count": 1507, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 1507, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "autoscaling", "count": 1507, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 1507, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "batch", "count": 1507, "tags": "batch_v1beta1", "level": "beta"}, {"category": "certificates", "count": 1507, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "coordination", "count": 1507, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "events", "count": 1507, "tags": "events_v1beta1", "level": "beta"}, {"category": "extensions", "count": 1507, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "policy", "count": 1507, "tags": "policy_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 1507, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "scheduling", "count": 1507, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "storage", "count": 1507, "tags": "storage_v1beta1", "level": "beta"}, {"category": "autoscaling", "count": 1507, "tags": "autoscaling_v1", "level": "stable"}, {"category": "batch", "count": 1507, "tags": "batch_v1", "level": "stable"}, {"category": "networking", "count": 1507, "tags": "networking_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 1507, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "storage", "count": 1507, "tags": "storage_v1", "level": "stable"}, {"category": "core", "count": 1370, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 1262, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 1171, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 1170, "tags": "core_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 1114, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "authorization", "count": 1092, "tags": "authorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 1067, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "core", "count": 1009, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 849, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 840, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 818, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 808, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 766, "tags": "core_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 745, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "extensions", "count": 705, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "core", "count": 703, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 700, "tags": "core_v1", "level": "stable"}, {"category": "extensions", "count": 697, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "core", "count": 696, "tags": "core_v1", "level": "stable"}, {"category": "extensions", "count": 695, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "batch", "count": 695, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 694, "tags": "batch_v1beta1", "level": "beta"}, {"category": "extensions", "count": 694, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "core", "count": 691, "tags": "core_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 686, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "extensions", "count": 681, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "core", "count": 632, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 599, "tags": "core_v1", "level": "stable"}, {"category": "batch", "count": 586, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 586, "tags": "batch_v1", "level": "stable"}, {"category": "extensions", "count": 579, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "core", "count": 556, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 523, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 523, "tags": "apps_v1", "level": "stable"}, {"category": "core", "count": 513, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 509, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 504, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 504, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 501, "tags": "apps_v1", "level": "stable"}, {"category": "coordination", "count": 499, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "events", "count": 499, "tags": "events_v1beta1", "level": "beta"}, {"category": "core", "count": 499, "tags": "core_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 499, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 499, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "settings", "count": 498, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "extensions", "count": 498, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "policy", "count": 498, "tags": "policy_v1beta1", "level": "beta"}, {"category": "core", "count": 498, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 498, "tags": "core_v1", "level": "stable"}, {"category": "autoscaling", "count": 498, "tags": "autoscaling_v1", "level": "stable"}, {"category": "networking", "count": 498, "tags": "networking_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 497, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 496, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "core", "count": 437, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 434, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 426, "tags": "apps_v1", "level": "stable"}, {"category": "core", "count": 400, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 388, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 357, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 339, "tags": "core_v1", "level": "stable"}, {"category": "coordination", "count": 308, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "events", "count": 308, "tags": "events_v1beta1", "level": "beta"}, {"category": "extensions", "count": 308, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 308, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "core", "count": 308, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 308, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 308, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 308, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 308, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 308, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 308, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 308, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 308, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 308, "tags": "apps_v1", "level": "stable"}, {"category": "batch", "count": 308, "tags": "batch_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 308, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 308, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "settings", "count": 307, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "batch", "count": 307, "tags": "batch_v1beta1", "level": "beta"}, {"category": "extensions", "count": 307, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 307, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 307, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 307, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "policy", "count": 307, "tags": "policy_v1beta1", "level": "beta"}, {"category": "core", "count": 307, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 307, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 307, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 307, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 307, "tags": "apps_v1", "level": "stable"}, {"category": "autoscaling", "count": 307, "tags": "autoscaling_v1", "level": "stable"}, {"category": "networking", "count": 307, "tags": "networking_v1", "level": "stable"}, {"category": "core", "count": 296, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 270, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 262, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 234, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 225, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 221, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 219, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 209, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 206, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 203, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 200, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 196, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 196, "tags": "apps_v1beta1", "level": "beta"}, {"category": "core", "count": 193, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 161, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 150, "tags": "apps_v1", "level": "stable"}, {"category": "core", "count": 139, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 127, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 127, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 110, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 105, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 104, "tags": "apps_v1", "level": "stable"}, {"category": "extensions", "count": 103, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "core", "count": 100, "tags": "core_v1", "level": "stable"}, {"category": "apiextensions", "count": 98, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 98, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apps", "count": 98, "tags": "apps_v1beta1", "level": "beta"}, {"category": "storage", "count": 98, "tags": "storage_v1", "level": "stable"}, {"category": "apiextensions", "count": 97, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 97, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "core", "count": 96, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 92, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 84, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 83, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 79, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 77, "tags": "core_v1", "level": "stable"}, {"category": "storage", "count": 77, "tags": "storage_v1", "level": "stable"}, {"category": "core", "count": 64, "tags": "core_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 60, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "apps", "count": 59, "tags": "apps_v1", "level": "stable"}, {"category": "storage", "count": 56, "tags": "storage_v1beta1", "level": "beta"}, {"category": "apps", "count": 56, "tags": "apps_v1", "level": "stable"}, {"category": "admissionregistration", "count": 54, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 54, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "core", "count": 54, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 54, "tags": "core_v1", "level": "stable"}, {"category": "settings", "count": 52, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "core", "count": 52, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 52, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 52, "tags": "core_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 52, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "apiextensions", "count": 50, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 50, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "policy", "count": 50, "tags": "policy_v1beta1", "level": "beta"}, {"category": "core", "count": 50, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 50, "tags": "apps_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 50, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 50, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "apiregistration", "count": 48, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apps", "count": 48, "tags": "apps_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 48, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 47, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "scheduling", "count": 46, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "core", "count": 45, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 44, "tags": "core_v1", "level": "stable"}, {"category": "authentication", "count": 35, "tags": "authentication_v1", "level": "stable"}, {"category": "core", "count": 34, "tags": "core_v1", "level": "stable"}, {"category": "certificates", "count": 33, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 31, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apps", "count": 29, "tags": "apps_v1beta1", "level": "beta"}, {"category": "events", "count": 29, "tags": "events_v1beta1", "level": "beta"}, {"category": "apps", "count": 29, "tags": "apps_v1", "level": "stable"}, {"category": "batch", "count": 27, "tags": "batch_v1beta1", "level": "beta"}, {"category": "coordination", "count": 27, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "extensions", "count": 27, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 27, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 27, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 27, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "policy", "count": 27, "tags": "policy_v1beta1", "level": "beta"}, {"category": "core", "count": 27, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 27, "tags": "core_v1", "level": "stable"}, {"category": "extensions", "count": 25, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "apps", "count": 25, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 25, "tags": "apps_v1", "level": "stable"}, {"category": "autoscaling", "count": 25, "tags": "autoscaling_v1", "level": "stable"}, {"category": "core", "count": 24, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 23, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 23, "tags": "apps_v1", "level": "stable"}, {"category": "batch", "count": 23, "tags": "batch_v1", "level": "stable"}, {"category": "networking", "count": 23, "tags": "networking_v1", "level": "stable"}, {"category": "core", "count": 21, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 18, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 17, "tags": "apps_v1", "level": "stable"}, {"category": "core", "count": 16, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 15, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 15, "tags": "apps_v1", "level": "stable"}, {"category": "core", "count": 14, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 14, "tags": "apps_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 12, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "certificates", "count": 11, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 11, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "extensions", "count": 9, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "apps", "count": 9, "tags": "apps_v1", "level": "stable"}, {"category": "core", "count": 8, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 8, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 8, "tags": "core_v1", "level": "stable"}, {"category": "extensions", "count": 7, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "core", "count": 7, "tags": "core_v1", "level": "stable"}, {"category": "batch", "count": 7, "tags": "batch_v1", "level": "stable"}, {"category": "apiextensions", "count": 6, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 5, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "apps", "count": 5, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 5, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 5, "tags": "apps_v1", "level": "stable"}, {"category": "storage", "count": 5, "tags": "storage_v1", "level": "stable"}, {"category": "certificates", "count": 4, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "extensions", "count": 4, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 4, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 4, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "policy", "count": 4, "tags": "policy_v1beta1", "level": "beta"}, {"category": "core", "count": 4, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 4, "tags": "core_v1", "level": "stable"}, {"category": "apps", "count": 4, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 4, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 4, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 4, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 4, "tags": "apps_v1", "level": "stable"}, {"category": "certificates", "count": 3, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "certificates", "count": 3, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "extensions", "count": 3, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "core", "count": 3, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 3, "tags": "core_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 3, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 3, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "settings", "count": 2, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 2, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 2, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "apiextensions", "count": 2, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apiextensions", "count": 2, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apiextensions", "count": 2, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apps", "count": 2, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 2, "tags": "apps_v1beta1", "level": "beta"}, {"category": "extensions", "count": 2, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 2, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "scheduling", "count": 2, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "scheduling", "count": 2, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "scheduling", "count": 2, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "storage", "count": 2, "tags": "storage_v1beta1", "level": "beta"}, {"category": "core", "count": 2, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 2, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 2, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 2, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 2, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 2, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 2, "tags": "core_v1", "level": "stable"}, {"category": "apiregistration", "count": 2, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apps", "count": 2, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 2, "tags": "apps_v1", "level": "stable"}, {"category": "batch", "count": 2, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 2, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 2, "tags": "batch_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 2, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 2, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "apiregistration", "count": 1, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apps", "count": 1, "tags": "apps_v1beta1", "level": "beta"}, {"category": "coordination", "count": 1, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "events", "count": 1, "tags": "events_v1beta1", "level": "beta"}, {"category": "extensions", "count": 1, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 1, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 1, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 1, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 1, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 1, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "policy", "count": 1, "tags": "policy_v1beta1", "level": "beta"}, {"category": "core", "count": 1, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 1, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 1, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 1, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 1, "tags": "core_v1", "level": "stable"}, {"category": "apiregistration", "count": 1, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apps", "count": 1, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 1, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 1, "tags": "apps_v1", "level": "stable"}, {"category": "autoscaling", "count": 1, "tags": "autoscaling_v1", "level": "stable"}, {"category": "networking", "count": 1, "tags": "networking_v1", "level": "stable"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "batch", "count": 0, "tags": "batch_v2alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1alpha1", "level": "alpha"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 0, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 0, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 0, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 0, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 0, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 0, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 0, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 0, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 0, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 0, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "settings", "count": 0, "tags": "settings_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "storage", "count": 0, "tags": "storage_v1alpha1", "level": "alpha"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration_v1beta1", "level": "beta"}, {"category": "apiextensions", "count": 0, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apiextensions", "count": 0, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apiextensions", "count": 0, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apiextensions", "count": 0, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apiextensions", "count": 0, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apiextensions", "count": 0, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apiextensions", "count": 0, "tags": "apiextensions_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta1", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "apps", "count": 0, "tags": "apps_v1beta2", "level": "beta"}, {"category": "authentication", "count": 0, "tags": "authentication_v1beta1", "level": "beta"}, {"category": "authorization", "count": 0, "tags": "authorization_v1beta1", "level": "beta"}, {"category": "authorization", "count": 0, "tags": "authorization_v1beta1", "level": "beta"}, {"category": "authorization", "count": 0, "tags": "authorization_v1beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta1", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v2beta2", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "batch", "count": 0, "tags": "batch_v1beta1", "level": "beta"}, {"category": "certificates", "count": 0, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "certificates", "count": 0, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "certificates", "count": 0, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "certificates", "count": 0, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "certificates", "count": 0, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "certificates", "count": 0, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "certificates", "count": 0, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "certificates", "count": 0, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "certificates", "count": 0, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "certificates", "count": 0, "tags": "certificates_v1beta1", "level": "beta"}, {"category": "coordination", "count": 0, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "coordination", "count": 0, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "coordination", "count": 0, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "coordination", "count": 0, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "coordination", "count": 0, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "coordination", "count": 0, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "coordination", "count": 0, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "coordination", "count": 0, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "coordination", "count": 0, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "coordination", "count": 0, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "coordination", "count": 0, "tags": "coordination_v1beta1", "level": "beta"}, {"category": "events", "count": 0, "tags": "events_v1beta1", "level": "beta"}, {"category": "events", "count": 0, "tags": "events_v1beta1", "level": "beta"}, {"category": "events", "count": 0, "tags": "events_v1beta1", "level": "beta"}, {"category": "events", "count": 0, "tags": "events_v1beta1", "level": "beta"}, {"category": "events", "count": 0, "tags": "events_v1beta1", "level": "beta"}, {"category": "events", "count": 0, "tags": "events_v1beta1", "level": "beta"}, {"category": "events", "count": 0, "tags": "events_v1beta1", "level": "beta"}, {"category": "events", "count": 0, "tags": "events_v1beta1", "level": "beta"}, {"category": "events", "count": 0, "tags": "events_v1beta1", "level": "beta"}, {"category": "events", "count": 0, "tags": "events_v1beta1", "level": "beta"}, {"category": "events", "count": 0, "tags": "events_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "extensions", "count": 0, "tags": "extensions_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "policy", "count": 0, "tags": "policy_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1beta1", "level": "beta"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "scheduling", "count": 0, "tags": "scheduling_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "storage", "count": 0, "tags": "storage_v1beta1", "level": "beta"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "core", "count": 0, "tags": "core_v1", "level": "stable"}, {"category": "admissionregistration", "count": 0, "tags": "admissionregistration", "level": "stable"}, {"category": "apiextensions", "count": 0, "tags": "apiextensions", "level": "stable"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration", "level": "stable"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apiregistration", "count": 0, "tags": "apiregistration_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "apps", "count": 0, "tags": "apps_v1", "level": "stable"}, {"category": "authentication", "count": 0, "tags": "authentication", "level": "stable"}, {"category": "authorization", "count": 0, "tags": "authorization", "level": "stable"}, {"category": "authorization", "count": 0, "tags": "authorization_v1", "level": "stable"}, {"category": "authorization", "count": 0, "tags": "authorization_v1", "level": "stable"}, {"category": "authorization", "count": 0, "tags": "authorization_v1", "level": "stable"}, {"category": "authorization", "count": 0, "tags": "authorization_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "autoscaling", "count": 0, "tags": "autoscaling_v1", "level": "stable"}, {"category": "batch", "count": 0, "tags": "batch", "level": "stable"}, {"category": "batch", "count": 0, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 0, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 0, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 0, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 0, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 0, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 0, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 0, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 0, "tags": "batch_v1", "level": "stable"}, {"category": "batch", "count": 0, "tags": "batch_v1", "level": "stable"}, {"category": "certificates", "count": 0, "tags": "certificates", "level": "stable"}, {"category": "coordination", "count": 0, "tags": "coordination", "level": "stable"}, {"category": "events", "count": 0, "tags": "events", "level": "stable"}, {"category": "extensions", "count": 0, "tags": "extensions", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking_v1", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking_v1", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking_v1", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking_v1", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking_v1", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking_v1", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking_v1", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking_v1", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking_v1", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking_v1", "level": "stable"}, {"category": "networking", "count": 0, "tags": "networking_v1", "level": "stable"}, {"category": "policy", "count": 0, "tags": "policy", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "rbacAuthorization", "count": 0, "tags": "rbacAuthorization_v1", "level": "stable"}, {"category": "scheduling", "count": 0, "tags": "scheduling", "level": "stable"}, {"category": "settings", "count": 0, "tags": "settings", "level": "stable"}, {"category": "storage", "count": 0, "tags": "storage", "level": "stable"}, {"category": "storage", "count": 0, "tags": "storage_v1", "level": "stable"}, {"category": "storage", "count": 0, "tags": "storage_v1", "level": "stable"}, {"category": "storage", "count": 0, "tags": "storage_v1", "level": "stable"}, {"category": "storage", "count": 0, "tags": "storage_v1", "level": "stable"}, {"category": "storage", "count": 0, "tags": "storage_v1", "level": "stable"}, {"category": "storage", "count": 0, "tags": "storage_v1", "level": "stable"}, {"category": "storage", "count": 0, "tags": "storage_v1", "level": "stable"}, {"category": "storage", "count": 0, "tags": "storage_v1", "level": "stable"}, {"category": "logs", "count": 0, "tags": "logs", "level": "stable"}, {"category": "logs", "count": 0, "tags": "logs", "level": "stable"}, {"category": "version", "count": 0, "tags": "version", "level": "stable"}], "test": {"tests": {"[sig-apps] Deployment deployment should delete old replica sets [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 7}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 4}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 3}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments/{name}": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-apps] Deployment deployment should support rollover [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 13}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}": {"counter": 4}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments/{name}": {"counter": 16}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 3}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Downward API volume should set mode on item file [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 80}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps/{name}": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 4}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Projected should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-api-machinery] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 3}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 2}, "/api/v1/namespaces": {"counter": 3}, "/apis/networking.k8s.io/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 3}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 2}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 2}, "/apis/batch/v2alpha1/": {"counter": 3}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 3}, "/apis/extensions/v1beta1/": {"counter": 3}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 2}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 3}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 2}, "/apis/": {"counter": 3}, "/api/v1/": {"counter": 3}, "/api/v1/namespaces/{name}": {"counter": 18}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 3}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 2}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 12}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 2}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 3}, "/apis/autoscaling/v2beta2/": {"counter": 3}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 3}, "/api/": {"counter": 3}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 2}, "/apis/apps/v1/": {"counter": 3}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/services/{name}": {"counter": 1}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 3}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 3}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 2}, "/apis/apps/v1beta2/": {"counter": 3}, "/api/v1/namespaces/{namespace}/services": {"counter": 3}, "/apis/storage.k8s.io/v1/": {"counter": 3}, "/apis/autoscaling/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 3}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 2}, "/apis/autoscaling/v2beta1/": {"counter": 3}, "/apis/batch/v1/": {"counter": 3}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 3}, "/apis/storage.k8s.io/v1beta1/": {"counter": 3}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/apiregistration.k8s.io/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 3}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 3}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 3}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 2}, "/apis/authorization.k8s.io/v1/": {"counter": 3}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 2}}}, "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 3}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl run pod should create a pod from an image when restart is Never  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should project all components that make up the projection API [Projection][NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 33}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/persistentvolumes": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}": {"counter": 14}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 3}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}}}, "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 6}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 14}, "/api/v1/nodes": {"counter": 3}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 24}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 7}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/nodes/{name}/proxy": {"counter": 2}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 7}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-network] Service endpoints latency should not be very high  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 2}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 8}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 202}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 4}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-network] DNS should provide DNS for services  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services/{name}": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 3}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 56}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 14}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-api-machinery] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Projected should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 4}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 2}, "/api/v1/namespaces": {"counter": 2}, "/apis/networking.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/pods": {"counter": 6}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 4}, "/apis/apps/v1beta1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 2}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 2}, "/apis/batch/v2alpha1/": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 4}, "/apis/extensions/v1beta1/": {"counter": 4}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 2}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/": {"counter": 4}, "/api/v1/": {"counter": 4}, "/api/v1/namespaces/{name}": {"counter": 10}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 4}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 2}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 10}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 4}, "/apis/autoscaling/v2beta2/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 4}, "/api/": {"counter": 4}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/apps/v1/": {"counter": 4}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 4}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 4}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 2}, "/apis/apps/v1beta2/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 4}, "/apis/autoscaling/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 2}, "/apis/autoscaling/v2beta1/": {"counter": 4}, "/apis/batch/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 3}, "/apis/events.k8s.io/v1beta1/": {"counter": 4}, "/apis/storage.k8s.io/v1beta1/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/apiregistration.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 3}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 2}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 4}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 4}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 4}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 9}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/authorization.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}}}, "[k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 10}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 7}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets/{name}": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl run job should create a job from an image when restart is OnFailure  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs/{name}": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 6}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 17}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 27}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/persistentvolumes": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}": {"counter": 27}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 3}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}}}, "[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 2}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 4}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-network] Services should provide secure master service  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services/{name}": {"counter": 1}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-network] Proxy version v1 should proxy logs on node with explicit kubelet port using proxy subresource  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/nodes/{name}/proxy": {"counter": 40}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl rolling-update should support rolling-update to same image  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 3}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/nodes/{name}/proxy": {"counter": 40}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 7}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 2}, "/api/v1/namespaces/{namespace}/services/{name}/proxy": {"counter": 240}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {"counter": 2}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints/{name}": {"counter": 1}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 400}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Projected should be consumable from pods in volume as non-root [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 2}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/nodes/{name}/proxy": {"counter": 6}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 12}, "/api/v1/nodes": {"counter": 3}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/nodes/{name}": {"counter": 5}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 8}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Projected should be consumable from pods in volume with mappings and Item mode set [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 30}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl run deployment should create a deployment from an image  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 6}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 7}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 10}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 9}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Projected should update annotations on modification [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 8}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 6}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 12}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 6}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 14}, "/api/v1/nodes": {"counter": 3}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 24}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 6}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (root,0644,default) [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 76}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 16}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-network] Services should serve multiport endpoints from pods  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints/{name}": {"counter": 11}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services/{name}": {"counter": 1}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 14}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 6}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps/{name}": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] Pods should be updated [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 6}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 3}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 5}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 2}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {"counter": 3}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 3}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 8}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps/{name}": {"counter": 11}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 4}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should provide container's cpu limit [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should set mode on item file [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-api-machinery] CustomResourceDefinition resources Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 6}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/persistentvolumes": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}": {"counter": 4}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 3}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 7}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}}}, "[k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 6}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 3}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 22}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Projected should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 16}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-api-machinery] Downward API should provide host IP as an env var [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] HostPath should give a volume the correct mode [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 3}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {"counter": 2}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 3}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 7}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 17}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Update Demo should do a rolling update of a replication controller  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 8}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 3}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {"counter": 3}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 3}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should provide container's memory limit [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-api-machinery] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-network] DNS should provide DNS for the cluster  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 56}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 8}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Projected updates should be reflected in volume [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 68}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps/{name}": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (root,0777,default) [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Projected should set DefaultMode on files [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]": {"paths": {"/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 158}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}": {"counter": 3}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 153}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/nodes/{name}": {"counter": 6}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 4}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 3}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 22}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 9}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 53}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}": {"counter": 4}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 10}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/nodes/{name}": {"counter": 6}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 4}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should be consumable from pods in volume [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 4}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 2}, "/api/v1/namespaces": {"counter": 2}, "/apis/networking.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 3}, "/api/v1/namespaces/{namespace}/pods": {"counter": 6}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 4}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 2}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 2}, "/apis/batch/v2alpha1/": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 4}, "/apis/extensions/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 2}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/": {"counter": 4}, "/api/v1/": {"counter": 4}, "/api/v1/namespaces/{name}": {"counter": 10}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 4}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 2}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 10}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 4}, "/apis/autoscaling/v2beta2/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 4}, "/api/": {"counter": 4}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 2}, "/apis/apps/v1/": {"counter": 4}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 4}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 4}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/apps/v1beta2/": {"counter": 4}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 4}, "/apis/autoscaling/v1/": {"counter": 4}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 2}, "/apis/autoscaling/v2beta1/": {"counter": 4}, "/apis/batch/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 3}, "/apis/events.k8s.io/v1beta1/": {"counter": 4}, "/apis/storage.k8s.io/v1beta1/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/apiregistration.k8s.io/v1/": {"counter": 4}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 2}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 4}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 4}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 9}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 2}, "/apis/authorization.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}}}, "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 14}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets/{name}": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 4}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 3}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 6}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 3}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 24}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 55}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}": {"counter": 3}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 4}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/nodes/{name}": {"counter": 11}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 4}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info should check if Kubernetes master services is included in cluster-info  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Projected should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 61}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl expose should create services for rc  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints/{name}": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services/{name}": {"counter": 4}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should update labels on modification [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 6}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 124}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl run rc should create an rc from an image  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 3}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 2}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/nodes/{name}/proxy": {"counter": 6}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 3}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/pods": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 8}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 6}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps/{name}": {"counter": 5}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 6}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 6}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 3}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments/{name}": {"counter": 4}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Downward API volume should set DefaultMode on files [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Projected should be consumable from pods in volume with mappings [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 4}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 2}, "/api/v1/namespaces": {"counter": 2}, "/apis/networking.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 3}, "/api/v1/namespaces/{namespace}/pods": {"counter": 6}, "/apis/policy/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 4}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 2}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 2}, "/apis/batch/v2alpha1/": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 4}, "/apis/extensions/v1beta1/": {"counter": 4}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 2}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/": {"counter": 4}, "/api/v1/": {"counter": 4}, "/api/v1/namespaces/{name}": {"counter": 10}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 4}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 2}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 10}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 4}, "/apis/autoscaling/v2beta2/": {"counter": 4}, "/apis/batch/v1beta1/": {"counter": 4}, "/api/": {"counter": 4}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/apps/v1/": {"counter": 4}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 4}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 4}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/apps/v1beta2/": {"counter": 4}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 4}, "/apis/autoscaling/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/autoscaling/v2beta1/": {"counter": 4}, "/apis/batch/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 3}, "/apis/events.k8s.io/v1beta1/": {"counter": 4}, "/apis/storage.k8s.io/v1beta1/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/apiregistration.k8s.io/v1/": {"counter": 4}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 2}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 4}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 4}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 9}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 2}, "/apis/authorization.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}}}, "[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 7}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 6}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets/{name}": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 14}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-apps] Deployment deployment should support proportional scaling [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}": {"counter": 12}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 4}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 6}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 3}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments/{name}": {"counter": 9}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 20}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps/{name}": {"counter": 6}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 9}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl replace should update a single-container pod's image  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl api-versions should check if v1 is in available api versions  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 7}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 125}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 16}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-api-machinery] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 25}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 18}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/podsecuritypolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 2}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 6}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/api/v1/nodes/{name}/proxy": {"counter": 6}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 3}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/nodes/{name}": {"counter": 15}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/pods": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 21}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/persistentvolumes": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}": {"counter": 23}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 3}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}}}, "[k8s.io] Pods should get a host IP [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 10}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl run default should create an rc or deployment from an image  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 44}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl patch should add annotations for pods in rc  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 5}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl version should check is all data is printed  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Update Demo should create and stop a replication controller  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 4}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 12}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 8}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/nodes/{name}": {"counter": 6}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 4}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/status": {"counter": 1}}}, "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 15}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 9}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (root,0666,default) [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 4}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should provide podname only [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-api-machinery] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should provide container's cpu request [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 22}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 7}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 38}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/persistentvolumes": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}": {"counter": 13}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 3}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}}}, "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Projected should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 14}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 7}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl run --rm job should create a job from an image, then delete the job  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs/{name}": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/services/{name}/proxy": {"counter": 6}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 25}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Projected optional updates should be reflected in volume [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 4}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 2}, "/api/v1/namespaces": {"counter": 2}, "/apis/networking.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 5}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 102}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 2}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 2}, "/apis/batch/v2alpha1/": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 4}, "/apis/extensions/v1beta1/": {"counter": 4}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 2}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 2}, "/apis/": {"counter": 4}, "/api/v1/": {"counter": 4}, "/api/v1/namespaces/{name}": {"counter": 28}, "/api/v1/nodes": {"counter": 4}, "/apis/authentication.k8s.io/v1/": {"counter": 4}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 2}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 10}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 4}, "/apis/autoscaling/v2beta2/": {"counter": 4}, "/api/v1/namespaces/{namespace}/configmaps/{name}": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 4}, "/api/": {"counter": 4}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 2}, "/apis/apps/v1/": {"counter": 4}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 4}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 4}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/apps/v1beta2/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 4}, "/apis/autoscaling/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets/{name}": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 4}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 2}, "/apis/autoscaling/v2beta1/": {"counter": 4}, "/apis/batch/v1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 5}, "/apis/events.k8s.io/v1beta1/": {"counter": 4}, "/apis/storage.k8s.io/v1beta1/": {"counter": 4}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/apiregistration.k8s.io/v1/": {"counter": 4}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 2}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 4}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 4}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 4}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 7}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/authorization.k8s.io/v1/": {"counter": 4}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 2}}}, "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 49}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 45}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/nodes/{name}": {"counter": 6}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 4}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl logs should be able to retrieve and filter logs  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 5}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-api-machinery] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 5}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-network] Services should serve a basic endpoint from pods  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints/{name}": {"counter": 11}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services/{name}": {"counter": 1}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 13}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Proxy server should support proxy with --port 0  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be submitted and removed  [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 13}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 1}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 4}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 5}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 4}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 11}, "/api/v1/nodes": {"counter": 2}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 3}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-storage] Projected should provide container's memory request [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 26}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 7}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 4}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 5}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments/{name}": {"counter": 5}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}}}, "[sig-cli] Kubectl client [k8s.io] Kubectl label should update the label on a resource  [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 1}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 3}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 3}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 4}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}}}, "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 1}, "/api/v1/namespaces": {"counter": 1}, "/apis/networking.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 1}, "/apis/policy/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 1}, "/apis/apps/v1beta1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 1}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 1}, "/apis/batch/v2alpha1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 2}, "/apis/extensions/v1beta1/": {"counter": 2}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 1}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 1}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/": {"counter": 2}, "/api/v1/": {"counter": 2}, "/api/v1/namespaces/{name}": {"counter": 5}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 1}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 5}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 2}, "/apis/autoscaling/v2beta2/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps/{name}": {"counter": 5}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 1}, "/apis/batch/v1beta1/": {"counter": 2}, "/api/": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 1}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 1}, "/api/v1/namespaces/{namespace}/services": {"counter": 1}, "/apis/apps/v1/": {"counter": 2}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 2}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 2}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 1}, "/apis/apps/v1beta2/": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 1}, "/apis/storage.k8s.io/v1/": {"counter": 2}, "/apis/autoscaling/v1/": {"counter": 2}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 1}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 1}, "/apis/autoscaling/v2beta1/": {"counter": 2}, "/apis/batch/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 1}, "/apis/events.k8s.io/v1beta1/": {"counter": 2}, "/apis/storage.k8s.io/v1beta1/": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 1}, "/apis/apiregistration.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 4}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 1}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 1}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 1}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 2}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 2}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 1}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 1}, "/apis/authorization.k8s.io/v1/": {"counter": 2}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 1}}}, "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]": {"paths": {"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 3}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 2}, "/api/v1/namespaces": {"counter": 3}, "/apis/networking.k8s.io/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/apis/policy/v1beta1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 2}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 2}, "/apis/batch/v2alpha1/": {"counter": 3}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 3}, "/apis/extensions/v1beta1/": {"counter": 3}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 2}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 3}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 2}, "/apis/": {"counter": 3}, "/api/v1/": {"counter": 3}, "/api/v1/namespaces/{name}": {"counter": 34}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 3}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 2}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 12}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 3}, "/apis/autoscaling/v2beta2/": {"counter": 3}, "/apis/batch/v1beta1/": {"counter": 3}, "/api/": {"counter": 3}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 2}, "/apis/apps/v1/": {"counter": 3}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 3}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 3}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 3}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/apps/v1beta2/": {"counter": 3}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 3}, "/apis/autoscaling/v1/": {"counter": 3}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 3}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/autoscaling/v2beta1/": {"counter": 3}, "/apis/batch/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 2}, "/apis/events.k8s.io/v1beta1/": {"counter": 3}, "/apis/storage.k8s.io/v1beta1/": {"counter": 3}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/apiregistration.k8s.io/v1/": {"counter": 3}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 2}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 2}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 3}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 3}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 3}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 7}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 2}, "/apis/authorization.k8s.io/v1/": {"counter": 3}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 2}}}, "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]": {"paths": {"/apis/rbac.authorization.k8s.io/v1beta1/": {"counter": 3}, "/apis/batch/v1/namespaces/{namespace}/jobs": {"counter": 2}, "/api/v1/namespaces": {"counter": 2}, "/apis/networking.k8s.io/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/pods": {"counter": 4}, "/api/v1/namespaces/{namespace}/endpoints": {"counter": 2}, "/apis/policy/v1beta1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/limitranges": {"counter": 2}, "/api/v1/namespaces/{namespace}/pods/{name}/log": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {"counter": 2}, "/apis/apps/v1beta1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/replicationcontrollers": {"counter": 2}, "/api/v1/namespaces/{namespace}/podtemplates": {"counter": 2}, "/apis/batch/v2alpha1/": {"counter": 3}, "/apis/settings.k8s.io/v1alpha1/": {"counter": 3}, "/apis/extensions/v1beta1/": {"counter": 3}, "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {"counter": 2}, "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {"counter": 2}, "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/": {"counter": 3}, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {"counter": 2}, "/apis/": {"counter": 3}, "/api/v1/": {"counter": 3}, "/api/v1/namespaces/{name}": {"counter": 10}, "/api/v1/nodes": {"counter": 1}, "/apis/authentication.k8s.io/v1/": {"counter": 3}, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {"counter": 2}, "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {"counter": 2}, "/api/v1/namespaces/{namespace}/serviceaccounts": {"counter": 8}, "/apis/authorization.k8s.io/v1beta1/": {"counter": 3}, "/apis/autoscaling/v2beta2/": {"counter": 3}, "/apis/apps/v1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/batch/v1beta1/": {"counter": 3}, "/api/": {"counter": 3}, "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {"counter": 2}, "/apis/rbac.authorization.k8s.io/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/resourcequotas": {"counter": 2}, "/apis/apps/v1/": {"counter": 3}, "/apis/scheduling.k8s.io/v1beta1/": {"counter": 3}, "/apis/certificates.k8s.io/v1beta1/": {"counter": 3}, "/apis/authentication.k8s.io/v1beta1/": {"counter": 3}, "/apis/apps/v1/namespaces/{namespace}/deployments": {"counter": 2}, "/apis/apps/v1beta2/": {"counter": 3}, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {"counter": 2}, "/apis/storage.k8s.io/v1/": {"counter": 3}, "/apis/autoscaling/v1/": {"counter": 3}, "/apis/apiextensions.k8s.io/v1beta1/": {"counter": 3}, "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {"counter": 2}, "/apis/autoscaling/v2beta1/": {"counter": 3}, "/apis/batch/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/secrets": {"counter": 4}, "/apis/events.k8s.io/v1beta1/": {"counter": 3}, "/apis/storage.k8s.io/v1beta1/": {"counter": 3}, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {"counter": 2}, "/apis/apiregistration.k8s.io/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/configmaps": {"counter": 2}, "/api/v1/namespaces/{namespace}/services": {"counter": 2}, "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {"counter": 2}, "/apis/apps/v1/namespaces/{namespace}/statefulsets": {"counter": 2}, "/apis/scheduling.k8s.io/v1alpha1/": {"counter": 3}, "/apis/admissionregistration.k8s.io/v1beta1/": {"counter": 3}, "/apis/apiregistration.k8s.io/v1beta1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/pods/{name}": {"counter": 5}, "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {"counter": 2}, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {"counter": 2}, "/apis/authorization.k8s.io/v1/": {"counter": 3}, "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {"counter": 2}}}}, "tags": ["[k8s.io]", "[NodeConformance]", "[Conformance]", "[sig-storage]", "[sig-api-machinery]", "[sig-cli]", "[Slow]", "[sig-network]", "[sig-apps]", "[StatefulSetBasic]", "[sig-auth]", "[Serial]", "[sig-scheduling]", "[sig-node]", "[Projection]"]}, "unknown_methods": []}