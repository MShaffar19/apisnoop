#+NAME: APISnoop WebUI
#+AUTHOR: Zach Mandeville
#+EMAIL: zz@ii.coop
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(i) | DONE(d) DONE-AND-SHARED(!)
#+PROPERTY: header-args :dir (file-name-directory buffer-file-name)
#+XPROPERTY: header-args:shell :results silent
#+XPROPERTY: header-args:shell :exports code
#+XPROPERTY: header-args:shell :wrap "SRC text"
#+PROPERTY: header-args:tmate :socket "/tmp/.zz-left.isocket"
#+PROPERTY: header-args:tmate :session api:main

* Introduction
  This is a web-based visual interface to the data curation and manipulation we are doing as the APISnoop project.  The purpose is to display previously unseen connections between the testing coverage of kubernetes, and the people and communities these various parts of kubernetes matter to.
** Reimagining how the web app is built.
   At this point, the work here is a proof of concept refactoring of the orignal site, to make our structure more extensible and modular.  When new work is done with the dating processing, we want to be able to quickly visualize the results of this work for others.  The current site is static html, with each new section intentionally and manually hard-coded. Whenever we want to make a change to the site (like adding a new dataset), it requires going into the html file, finding the right section, and adding a new element.  We have to keep a mental map of every aspect of the site this new dataset should influence and update those accordingly.  Not only is this time-consuming, it's error-prone and hard to maintin.

   At the same time, there was a good amount of work done by the team to get to the current site, and that work should be preserved as much as possible.  The goal of this refactor, then, is to re-make the original site to then build incredible things beyond and above it.
http://uber.github.io/react-vis/documentation/other-charts/sunburst-diagram
** Setting It up On Your own
*** Setup Backend
 after cloning repository
- cd apisnoop/backend
- npm install
- Make sure we have a jsons folder in apisnoop/backend with this tree structure:
#+RESULTS: File Structure
:RESULTS:
.
├── release
└── sunbursts

2 directories
:END:
#+NAME: File Structure
#+BEGIN_SRC shell :dir ./backend/jsons :results output raw drawer
tree -d
#+END_SRC
- Delete all .db's from src/data/
- npm start
- email zz@ii.coop with full error output and a coupon for soda.

*** Setup Client
    When backend server is on:
    - cd apisnoop/client
    - npm install
    # - figure out how to point to subheadings
    - go to [[Client/Actions/index.js]]   and change the client here to be whatever site you have this on (localhost or apisnoop)
    - npm start

* Architecture
The site will be made to have a distinct front-end and backend, with the front-end able to be ported over to any other backend.
The front-end will consist of multiple components that wait to be told what data to display, instead of being written as part of the component.  In this way, if we want to make changes to our 'SIG Tag Bubble', we can just find the component named that and make changes there, instead of trying to find/replace the code within the file.
** FRONTEND
The frontend will be made with React, Redux, maybe Saga, and Tachyons, and Axios
*** Why React?
    [[https://reactjs.org/][React]] is the most well-known and supported front-end framework among my dev friends in Wellington, and is widely used and respected globally.  It was created originally by Facebook and then made open-source.  So it has a tremendous amount of support around it and good video tutorials for learning it.  I find it to be a bulky and kinda clumsy framework (which is why the first version of this used my personal fave Choo instead), but felt it was good to pick one that more people knew (and could help with).

*** Why Redux?
   [[https://redux.js.org/][Redux]]  provides one global 'state' for the app, and makes React actually usable.  It will help us push the data appropriately to the right parts and keep things clean and efficient.

*** AXIOS
   [[https://www.npmjs.com/package/axios][Axios]] is a simple tool for handling http requests across different servers.  We'll need this for the client to be portable, and able to call to multiple API's (our backend plus github for example).
*** Why Saga?
   [[https://redux-saga.js.org/][Saga]] helps us with api calls and redux.  Redux likes pure clean objects sent to the store right away.  API calls don't work like that, and so Saga does the call and then sends the results to Redux.  It's working as a side effect.

*** Why Tachyons?
    Tachyons is a css framework for writing functional CSS.  It's a much different approach to CSS, but it's one that matches a unix philosophy and is super easy to spin things up and maintain them.  AS we make changes, we don't have to worry that some class hidden deep in some css file causes our whole site to look weird.  Instead, every class has a single purpose, and you add multiple classes to a site to add-upon and combine each of these classes functions (like piping commands together on the command line).  This makes all our components //reusable// too, as we only need to copy over the code and not any stylesheet attached to the code.
** BACKEND
   For the backend we will be using Feathers //for right now//.  We may find that we want something completely different, or that we want our webui to be able to live in multiple places.  Our goal is for the two to be entirely separate, so either can change if needed.
*** Feathers
    [[https://feathersjs.com/][Feathers]] is a well-designed and well-documented api layer written in Node.  It has good support among my Wellington dev friends, and so I have better help if I encounter any sorta problem.  It also is just really pleasant to use so far, with a good model for how to create different services.  It also has an existing React connector.
**** Feathers Resources
***** [[https://www.youtube.com/playlist?list=PLwSdIiqnDlf_lb5y1liQK2OW5daXYgKOe][youtube channel]]
***** [[https://stackoverflow.com/questions/tagged/feathersjs][stackoverflow tag]]
***** [[https://github.com/issues?utf8=%25E2%259C%2593&q=is%253Aopen+is%253Aissue+user%253Afeathersjs+][github page]]
***** [[https://blog.feathersjs.com/][medium page]]
***** [[http://slack.feathersjs.com/][slack channel]]

** Our Current Flow
   I would like to document the current setup, to make sure I can reason about it.

  We will have a site listed anywhere, for now it's localhost so we'll call it LH.

  We want to know which commits(?) of kubernetes should have conformance tests made for them, this is handled in a config.yaml file in kubernetes test-infra folder on github.

 The log of their tests is found in the artifacts of the latest build of the test found in gcsweb.k8s.io.  We need to know the exact url to ping for gcs to return any proper info for us.


And so we grab the config info from github and parse its contents looking for commits that we are intersted in (like all gce-conformance commits).  Then, we take a look at the test_group_name for each commit and use that info to parse the config file again.  Each test group name has a GCS_Prefix, which gives us the url path we can ping with gcsweb.io

So let's say there's a commit called 'commmit1.2'.  This commit has a test_group_name of 'foo_test'.  That test_group has a prefix of '/jenkins/tests/log/foo_test'.  This means we can go to gcsweb.io/gcs/jenkins/tests/log/foo_test and get more information about this particular test group.

That information is a bit of an overload though.  It has folders for all the builds along with a text file that contains a number that is the latest build.  so in foo_test we'd see a bunch of folders named "100, 101, 102, 103" plus "latest-build.txt".  Clicking on latest-build.txt gives us something like: '103', which we know means we should look in folder 103 for all the relevant stuff.

The txt file, though just a number, isn't stored on gcsweb.io.  It's actually stored at 'storage.googleapis.com'.  So trying to grab gcsweb.io/$GCS_PREFIX/latest-build.txt will give us a redirect.  If we grab that number, following the path of that latest build folder leads us to a url of something like:
http://gcsweb.k8s.io/gcs/kubernetes-jenkins/logs/foo_test-1-12/187/artifacts/bootstrap-e2e-master/

there's also different bootstrap folders beyond master for many of these.

Then, inside //this// folder would be some audit-logs.  These logs are what we are REALLLY looking for, as they have the data we want to visualize.


This means, though, that when we start up the app we need to ping github and with the converted response from that ping gcsweb.k8s.io and with the response from that site ping gcsweb again but at a specific url, looking for a specific type of file and with the response of that get a big buffer of text that we try to convert into json so that we can feed it into our components.


I feel like this is a tremendous amount to put onto a webpage upon first loading, and that there's a number of errors that could come up.  How much of this can be done by our server so it's at the ready when the page loads up.

For example: I can't imagine the config.yaml file updates /aaaalll/ that much.  If we have something that is current to the latest day, or even yesterday, would that be okay?  And if that's okay, is there a way we could pull the yaml file and add it to our database so we'd have something like:
- ourserver.com/dashboards
- ourserver.com/test_groups
- ourserver.com/commits
and each of these we could ping instead to get the info we want?  Then we aren't doing real-time conversion of a blob into a string into yaml into json---it's just ready for us.

In the same way, is there anyway we can parse our own api and grab the audit logs we need, and have them converted into json for us to parse.  So the web page loads, pings our server, finds the audit logs, and renders them.....That might be redundancy though, since they //are// already available on a server at gcsweb.  It just takes us some loops to figure out where.

The question I have, ultimately, is how much should be handled by the client and how much should be pre-requested/filtered/converted by the server before the client latches on---and whether there's a simpler way to do what we're trying to do.

* Backend
** Setting up our API Initially
**** Generating the Services
     We will be using the processed data provided by the audit-log review to generate an api path for us to traverse.  Each build will have its own data, which will include the tags in it, the agents in it, and a sunburst path.
** Services
   (**NOTE**: for each service, make sure paginate is turned off.  In the future I should do this automatically.)
*** Introduction

Services refer to the different paths of our api, and the various jobs and manipulation we do to the data being fed through these paths.  They act as gatekeeepers to our various db's, so we aren't doing a bunch of db queries from all over the code and potentially causing strange behavior and hard to track errors.  Throug these, we have a consistent and reliable way to ask for and give data to our server: talk to the relevant service and have them do the work for you.

We generate a service using feathers cli.  This creates a number of files for us and makes sure the service is known to the entire backend.  Which is to say that there will be a number of file changes made when we make a new service, but the files within this section only refer to the core code we are writing.
**** Service Definitions
   We have two services now.
 - Config :: Handles the initial setup (reading json files from disk and distributing the file to the proper Releases service, performing any cleanup as necessary).
 - Releases ::  the heart of our data, has all the info we need by release and we use this for our presentational components in the front end..
*** Config
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./backend/src/services/config/config.class.js
    :END:
**** Overall Layout
     #+NAME: config.class.js layout
     #+BEGIN_SRC js
       /* eslint-disable no-unused-vars */
       const fs = require('fs')
       class Service {
         constructor (options) {
           this.options = options || {};
         }

         async setup (app, params) {
           populateReleases(app,'./data/processed-audits')
         }
       }

       <<Define populateReleases>>

       module.exports = function (options) {
         return new Service(options);
       };

       module.exports.Service = Service;
    #+END_SRC

We only have a single method here, which is setup.  We don't want this to be an accessible path, we are just using it to run through commands when the server first starts up.  In this case, we run a command that looks in a directory for processed JSons and puts each file into its own entry in our releases api path.
**** Define populateReleases
     #+NAME: Define populateReleases
     #+BEGIN_SRC js :tangle no
       function populateReleases (app, dir)  {
         var processedAudits = fs.readdirSync(dir)
         for (var i = 0; i < processedAudits.length; i++) {
           var fileName = processedAudits[i]
           var data = fs.readFileSync(`${dir}/${fileName}`, 'utf-8')
           addEntryToService(app, fileName, data)
         }
       }

       async function addEntryToService (app, fileName, data) {
         var service = app.service('/api/v1/releases')
         var name = fileName.replace('-processed-audit.json', '')
         var json = JSON.parse(data)
         var existingEntry = await service.find({query:{name}})
         if (existingEntry.length === 0) {
           service.create({name: name, data: json})
         } else {
           service.update(existingEntry[0]._id, {name: name, data: json})
         }
       }

     #+END_SRC

     This will read the file and send the data to our releases service, but releaes will reject it by default because some of the fiels in the data have periods and our database does not like that.  So we add a hook to Releases that takes this data given to it and changes it's peirods to underscores before trying to add it to the database.  We generated the hook using feathers/cli, setting it to be before any create or update action...meaning it manipualtes the file BEFORE it is added to the db through CREATE or UPDATE
*** Releases
    The file that handles this service is boilerplate feathers, so we will use this section to write and discuss the hooks used as part of the releases service.
**** cleanReleaseData
     :PROPERTIES:
     :header-args: :noweb yes :tangle ./backend/src/hooks/clean-release-data.js
     :END:
    #+NAME clean-release-data.js
    #+BEGIN_SRC js
      const _ = require('lodash')

      module.exports = function (options = {}) {
        return async context => {
          var data = context.data.data
          data = cleanUp(data)
          context.data = {name: context.data.name, data: data}
          return context;
        }
      }

      function cleanUp (obj) {
        var cleanObj = {}
        for (key in obj) {
          if (_.isPlainObject(obj[key])) {
            cleanObj[key.replace(/\./g,'_')] = cleanUp(obj[key])
          } else {
            cleanObj[key.replace(/\./g,'_')] = obj[key]
          }
        }
        return cleanObj
      }
    #+END_SRC

* Client
  :PROPERTIES:
  :header-args: :dir ./client
  :END:
  The client will be all the files that bundle up into a bundle.js file that is called on our index.html page.  In other words, the FRONTEND
** Running the Client
 In the web ui folder:
===
cd client
npm install
npm start
===
Then navigate to localhost:3000, if it isn't already opened for you.
** File Structure

   Our client is set up as so...
   #+NAME: Our Directory Structure
   #+BEGIN_SRC shell :dir ./client :results output verbatim drawer replace
  tree  -I 'node_modules' -d
   #+END_SRC

   #+RESULTS: Our Directory Structure
   :RESULTS:
   .
   ├── build
   │   └── static
   │       └── js
   ├── public
   └── src
       ├── actions
       ├── components
       ├── css
       ├── pages
       ├── reducers
       └── sagas

   11 directories
   :END:

   The core work is done in the src folder. Public holds our stylesheets and assets, and build holds everything when we set it up for production.

Within our Src, file:
- Actions manage calls to the app's state, requesting new data.
- Components are modular parts of our UI, like dropdown boxes and navbars and such.
- Pages are collections of components that display based on the route of the site and the actions of the user.  They are similar to html pages.
- reducers listens to actions and the payload of data they contain and reducer that data into a single state tree for the app.  This is the data being called upon in the components.
- Sagas are not being used yet.
** Setup
*** Creation
**** initial react app
     We are going to use the default app style (because we want this to be familiar to others), and luckily there's an npm module to create react apps for us to do just that!
     #+NAME: Create React App
     #+BEGIN_SRC sh :dir ./client :results output
       npx create-react-app client
     #+END_SRC
     #+RESULTS: Create React App
**** dependencies
     :PROPERTIES:
     :header-args: :noweb yes :dir ./client
     :END:
    We want to add some adaptors for react to use redux //and// feathers //and// tachyons
    #+NAME: install dependencies
    #+BEGIN_SRC shell :results output verbatim drawer
      npm install --save \
          @feathersjs/client \
          feathers-localstorage \
          feathers-redux \
          react-dom \
          react-redux \
          react-router \
          react-router-redux \
          react-router-dom \
          redux \
          redux-thunk \
          redux-devtools-extension \
          redux-saga \
          superagent \
          d3
    #+END_SRC

    #+RESULTS: install dependencies
    :RESULTS:
    + react-dom@16.5.2
    + react-router@4.3.1
    + feathers-localstorage@3.0.0
    + react-redux@5.0.7
    + redux@4.0.0
    + superagent@4.0.0-beta.5
    + redux-saga@0.16.0
    + react-router-redux@4.0.8
    + @feathersjs/client@3.7.3
    added 11 packages from 11 contributors, updated 5 packages and audited 14613 packages in 12.257s
    found 0 vulnerabilities

    :END:
**** file structure
     Within our client we want to manage our various components, the actions they can call upon, and the reducers that turn all these actions into a single state of the app. These dont' come with the basic react app, so we'll create them.
     We also want to delete any of the default react icons or CSS stuff and move our App.js into a component (cos that's what it is.
     #+BEGIN_SRC sh :results output
       cd src
       rm App.css index.css logo.svg
       mkdir components actions reducers sagas
       mv App.js components
       cd ..
       tree -I 'node_modules'
     #+END_SRC
     #+RESULTS:
     #+begin_example
     .
     ├── README.md
     ├── package-lock.json
     ├── package.json
     ├── public
     │   ├── favicon.ico
     │   ├── index.html
     │   └── manifest.json
     ├── src
     │   ├── App.test.js
     │   ├── actions
     │   ├── components
     │   │   └── App.js
     │   ├── index.js
     │   ├── reducers
     │   ├── registerServiceWorker.js
     │   └── sagas
     └── yarn.lock

     5 directories, 11 files
     #+end_example

*** Adding Tachyons
    We want to bring tachyons right into our app, installing it through node.  This way we have full access to the css library without relying on outside links and this library is as up-to-date as possible(or rather, v. easy to stay up to date.)  I am following the guide for react that tachyons listed[[https://github.com/tachyons-css/tachyons-and-react][ on their github page.]]
**** Install Tachyons and Sheetify
     I wont' be using sheetify right now, but the goal is to use it upon a refactor (when we've moved away from webpack to browseriy)
     #+NAME: Install Tachyons
     #+BEGIN_SRC shell :dir ./client :results output verbatim drawer
       npm install --save tachyons tachyons-cli sheetify
     #+END_SRC

     #+RESULTS: Install Tachyons
     :RESULTS:
     + tachyons-cli@1.3.2
     + tachyons@4.11.1
     + sheetify@7.3.3
     added 31 packages from 18 contributors, updated 2 packages, moved 3 packages and audited 20856 packages in 29.843s
     found 1 low severity vulnerability
       run `npm audit fix` to fix them, or `npm audit` for details
     :END:
**** Find Home for CSS
     #+NAME: Find Home for CSS
     #+BEGIN_SRC shell :dir ./client/src :results output verbatim drawer
       mkdir css
       echo '@import "tachyons"' > css/app.css
       tree css
     #+END_SRC

     #+RESULTS: Find Home for CSS
     :RESULTS:
     css
     └── app.css

     0 directories, 1 file
     :END:
**** Add CSS scripts
 I'll add a couple additions to our package.json (this is best outlined in the github link)
** index.js
   :PROPERTIES:
   :header-args: :noweb yes :tangle ./client/src/index.js
   :END:
   The entry point of the app.  This is what gets mounted to our index.html page, and then leads us into the rest of the frontend.  So we want to make a nice package to mount that has our redux store and our react app bundled up together.
*** Requirements
    #+NAME: Requirements
    #+BEGIN_SRC js
      import React from 'react'
      import ReactDOM from 'react-dom'
      import { BrowserRouter } from 'react-router-dom'
      import './index.css'

      import {Provider} from 'react-redux'

      import App from './components/App'
      import store from './store.js'
      import registerServiceWorker from './lib/service-workers'

    #+END_SRC
*** index mounted to dom.
Here we define the wrapped up chunk of code that will be mounted to the 'root' id in our index.html page, and flower into the full app
#+NAME: main index.js
#+BEGIN_SRC js
  ReactDOM.render(
      <BrowserRouter>
      <Provider store={store}>
      <App />
      </Provider>
      </BrowserRouter>,
    document.getElementById('root')
  )
    registerServiceWorker()
#+END_SRC
** Our App(app.js)
   :PROPERTIES:
   :header-args: :noweb yes :tangle ./client/src/components/App.js
   :END:
***** Introduction
    The app component is often seen as the 'layout template' for the frontend.  Anything we want to be displayed at all times should go here (e.g. a header and navbar).  The app component will also handle the navigation between the different components, based on routes given.

    This is a 'single-page-app' which means: to the server, we are only showing a single html page, the index.html.  Within this page we have javascript code running that renders different views dynamically, based on what the site visitor wants to see.  We can give these views the format of a URL, so it appears like we are going to different pages within apisnoop (and so we can share specific urls to others), but it's all really a continually transforming bit of Javascript.
***** Requirements
 I'll dive a bit into the import/requirements section as it sets up a style you see in a lot of React apps.

 We'll start by bringing in React and its Component class-we inherit all the features of this class when we render our own components, which gives them all the power we may not see at first.  We also bring in connect, which will connect our react ui to the front-end's state; which lets us dynamically change what's displayed based on the data being fed it.

We are doing this because we want to have navigation links for the different releases, that will show a sunburst graph per release.  We don't know what these release_names will be though, and so we'll fetch them from the db and dynamically build our navlinks from them.
   #+NAME: Import React
   #+BEGIN_SRC js
     import React, { Component } from 'react'
     import { connect } from 'react-redux'
   #+END_SRC

 Next, we'll bring in react's smart navigation.  These are what make the app appear to be multiple pages.
 #+NAME: import routing and navigation
 #+BEGIN_SRC js
   import { Route } from 'react-router-dom'
 #+END_SRC

 Lastly, we bring in our different pages, which we can navigate between using a nice lil' tab and navlinks..
 #+NAME: import components
 #+BEGIN_SRC js
   import Header from './header'
   import Footer from './footer'
   import MainPage from '../pages/main-page.js'
 #+END_SRC

I think this will end up that we use MainPage multiple times, feeding in props as url params.  So the main page will always show a sunburst graph, and a list of tests to click into, but what data is being fed that is based on the route we are going on.


***** The overall Layout
      The general shape of this template is here:
    #+NAME: App Layout
    #+BEGIN_SRC js
      class App extends Component {
        constructor (props) {
          super(props)
        }

        componentDidMount(){
          this.props.fetchReleaseNames()
        }

        render(){
          return (
            <div id='app'>
              <Header />
              <<Routes>>
              <Footer />
            </div>
          )
        }
      }

      function mapStateToProps (state) {
        return {
        release_names: state.releasesStore.release_names
        }
      }

      export default connect(mapStateToProps, {feetchReleaseNames})(App)
    #+END_SRC

***** the Navlinks

    the navlinks will be visual components that act like standard links;  and so ~exact to~ acts like href.

    #+NAME: Nav Links
    #+BEGIN_SRC js :tangle no
      <div id='nav'>
        <NavLink exact to='/'>Audits</NavLink>
      </div>
    #+END_SRC
***** the Routes
    The routes listen to the paths chosen by nav and routes to the correct component.  So the components don't show unless the url path matches their route.
    #+NAME: Routes
    #+BEGIN_SRC js :tangle no
        {/* <Route exact path='/' component={MainPage} /> */}
    #+END_SRC
** Pages
   We are following a convention where, if a component acts as its own route and holds many different components within it, then it's called a page.  Think of navigating between different pages in a site, and each one is made up of several diff. section.  It is the same here, just that we are navigating between JS dispalying different Page components.
*** MainPage
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./client/src/pages/main-page.js
    :END:
    This will hold all the names taken from conformance-gce dashboard_tab.name
      #+BEGIN_SRC js
        import React, { Component } from 'react'
        import { connect } from 'react-redux'

        import { fetchReleases, fetchReleaseNames } from '../actions/releases-actions.js'
        import SunburstSegment from '../components/sunburst-segment'

        class MainPage extends Component {
          constructor(props) {
              super(props)
              this.state = {
                main_release_name: ''
              }
          }
          componentDidMount() {
            this.props.fetchReleaseNames()
          }

          render(){
            var mainRelease = this.props.main_release
            return (
                <main id='main-splash' className='min-vh-100'>
                {/* {this.props.releases.length !== 0 && <SunburstSegment version={mainRelease.name} release={mainRelease.data}/>}
                  <h2>Number of Sunbursts: {this.props.releases.length}</h2> */}
                </main>
            )
          }
        }

        function mapStateToProps (state) {
          return {
            releases: state.releasesStore.releases,
            names: state.releasesStore.names,
            main_release: state.releasesStore.main_release,
            userAgents: state.releasesStore.useragents
          }
        }

        export default connect(mapStateToProps, {fetchReleases, fetchReleaseNames})(MainPage)
      #+END_SRC

      #+RESULTS:

** Components
The various visual parts of the app.  For the most part, we want these to be as dumb as possible--they present the stuff they're given, and if they have to do any interactive stuff it remains contained to within itself.  Any other changes should be handled outside of the component through actionCreators our and reducer updating the global state of the app.  In other words, the components display the state as it is now, and they can trigger events which update the state, but they always simply display it as it is now.
*** Header
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./client/src/components/header.js
    :END:
    The classic APISnoop header, rendered in short and sweet tachyons
    #+NAME: Header
    #+BEGIN_SRC js
      import React from 'react'

      export default () => (
          <header className='flex flex-row pt2 pb2 pl4 pr4 items-center justify-between bg-light-gray black shadow-3'>
            <div id='logo' className= 'flex flex-wrap items-center'>
            <img className='h2' src='./apisnoop_logo_v1.png' alt='logo for apisnoop, a magnifying glass with a sunburst graph inside.' />
            <h1 className='ma0 f4 fw4 pl2 avenir'>APISnoop</h1>
            </div>
            <div id='source-code' className='flex items-center'>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fillRule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
              <a href='https://github.com/cncf/apisnoop' title='github repo for apisnoop' className='link f7 pl1'>Source Code</a>
            </div>
          </header>
      )
    #+END_SRC

    #+RESULTS: Header

*** Footer
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./client/src/components/footer.js
    :END:
    The classic APISnoop header, rendered in short and sweet tachyons
    #+NAME: Header
    #+BEGIN_SRC js
      import React from 'react'

      export default () => (
          <footer className='flex flex-row pt2 pb2 pl4 pr4 items-center justify-between bg-black black shadow-3'>
            <div id='logo' className= 'flex flex-wrap items-center'>
            <img className='mw2' src='./apisnoop_logo_v1.png' alt='logo for apisnoop, a magnifying glass with a sunburst graph inside.' />
            <h1 className='ma0 f4 fw4 pl2 avenir'>APISnoop</h1>
            </div>
            <div id='source-code' className='flex items-center'>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fillRule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
              <a href='https://github.com/cncf/apisnoop' title='github repo for apisnoop' className='link f7 pl1'>Source Code</a>
            </div>
          </footer>
      )
    #+END_SRC

    #+RESULTS: Header

*** Sunburst
**** Sunburst Segment
     :PROPERTIES:
     :header-args: :noweb yes :tangle ./client/src/components/sunburst-segment.js
     :END:
     This is the section of the site dedicated to the sunburst, including any additional text we want to include or a nice header or anything like that.
     #+NAME: Sunburst Segment
     #+BEGIN_SRC js
       import React, { Component } from 'react'
       import SunburstChart from './sunburst-chart'
       import { connect } from 'react-redux'

       import ReleasesList from './releases-list'

       class SunburstSegment extends Component {
         constructor (props) {
           super(props)
         }

         componentDidMount(){
         }

       render() {
         var mainRelease = this.props.main_release
         const sunburst = mainRelease.data.sunburst
         const selectedAgents = this.props.selected_agents
         const endpoints = this.props.release.endpoints
         return (
             <div id='sunburst-segment' className='bg_washed-red pa4'>
             <h2>{this.props.version} Sunburst Graph (a visual chart)</h2>
             <SunburstChart
               release={this.props.version}
               sunburst={sunburst}
               endpoints={endpoints}
             />
             <ReleasesList context='Releases' options={this.props.names} selected={[mainRelease.name]} />
           </div>
         )
       }
       }

       function mapStateToProps (state) {
         return {
           releases: state.releasesStore.releases,
           names: state.releasesStore.names,
           main_release: state.releasesStore.main_release,
           selected_agents: state.releasesStore.selected_agents
         }
       }

       export default connect(mapStateToProps)(SunburstSegment)
     #+END_SRC
     #+NAME: Sunburst Segment- original
     #+BEGIN_SRC js :tangle no
       import React, { Component } from 'react'
       import SunburstChart from './sunburst-chart'
       import { connect } from 'react-redux'

       import FiltersList from './filters-list'
       import ReleasesList from './releases-list'

       class SunburstSegment extends Component {
         constructor (props) {
           super(props)
         }

         componentDidMount(){
           var uaKeys = Object.keys(this.props.main_release.data.useragents).map(key => {
             return key.replace(/[\[]]/g,'').replace(/_/g,'.')
           })

           var ttKeys = Object.keys(this.props.main_release.data.test_tags).map(key => {
             return key.replace(/[\[\]]/g,'').replace(/_/g,'.')
           })
         }

       render() {
         var mainRelease = this.props.main_release
         var userAgents = Object.keys(mainRelease.data.useragents)
         var testTags = Object.keys(mainRelease.data.test_tags)
         const sunburst = mainRelease.data.sunburst
         const selectedAgents = this.props.selected_agents

         var hasAgents = (release) => {
           if (Object.keys(release).length > 0) {
             var keys = Object.keys(release.data.useragents).filter(key => key !== '')
             return keys.length > 0
           }
           return false
         }
         var ise2e = (selectedAgents) => {
           var arrWithe2e = selectedAgents.filter(selected => {
             return selected.includes('e2e_test')})
           return arrWithe2e.length > 0
         }

         const endpoints = this.props.release.endpoints
         console.log({userAgents, selectedAgents, state_user_agents: mainRelease.data.useragents})
         return (
             <div id='sunburst-segment' className='bg_washed-red pa4'>
             <h2>{this.props.version} Sunburst Graph (a visual chart)</h2>
             <SunburstChart
               release={this.props.version}
               sunburst={sunburst}
               endpoints={endpoints}
             />
             <ReleasesList context='Releases' options={this.props.names} selected={[mainRelease.name]} />
              {(hasAgents(mainRelease)) &&
               <FiltersList
                 context={'User Agents'}
                 options={userAgents}
                 selected={selectedAgents}
               />}
           {ise2e(selectedAgents) &&
            <FiltersList
            context={'Test Tags'}
            options={testTags}
            selected={selectedAgents}
            />}
           </div>
         )
       }
       }

       function mapStateToProps (state) {
         return {
           releases: state.releasesStore.releases,
           names: state.releasesStore.names,
           main_release: state.releasesStore.main_release,
           selected_agents: state.releasesStore.selected_agents
         }
       }

       export default connect(mapStateToProps)(SunburstSegment)
     #+END_SRC

     #+RESULTS: Sunburst Segment
**** SunburstChart
     :PROPERTIES:
     :header-args: :noweb yes :tangle ./client/src/components/sunburst-chart.js
     :END:
***** Introduction
     We will be using react-vis' basic sunburst example as our guide for this, as it is the closest to what we want.  Our goal is to add in zoom animation and percentages in the center area, but for now let's just get this loading.

    Use code layout to see how it all fits, then check out each thing in specifics in the headers below.
***** Import Modules
      The example uses extended discrete color range and label series, and both are referencing something with the files themselves.  I believe that we can just use labelseries since we are bringing in sunburst from react-vis, and the theme was just to help make the fill, which we can use with other colors instead.

     We'll bring in the flareData and Sample Data to try switching between the two.
      #+NAME: Import Modules
      #+BEGIN_SRC js :tangle no
        import React, { Component } from 'react';
        import { connect } from 'react-redux'
        import { Sunburst, LabelSeries } from 'react-vis'
        import * as _ from 'lodash'
      #+END_SRC
***** Code Layout
      #+NAME: Code Layout
      #+BEGIN_SRC js
        <<License>>
        <<Import Modules>>

        <<Set Styling for Label>>
        <<Mapping Of Step Names To Colors>>

        class BasicSunburst extends Component {
            <<SB Setup Constructor>>
            <<SB Define componentDidMount>>
            <<Define getKeyPath>>
            <<Define updateData>>
            <<Define getDetails>>
            render() {
              const {clicked, data, finalValue, pathValue} = this.state
              const updateData = this.updateData
              const decoratedData = this.decoratedData
              const getKeyPath = this.getKeyPath
              return (
                  <div className='basic-sunburst-wrapper'>
                  <div className='basic-sunburst-example-path-name h2'>{pathValue}</div>
                  <Sunburst
                  className='basic-sunburst-example'
                  hideRootNode
                  <<SB onValueMouseOver>>
                  <<SB onValueMouseOut>>
                  onValueClick={()=> this.setState({clicked: !clicked})}
                  style={{
                    stroke: '#ddd',
                    strokeOpacity: 0.3,
                    strokeWidth: '0.5'
                  }}
                  colorType="literal" // a style for react-vis. literal means 'literally the color palette given'
                  getSize={d => d.size} // d refers to data, will need to be set differently for audit log
                  getColor={d => d.color}  // same
                  data={data} // Make sure you're actually providing data to the chart!
                  height={900}
                  width={1000}
                  >
                  <<SB Display Center finalValue>>
                  </Sunburst>
                  <<SB Click/Unclick Indicator>>
                  </div>
              )
            }
        }

        function mapStateToProps (state) {
          return {
          }
        }

        export default connect(mapStateToProps)(BasicSunburst)
      #+END_SRC

      #+RESULTS: Code Layout
***** Mapping Of Step Names To Colors
      #+NAME: Mapping Of Step Names To Colors
      #+BEGIN_SRC js :tangle no
        var colors = {
          'alpha': '#e6194b',
          'beta': '#0082c8',
          'stable': '#3cb44b',
          'unused': '#ffffff'
        }

        var categories = [
          "admissionregistration",
          "apiextensions",
          "apiregistration",
          "apis",
          "apps",
          "authentication",
          "authorization",
          "autoscaling",
          "batch",
          "certificates",
          "core",
          "events",
          "extensions",
          "logs",
          "networking",
          "policy",
          "rbacAuthorization",
          "scheduling",
          "settings",
          "storage",
          "version"
        ]

        var more_colors = [
          "#b71c1c", "#880E4F", "#4A148C", "#311B92", "#1A237E", "#0D47A1",
          "#01579B", "#006064", "#004D40", "#1B5E20", "#33691E", "#827717",
          "#F57F17", "#FF6F00", "#E65100", "#BF360C", "#f44336", "#E91E63",
          "#9C27B0", "#673AB7", "#3F51B5", "#2196F3", "#03A9F4", "#00BCD4",
          "#009688", "#4CAF50", "#8BC34A", "#CDDC39", "#FFEB3B", "#FFC107",
          "#FF9800", "#FF5722"
        ]

        for (var catidx = 0; catidx < categories.length; catidx++) {
          var category = categories[catidx]
          colors['category.' + category] = more_colors[(catidx * 3) % more_colors.length]
        }

      #+END_SRC

***** License
      #+NAME: License
      #+BEGIN_SRC js :tangle no
        // Copyright (c) 2016 - 2017 Uber Technologies, Inc.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a copy
        // of this software and associated documentation files (the "Software"), to deal
        // in the Software without restriction, including without limitation the rights
        // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        // copies of the Software, and to permit persons to whom the Software is
        // furnished to do so, subject to the following conditions:
        //
        // The above copyright notice and this permission notice shall be included in
        // all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        // THE SOFTWARE.
      #+END_SRC
***** Set Styling For Label
      This will be used for our LabelSeries later, defining how it should look.
      #+NAME: Set Styling for Label
      #+BEGIN_SRC js :tangle no
        const LABEL_STYLE = {
          fontSize: '20px',
          textAnchor: 'middle'
        }
      #+END_SRC
      It's written in the JSX style, so it's equal to a div having a 'style='font-size: 8px;', but in reactLand you can't just have the equal things be equal...we gotta do this camelCase stuff.
***** Setup Constructor
      #+NAME: SB Setup Constructor
      #+BEGIN_SRC js :tangle no
        constructor(props) {
          super(props)
          this.state = {
            pathValue: false,
            data: {},
            finalValue: 'Sunburst',
            clicked: false
          }
          this.decoratedData = {}
          this.getDetails = this.getDetails.bind(this)
          this.updateData = this.updateData.bind(this)
          this.getKeyPath = this.getKeyPath.bind(this)
        }


      #+END_SRC

      The constructor sets up the component-specific state; which helps us contain all the function and data within the component  itself.  So we set up the state for the component with the following values:
- pathValue :: When you hover over a node, shows the path you took to get to that node.  Will end up being the array created by getKeyPath joined together into a string.
- data :: the data given to us by our store.  Right now it is flareData, but it will one day be a specific build.
- finalValue :: the name of the node you are on, essentially.  For the path it took through the url's to get to this node.  So this could be our literal endpoints.
- clicked :: true/false on whether we've clicked to lock our current node path.

We have to do some kinda verbose binding of our functions.  The point of this is so we can have this function show multiple times throughout the page and not have the results leak out into other components, it prevents bugs and strange behavior, essentially.
***** Define componentDidMount
      #+NAME: SB Define componentDidMount
      #+BEGIN_SRC js :tangle no
        componentDidMount() {
          var sunburst = this.props.sunburst
            this.decoratedData = this.updateData(sunburst, false)
            this.setState({
              data: this.decoratedData,
              finalValue: this.props.release
            })
        }
      #+END_SRC

      We don't want to hard-code the state of our component based on props, because then if the props change, the component itself doesn't.  Instead, we mount it on the page, and then update the state based on the props given.  This ensures that the component will always appear properly.  So here we are saying, "When the graph appears, take the props given to us by our state (the flareData) and decorate it.  Then, set the data in our state to this new decorated data.  The sunburst component renders whatever is in this.state.data, and so it will render now the json from our store.

      This is a common pattern with react components.  Let the initial state be a fairly solid thing, that then gets set again by actions after its already been mounted.

***** Define getKeyPath
        #+NAME: Define getKeyPath
        #+BEGIN_SRC js :tangle no
          /**
           ,* Recursively work backwards from highlighted node to find path of valid nodes
           ,* @param {Object} node - the current node being considered
           ,* @returns {Array} - an array of strings describing the key route to teh current node.
           ,*/

          getKeyPath (node) {
            if (!node.parent) {
              return ['root']
            }

            return [(node.data && node.data.name) || node.name].concat(
              this.getKeyPath(node.parent)
            )
          }
        #+END_SRC

        This tree map is tracing the path of nodes through the JSON tree, like tracing the url path of a singular webpage within a website.  This is the function that defines this path.

        IT does so recursively.  For each node it asks, 'do you have a parent?' if it doesn't we know it's root and we'll return 'root.'   If it does, we will return the node's name and its' data (or just its name if no data is available).  Then, we'll [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat][concatenate]]  this array to whatever array is returned when we apply the same function to this node's parent.  So we'll end up with an array of strings, where each one is chained as a parent to the one before.

        This is explained well in the code example too, so we keeping it.
***** Define updateData
     #+NAME: Define updateData
     #+BEGIN_SRC js :tangle no
       updateData (data, keyPath, parent=false) {
         if (data.children) {
           data.children.map(child => this.updateData(child,  keyPath, data))
         }
         // add a fill to all the uncolored cells
         if (!data.color) {
           var color = colors[data.name]
           if (!color) {
             data.style = { fill: 'lightgray' }
           }
           data.style = { fill: color}
         }
         if (!keyPath) {
           return data
         }
         if (parent && keyPath.length > 1) {
           var lastTwoInPath = [keyPath[keyPath.length - 2], keyPath[keyPath.length - 1]]
           var isActive = (parent, child) => {
             var parentChild = [parent.name, child.name]
             var diff = _.difference(parentChild, lastTwoInPath)
             return diff.length === 0 || parent.length === 1
           }
           data.style = {
             ...data.style,
             fillOpacity: isActive(parent, data) ? 1 : 0.2
           }
           return data
         }
         return data
       }
      #+END_SRC
      #+RESULTS: Define updateData

===
keypath = {
  stable: true,
  rbacAuthorization: true
}

path = ['stable', 'rbacAuthorization']
===
       This takes care of when the graph is first loaded, and upon mouse hover events.  It essentially adds a fill color to each node if it's part of the path we current have our mouse on.
    It's another recursive one, applying the fill at the very bottom and moving up.
 from the sites definition:
    Recursivey modify data depending on whetehr or not each cell has been selected by the hover/hlighlight
    @param {Object} data - the current node being considered
    @param {Object|Boolean} keyPath - a map of keys that are in the highlight path
       //if this is false then all nodes are marked as selected.//
    @returns {Object} Updated tree structure

***** Define getDetails
     #+NAME: Define getDetails
     #+BEGIN_SRC js :tangle no
       getDetails (node) {
         var details = {}
         if (node.children) {
           var deets = _.forEach(node.children, (val, key, child) => this.getDetails(node))
           _.merge(details, deets)
         }
         var halves = node.name.split('/')
         var name = halves[0]
         var method = halves[1]
         _.merge(details, this.props.endpoints[name][method])
         return details
       }
      #+END_SRC
      This is to gather details about the section we are currently hovered upon.  If we are on an endpoint, we can take our details directly from the endpoints entry in api/v1/releases.endpoints.  If we are not on an endpoint, then our information would be a summary of all that hovered area's children.


we can use lodash for this, merging each sections details into one big parent section and then returning that one to the details.

***** Click/Unclick Indicator
      #+NAME: SB Click/Unclick Indicator
      #+BEGIN_SRC js :tangle no
          <div>
          {clicked ? 'click to unlock selection' : 'click to lock selection'}
        </div>
      #+END_SRC

      This checks the component's state, if click is true, then let them know you can unlock selection.  otherwise, let them know they can click to lock.

***** onValueMouseOver
      #+NAME: SB onValueMouseOver
      #+BEGIN_SRC js :tangle no
        onValueMouseOver={(node, dom) => {
          if (clicked) {
            return
          }
          const path = getKeyPath(node).reverse()
          this.setState({
            finalValue: `${node.name}`,
            pathValue: path.join(' > '),
            data: updateData(decoratedData, path)
          })
        }}
      #+END_SRC

      This is a value that is part of the react-vis api.  From that doc, this is a function that accepts (arc node, domEvent) as arguments.  In other words, we'll know the exact node upon which the mouse is over, and all the values given from our browser about that node element.

      We know that getKeyPath returns an array of strings, each subsequent one being the parent of the node string prior.  So here we set the path to being that array reversed, so it goes from root to smallest child.

      pathAsMap, to be honest, I don't fully understand.  It's used to decorate the data, and the data colors up a cell based on each section of the map being true or false.  So It hink it's saying "if this cell is in the path, mark it as true, otherwise it be false".

      Then, we set the state with these values.  finalValue is going to be the last node string in our path and pathValue is going to be the full path outlined like so: 'root > child1 > child2 > lastChild'

      Everytime you set the state with a react Component the whole component rerenders.  We will have things later down that are meant to display the pathVAlue and finalValue...so since we are setting them in the state and rendering the component again it's going to continually update what these show.

***** onValueMouseOut
 #+NAME: SB onValueMouseOut
 #+BEGIN_SRC js :tangle no
   onValueMouseOut={()=>
       clicked
       ? () => {} // an empty function, essentially 'do nothing'
       : this.setState({
         pathValue: false,
         finalValue: false,
         data: updateData(decoratedData, false)
       })
     }
 #+END_SRC

 This is like onValueMouseOver, but handling when we leave the chart.  Clicking locks the arc's position--and so, if it's clicked we do nothing...we keep all the coloring and info as it is as it's locked in place.

 If clicked isn't set, and we've left the chart, then return everything back to nothing.  No finalVAlue, no path that we're on, and update the data so all cells are colored again.

***** Display Center finalValue
      #+NAME: SB Display Center finalValue
      #+BEGIN_SRC js :tangle no
        {finalValue && (
            <LabelSeries
          data={[{x: 0, y: 0, label: finalValue, style: LABEL_STYLE}]}
            />
        )}
      #+END_SRC

      LabelSeries is another component given to us by react-vis.  The data will want to know where the label will be placed, what it should be labelling, and what it should look like.  We are saying 'put it right in the center: x0/y0 and display the final node we are highlighting.'

***** Refactoring
      - i removed animation from the sunburst and it improved its performance quite a bit.  What animation was it trying to do?  Look at react-vis docs.

*** Filter List
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./client/src/components/filters-list.js
    :END:
    #+NAME: filters-list.js
    #+BEGIN_SRC js
      import React, { Component } from 'react'

      class FiltersList extends Component {
        constructor (props) {
          super(props)
          this.optionsList = this.optionsList.bind(this)
        }

        optionsList (options) {
           var formattedNames = options.map(name => {
             return name.replace(/[\[\]]/g,'').replace(/_/g,'.')
           })
          var selected = this.props.selected.map(selection => {
            return selection.replace(/_/g,'.') //.replace(/^/,'[').replace(/$/,']')
          })
          return formattedNames.map(name => {
            console.log({name, selected})
            if (selected.includes(name)) {
              return(
                  <a className="f6 ml1 mr1 grow no-underline br-pill ba ph2 pv2 mb2 dib pink" href="#0" key={`filter_${name}`}>{name}</a>
              )
            } else {
              return (
                  <a className="f6 ml1 mr1 grow no-underline br-pill ba ph2 pv2 mb2 dib silver" href="#0" key={`filter_${name}`}>{name}</a>
              )
            }
          })
        }

          render () {
            console.log({filterProps: this.props})
            return (
                <div className="ph3 mt4">
                <h1 className="f6 fw6 ttu tracked">{this.props.context}</h1>
                {this.optionsList(this.props.options)}
              </div>
            )
          }
        }

        export default FiltersList
    #+END_SRC

   Is expecting:
- context :: a string that determines the header of the list
- selected ::  an array of strings, for the options selected by default
- options :: an array of options we will create buttons for.
*** Releases List
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./client/src/components/releases-list.js
    :END:
    #+NAME: releases-list.js
    #+BEGIN_SRC js
      import React, { Component } from 'react'
      import { connect } from 'react-redux'
      import { chooseNewMain } from '../actions/releases-actions'

      class ReleasesList extends Component {
        constructor (props) {
          super(props)
          this.optionsList = this.optionsList.bind(this)
          this.setNewMain = this.setNewMain.bind(this)
        }
        setNewMain (option) {
          console.log({newMain: option})
        }

        optionsList (options) {
          return options.map(option => {
            if (this.props.selected.includes(option)) {
              return(
                  <a className="f6 ml1 mr1 grow no-underline br-pill ba ph2 pv2 mb2 dib pink" href="#0" onClick={()=> this.props.chooseNewMain(option)} key={`release_${option}`}>{option}</a>
              )
            } else {
              return (
                  <a className="f6 ml1 mr1 grow no-underline br-pill ba ph2 pv2 mb2 dib black" href="#0" onClick={()=> this.props.chooseNewMain(option)} key={`release_${option}`}>{option}</a>
              )
            }
          })
        }

        render () {
          return (
              <div className="ph3 mt4">
              <h1 className="f6 fw6 ttu tracked">{this.props.context}</h1>
              {this.optionsList(this.props.options)}
            </div>
          )
        }
      }

      function mapStateToProps (state) {
        return {}
      }
      export default connect(mapStateToProps, {chooseNewMain})(ReleasesList)
    #+END_SRC

   Is expecting:
- context :: a string that determines the header of the list
- selected ::  an array of strings, for the options selected by default
- options :: an array of options we will create buttons for.
*** Dropdown
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./client/src/components/dropdown.js
    :END:
    reusable dropdown for releases or useragents.
    Will get Two Props:
    - context :: the text before the dropdown, giving context to why they are selecting.
    - options  :: the array fed the e dropdown that it would map over.
    #+NAME: Dropdown
    #+BEGIN_SRC js
      import React, { Component } from 'react'

      class Dropdown extends Component {
        constructor (props) {
          super(props)
          this.optionsList = this.optionsList.bind(this)
          this.selectEnter = this.selectEnter.bind(this)
        }

        selectEnter (dom) {
        }

        optionsList = (options) => {
          return options.map(option => {
            return(
                <li className='ph1 bb bb--dotted b--light-silver bg-white bt-0'>
                <a href={option}
              role='menuitem'
              className='filter-choice w-100 db h2 flex items-center'
                >
                {option}
              </a>
                </li>
            )
          })
        }


        render () {
            return (
                <div className='pa4 f6'>
                <a className="section">{this.props.context}</a>
                <div id='datasets' className='h3 section w-40' >
                <div id='selection-box' role='menubar' aria-haspopup='true'
              className='relative f4 ph1 dib h2 black z-max flex items-center'>
                <span id='select-title'
              className='db tc'
              onMouseEnter={(e) => this.selectEnter(e)}>
                 {this.props.options[0]}</span>


                <ul id='sel-option' role='menu' aria-hidden='true'
                    className=' z-max absolute top2 w-100 pl0 ml0 list center mw6 ba b--dotted bt-0'>
              </ul>
                </div>
                </div>
                </div>
            )
        }
      }

      export default Dropdown
    #+END_SRC

    #+RESULTS: Dropdown

*** Branch Statistics
**** Introduction
     This is pulling from our statistics service, showing top-level things like # of endpoints hit and how many there are in total, and maybe a basic percentage.  In the future, it'd be cool to have each one be clickable and lead to that particular branch.
**** Branch List
     :PROPERTIES:
     :header-args: :noweb yes :tangle ./client/src/components/branch-list.js
     :END:
     #+NAME: Branch List
     #+BEGIN_SRC js
       import React from 'react'

       import BranchCard from './branch-card'

       export default function BranchList ({statistics}) {
         var sortedStats = statistics.sort((a,b) => {
           return a - b
         })

         const list = () => {
           return statistics.map(statistic => {
             return(
                 <BranchCard key={statistic._id} statistic={statistic}/>
             )
           })
         }

         return(
           <div>
             <ul className='list'>
             { list() }
             </ul>
           </div>
         )
       }

     #+END_SRC
**** Branch Card
     :PROPERTIES:
     :header-args: :noweb yes :tangle ./client/src/components/branch-card.js
     :END:
     #+NAME: Branch Card
     #+BEGIN_SRC js
       import React from 'react'

       export default function BranchCard({statistic}) {
         var stat = statistic.data
         var version = (name, version) => {
           return (
             <div>
               <h3>{name}</h3>
               <p className="f6 f5-ns lh-copy measure mv0">
               {percentage(version.total, version.hit)} endpoints hit
             </p>
               <p className="f6 f5-ns lh-copy measure mv0">
               {version.total} Total
             </p>
               <p className="f6 f5-ns lh-copy measure mv0">
               {version.hit} Hit
             </p>
               </div>
           )
         }


         return(
             <li className="center mw5 mw6-ns hidden ba mv4">
             <h2 className="f4 bg-near-black white mv0 pv2 ph3">{statistic.name}</h2>
             <div className="pa3 bt">
             {version('Alpha', stat.alpha)}
             {version('Beta', stat.beta)}
             {version('Stable', stat.stable)}
             </div>
             </li>
         )
         function percentage (total, hit) {
           return ((hit / total) * 100).toFixed(2) + '%'
         }
       }

     #+END_SRC
** Lib
*** Service workers
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./client/src/lib/service-workers.js
    :END:
    #+BEGIN_SRC js
      // In production, we register a service worker to serve assets from local cache.

      // This lets the app load faster on subsequent visits in production, and gives
      // it offline capabilities. However, it also means that developers (and users)
      // will only see deployed updates on the "N+1" visit to a page, since previously
      // cached resources are updated in the background.

      // To learn more about the benefits of this model, read https://goo.gl/KwvDNy.
      // This link also includes instructions on opting out of this behavior.

      const isLocalhost = Boolean(
        window.location.hostname === 'localhost' ||
          // [::1] is the IPv6 localhost address.
        window.location.hostname === '[::1]' ||
          // 127.0.0.1/8 is considered localhost for IPv4.
        window.location.hostname.match(
          /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
        )
      );

      export default function register() {
        if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
          // The URL constructor is available in all browsers that support SW.
          const publicUrl = new URL(process.env.PUBLIC_URL, window.location);
          if (publicUrl.origin !== window.location.origin) {
            // Our service worker won't work if PUBLIC_URL is on a different origin
            // from what our page is served on. This might happen if a CDN is used to
            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374
            return;
          }

          window.addEventListener('load', () => {
            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

            if (!isLocalhost) {
              // Is not local host. Just register service worker
              registerValidSW(swUrl);
            } else {
              // This is running on localhost. Lets check if a service worker still exists or not.
              checkValidServiceWorker(swUrl);
            }
          });
        }
      }

      function registerValidSW(swUrl) {
        navigator.serviceWorker
          .register(swUrl)
          .then(registration => {
            registration.onupdatefound = () => {
              const installingWorker = registration.installing;
              installingWorker.onstatechange = () => {
                if (installingWorker.state === 'installed') {
                  if (navigator.serviceWorker.controller) {
                    // At this point, the old content will have been purged and
                    // the fresh content will have been added to the cache.
                    // It's the perfect time to display a "New content is
                    // available; please refresh." message in your web app.
                    console.log('New content is available; please refresh.');
                  } else {
                    // At this point, everything has been precached.
                    // It's the perfect time to display a
                    // "Content is cached for offline use." message.
                    console.log('Content is cached for offline use.');
                  }
                }
              };
            };
          })
          .catch(error => {
            console.error('Error during service worker registration:', error);
          });
      }

      function checkValidServiceWorker(swUrl) {
        // Check if the service worker can be found. If it can't reload the page.
        fetch(swUrl)
          .then(response => {
            // Ensure service worker exists, and that we really are getting a JS file.
            if (
              response.status === 404 ||
                response.headers.get('content-type').indexOf('javascript') === -1
            ) {
              // No service worker found. Probably a different app. Reload the page.
              navigator.serviceWorker.ready.then(registration => {
                registration.unregister().then(() => {
                  window.location.reload();
                });
              });
            } else {
              // Service worker found. Proceed as normal.
              registerValidSW(swUrl);
            }
          })
          .catch(() => {
            console.log(
              'No internet connection found. App is running in offline mode.'
            );
          });
      }

      export function unregister() {
        if ('serviceWorker' in navigator) {
          navigator.serviceWorker.ready.then(registration => {
            registration.unregister();
          });
        }
      }

    #+END_SRC

** Actions
*** index.js
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./client/src/actions/index.js
    :END:
    We'll use the index page of the actions to set up our axios client.  axios handles our fetch requests, since we'll be fetching from another server and not from a data file within this app.  Axios is an http request client that uses promises (a new javascript convention for handling asynchronous calls).[[https://www.npmjs.com/package/axios][ Axios page on NPM]]

    We'll want to configure a client app for axios, that sets the host we are trying to connect to and the type of information we are expecting to get.  Since we are working with a feathers api, then we know we just need to grab JSON.
    #+NAME: axios_config
    #+BEGIN_SRC js
      import axios from 'axios'

      export const client = axios.create({
        baseURL: "http://apisnoop.cncf.io:3030",
        headers: {
          "Content-Type": "application/json"
        }
      })
    #+END_SRC
   These work with redux to deliver our store an object that has a 'type' and a payload.  So the type tells our store reducers what to do with it, and the payload is the data that is being added to the global state.

*** Releases Actions
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./client/src/actions/releases-actions.js
    :END:
**** Requirements
    #+NAME: Requirements
    #+BEGIN_SRC js
      import { client } from './'

    #+END_SRC
**** Our URL Variables
     #+NAME: URL Variable
     #+BEGIN_SRC js
      const url = '/api/v1/releases'
     #+END_SRC

**** Fetching Releases
      #+NAME: Fetch Releases
      #+BEGIN_SRC js
        export function fetchReleases () {
          return dispatch => {
            dispatch({
              type: 'FETCH_RELEASES',
              payload: client.get(url)
            })
          }
        }
      #+END_SRC
**** Fetch Release Names
     This gives us the url's to fed our release list, so on the main page you can choose between 1.11 and 1.12 and so on.
     What I want to do is a client.get but only ask for the sunburst data back.

     Feathers offers find(params and get(id, params) as calls for retrieving info. I won't necessarily know the ID i am looking for (as it'll be randomly generated by feathers), so I will use find instead, and pass along some query parameters to it.

     #+NAME: fetchReleaseNames
     #+BEGIN_SRC js
        export function fetchReleaseNames () {
          return dispatch => {
            dispatch({
              type: 'FETCH_RELEASE_NAMES',
              payload: client.get(`${url}?select[]=name`)
            })
          }
        }

     #+END_SRC
**** Choose New Main Release
      #+NAME: chooseNewMain
      #+BEGIN_SRC js
        export function chooseNewMain (name) {
          return dispatch => {
            dispatch({
              type: 'NEW_MAIN_CHOSEN',
              payload: name
            })
          }
        }
      #+END_SRC
** Reducers
*** index.js
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./client/src/reducers/index.js
    :END:
    Here we combine all our different reducers into one big one.  This lets us think about the app in different, focused concerns that then get added to the larger application seamlessly.

    #+NAME: Requirements
    #+BEGIN_SRC js
      import { combineReducers } from 'redux'

      import ReleasesReducer from './releases-reducer'
    #+END_SRC

    #+NAME: Reducers
    #+BEGIN_SRC js
      const reducers = {
        releasesStore: ReleasesReducer,
      }

      const rootReducer = combineReducers(reducers)

      export default rootReducer
    #+END_SRC
*** Releases Reducer
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./client/src/reducers/releases-reducer.js
    :END:
**** Initial State
    We'll first create the initial state for our contact, so we don't get a null error before we have any data.  It'll either be an empty object, or an object filled with data from our server.  In either case, we are giving our components a structure for what they can expect to display, and then the data to display.
#+NAME: Releases Initial State
#+BEGIN_SRC js
  const defaultState = {
    releases: [],
    main_release: {},
    names: [],
    selected_agents: [],
    loading: true,
    errors: {}
  }

#+END_SRC

**** The Reducer
     #+NAME: The Releases Reducer
     #+BEGIN_SRC js
       export default (state = defaultState, action = {}) => {
         switch (action.type) {
         case 'FETCH_RELEASES_FULFILLED': {
           var masterRelease = action.payload.data.find(data => {
             return data.name.toLowerCase().includes('master')
           })
           var selectedAgents = Object.keys(masterRelease.data.useragents).filter(key => {
             if (key.match(/e2e/)) {
               return key
             }
           })
           return {
             ...state,
             releases: action.payload.data,
             names: action.payload.data.map(data => {
               data = data.name
               return data
             }),
             main_release: masterRelease,
             selected_agents: selectedAgents,
             loading: false
           }
         }
         case 'NEW_MAIN_CHOSEN': {
           var newMain = state.releases.find(release => {
             return release.name === action.payload
           })
           var selectedAgents = Object.keys(newMain.data.useragents).filter(key => {
             if (key.match(/e2e/)) {
               return key
             }
           })
           return {
             ...state,
             main_release: newMain,
             selected_agents: selectedAgents
           }
         }
         default:
           return state;
         }
       }





     #+END_SRC
* Process
** Working with d3
*** Introduction
   d3 is the data visualization library that was used to make our original sunburst.  The way it works is to mount itself to the dom, and then appends new elements to the dom based on the data it was given. If that data changes, it transforms the elements as needed.

   The way react works is it attaches itself to the dom, then creates a //shadow dom// that it is continually listening to, adding and removing elements in this dom as needed based on the data(the state) it was given.

   In other words, they work in largely the same way, and both wanna attach themselves to the dom and manipulate it.  This...isn't good.  We want to have /1/ thing making shadow doms and calls on the website, and so it is a bit tricky to get react and d3 working together.

The upside is that a number of people have tackled this challenge and created different react/d3 libraries for how the two can work together.  The downside is that I'm not sure yet which is the best to do.

Put simply, it is not easy to take our existing sunburst code and just paste it into our new app.  We are going to need to transform it in some way based on the guidance of the library we are using.

So the question is why we are putting ourselves into this trouble?
*** WHY WE ARE PUTTING OURSELVES INTO THIS TROUBLE
    My assumption with all of this is that when people hear 'apisnoop', they are thinking of the site in which you can see the data visualziations.  And so the webapp is important for the project and will be expanded.  React would be great for this in the long run.

Similarly, I am expecting that we are going to have more types of visualizations than just the sunburst--and that even the sunburst may change.  So we are going to want to have an understanding for a language in which we can make a //bunch// of visualizations. d3 is great for this.

If we do it right, we can have reusable components too that other teams could use for their own k8s projects, and that we could use ourselves.  For example--displaying two sunburst charts side by side would be much easier in react/d3 then what i ws trying to do before (appending both to the same id on a standard html document.)  This requires that I move through some d3 tutorials though.

At the end of this, though, we will have a backend server that is easy to setup and can ping different url's (github repos or testgrid artifacts) and grab their data.  Then, we can manipulate that data in whatever way we want but also pass it along to our frontend.  This front-end can then have different options and tags setto really dive in and explore.

If this is the purpose of apisnoop then let's do it.  If it's too much overkill though, then I can try a simpler solution.
*** Possible Process to get going
**** Setup a simple d3 visualization to understand the process
**** pipe data into this simple visualization through our redux state.
**** Pore over the original code again (the original blog post) to see how to best convert it
**** Change the sunburst's origin point from a CSV file to JSON
**** Change the sunbursts origin point from JSON to our redux store.
*** Second Process
**** Setup different pages for different d3-react libraries that already have ubilt components.
**** explore piping our data into the one we like.
**** Use testgrid conformance data and make simple visualizations to it.
     We are wanting to keep the data retrieval tied into the visualizing, so we dont' end up with a pretty graph that can't be used for what we have.  So we can grab the testgrid stuff now and see what we can do with it.


**** Use that going forward.
*** Possible Libraries to use
**** Victory
     https://formidable.com/open-source/victory/
**** Britecharts react
     https://eventbrite.github.io/britecharts-react/
**** Recharts
     http://recharts.org/en-US/
** Plan for Demo
- show our sunburst
- show a cloud of all tags.
- show a dropdown for user-agent
- if you chooose a tag, the user-agent dropdown reduces to just tests run by that tag.
- If you click on a sig tag, pull its general info from kubernetes/community/sigs.yaml
- when you hover over an endpoint, show a list of tests that also hit that endpoint. and nubmer of times that test hits that endpoint.
** Aaron Feedback
- useful troubleshooting tool:
  - adding test names to user agents to verify a test was testing what we thought it was.
  - filter audit logs by user-agent and then see 'when this test case is run, here are the endpoints it accesses chronologically".
    - This is separate from number of times hit.  that is useful in aggregate, this is something different.
  - pulling in an audit log of timestamp/verb/uri
- Feature of pointing to the specific line in the source for each test, to pull its definition, would be a good //Next// step.
  - This is something we can do with whakapapa, but it's not something we have now.
- Discovery front: Filtering more endpoints from APIsnoop's definition of coverage.
  - If beta endpoints always get hit because an api server is doing discovery, then that's cool but nothing we can ever prevent conformance tests from doing and we shouldn't care about it from a test coverage perspective.
  - How do we signify that this is the kinda hit that's happening for an endpoint?
  - We have a good start with filtering to just e2e, but even our e2etests are hitting those endpoints.  There are some endpoints where, logically they don't need to get tested or anything like that.
  - Get to a point whwere we can manually specify, or have a blacklist of apiendpoints that we aren't factoring into our coverage viz.
  - One way to do this is to filter out the endpoints that are hit by nearly all of the tests.  This is a good indicator that the endpoint is for initialization or something like that, and not actually a part of this test's function.
- Unique Endpoints hit by a test: this is something that isn't covered by our sunburst or katherine's viz.  Pick a test, and then see the endpoints that are //only// hit by this test.
  - which endpoints hit are unique, versus which ones are common across all test cases.  This would let us know which test cases are doing good stuff and which endpoints are essentially meaningless.
  - you could have a center endpoint change to the perspective of that test, and then that test would only show the endpoints that it hits.....but that may not be that useful.  We dont' wanna see All the endpoints, we wanna see which ones are //special// for this test.
  - Hierarchy vizes aren't that useful.
  - I just wanna find a way to slice and dice data with raw queries and see where that leads us...and take some of the more useful queries and generate reports from that.  This sounds like a new approach for apisnoop.

Question from this, then: Who is apisnoop's audience?  Is it Aaron,and people like aaron?  is it a kubernetes end user?  If it's aaraon, he is saying he knows how to write certain queries, but he would rather have this  already done and then he can do further exploration.
'For an endpoint that's only hit three times, what are the tests that are hitting this endpoint.  And then we could follow up with what the tests are doing from an api perspective.  'Okay, now let me see the full api stream from this test."
 - auotmate this, or provide shiny reports for this.  This isn't the end user coming up with the interesting things, this is us coming up with interesting things that we are letting the end user come to their own conclusions on.
 - We eventually want to show api coverage going up over time across different builds. o
 - We might be able to format things in such a way to have a test dashboard that shows individual api endpoints and #'s: how many times they been hit, something like that.
 - Is code coverage a different thing?  when talking about it being a command line tool that generates reports from it...or is that just what the group is trying to do.  the benefit of the command line tool is that you can automate it running for every build. We could then just have a page that displays these reports even maybe.
 - We want to share shinies at kubeconf china.
 - Get visualization up to good place that replaces existing visualization.
 - Showing all the api accesses per user-agent or test as a different Dashboard to have.
 - Take care of you for whatever demos you need for apisnoop.
 - It would be worth it to show we're providing value to cncf as a whole, but right now it's good to just be able to have Aaron say that the work we're doing makes it easier for conformance to do the things they want to do.
 - Let's not work on things that don't end up providing value, over-delivering when he really just wants somethings maller and specific.  He's happy to have some reports that don't need to be that shiny, but maybe a little bit interactive.  and these reports would be:
   - If I click on a user agent, I can see the in-order access of all the api endpoints.
   - To get some kind of report that shows me what kind of endpoints don't matter (every test hits them) and which ones are interesting (cos only a few endpoints hit them) and what are those tests?
     - this may lead to a point where we try to make a whitelist of endpoints in our coverage, but let's not cross that bridge yet.
   - For wednesday deadline...this isn't a hard deadline, we can touch base on Tuesday/Monday and see where we at.


* Footnotes
** Understand the config.yaml file and what it's pointing to.
*** TestGrid
    Our testgrid is located at: https://k8s-testgrid.appspot.com/

 https://github.com/kubernetes/test-infra/blob/master/testgrid/config.yaml#L3028
 Dashboard Config for conformance-all: https://github.com/kubernetes/test-infra/blob/master/testgrid/config.yaml#L3231
 Production instance of conformance-all: https://k8s-testgrid.appspot.com/conformance-all

 GCE https://k8s-testgrid.appspot.com/conformance-all#GCE,%20master%20(dev)

 JOBS for GCE 1.12-dev https://k8s-gubernator.appspot.com/builds/kubernetes-jenkins/logs/ci-kubernetes-gce-conformance-latest-1-12
 Historical artifa8cts, including latest:
 https://k8s-gubernator.appspot.com/builds/kubernetes-jenkins/logs/ci-kubernetes-gce-conformance-latest-1-12
 The specific latest build:
 https://k8s-gubernator.appspot.com/build/kubernetes-jenkins/logs/ci-kubernetes-gce-conformance-latest-1-12/168/
 Grab SOMETHING from the artifact folder for this job:
 http://gcsweb.k8s.io/gcs/kubernetes-jenkins/logs/ci-kubernetes-gce-conformance-latest-1-12/168/
 The audit log: https://storage.googleapis.com/kubernetes-jenkins/logs/ci-kubernetes-gce-conformance-latest-1-12/168/artifacts/bootstrap-e2e-master/kube-apiserver-audit.log
*** Navigating the config.yaml
    Starting at , here is how to relate the url view with the info on
    <<
**** [[file:config_yamls/config.yaml::dashboard_groups:][dashboard_groups:]]

    These top level dashboard groups are what populate the top level of [[https://k8s-testgrid.appspot.com][k8s-testgrid.appspot.com]]
***** [[file:config_yamls/config.yaml::dashboards:][dashboards:]]
****** [[file:config_yamls/config.yaml::test_groups:][test_groups:]]

**** Example [[file:config_yamls/config.yaml::-%20name:%20conformance-gce][For dashboard: conformance-gce]]
  if you were to look at
  dashboards.name['conformance-gce'].dashboard_tab, that ties to the summary tab you see at [[https://k8s-testgrid.appspot.com/conformance-gce][k8s-testgrid.appspot.com/conformance-gce]]
**** Test groups
     k8s
    Every testgroup name you find at:
   ~dashboards.name['conformance-gce'].dashboard_tab.name~
   has a section called 'test_group_name', and each test group name has its gcs_prefix (GCS standing for 'Google Cloud Services')

   For example, the test group name 'ci-kubernetes-gce-conformance-stable-1-12' has a gcs prefix of 'kubernetes-jenkins/logs/ci-kubernetes-gce-conformance-stable-1-12'.

   The json path for this testgroup gcs prefix would be:
   test_groups.name['ci-kubernetes-gce-conformance-stable-1-12'].gcs_prefix

   which takes you here: [[file:config_yamls/config.yaml::gcs_prefix:%20kubernetes-jenkins/logs/ci-kubernetes-gce-conformance-stable-1-12][gce-conformance-latest-1-12 gcs_prefix]]

   We could then...point that to a url where we'd grab the artifacts?
   like:
  http://gcsweb.k8s.io/gcs/$GCS_PREFIX

  we want to grab the latest text build, which is found at
  http://gcsweb.k8s.io/gcs/$GCS_PREFIX/latest-build.txt
   The goal now is to try to get as much done on the server, instead of trying to do it upon page requests in the client.  So what we would like is to have a server with an api that the client can ping that would give back the data needed based on the branch.  So I could do a request in the client for gce-conformance branch 1.12(dev), and that'd tie to some easy to reason about api path (/branches/1.12-dev), and this gives us the name of the latest build and the data taken from kube-servers api log.

So ultimately we want to be bringing down the gigs of data for the audit-logs and converted into something that can be rendered into a graph.
** Resources
*** d3
**** [[https://medium.com/@Elijah_Meeks/interactive-applications-with-react-d3-f76f7b3ebc71][interactive applications with react-d3]]
     this is really good.
**** [[https://www.smashingmagazine.com/2018/02/react-d3-ecosystem/][Bringing Together react, d3, and their ecosystem]]
**** [[http://www.adeveloperdiary.com/react-js/integrate-react-and-d3/][How to Integrate React and d3 the right way]]
**** [[https://bost.ocks.org/mike/join/][Thinking with Joins]]

** Process
** isocket
*** Connecting the left pair / isocket

 ssh needs '-t' twice because it needs to be forced to allocate a remote terminal
 _even_ when we don't have have local one (within emacs)


#+NAME: left_session_create
#+BEGIN_SRC shell :var session="zz-left" terminal_exec="xterm -e" user="zz" host="apisnoop.cncf.io" :session nil :results silent
  $terminal_exec \
      "ssh -att \
           -L /tmp/.$session.isocket:/tmp/.$session.isocket \
           -l $user \
           $host \
      tmate -S /tmp/.$session.isocket \
            new-session \
            -A \
            -s $session \
            -n emacs \
      emacs --fg-daemon=$session" \
  &
#+END_SRC

#+NAME: left_session_setup
#+BEGIN_SRC shell :var session="zz-left" user="zz" host="apisnoop.cncf.io" :session nil :results silent
  ssh -att $user@$host \
  "tmate -S /tmp/.$session.isocket \
        new-window \
        -n client" \
   "emacsclient -nw \
              --socket-name $session \
              ~/apisnoop/webui/web_ui.org"
#+END_SRC

 #+NAME: left_session
 #+BEGIN_SRC shell :wrap "SRC text :noeval" :results verbatim :var session="zz-left" user="zz" host="apisnoop.cncf.io" :results silen
  ssh -att $user@$host \
    tmate -S /tmp/.$SESSION.isocket wait tmate-ready > /dev/null &&
  ssh -att $user@$host \
    tmate -S /tmp/.$SESSION.isocket display -p \'#{tmate_ssh}\' 2> /dev/null
# ssh -tt root@apisnoop.cncf.io \
#  tmate -S /tmp/.$SESSION.isocket display -p \'#{tmate_ssh}\'
 #+END_SRC

 #+RESULTS: left_session
 #+BEGIN_SRC text :noeval
 #+END_SRC

**** Connecting to emacs daemon

 #+NAME: alse run emacsclient
 #+BEGIN_SRC tmate :noeval
 export SESSION=lt-emacs
 emacsclient --socket-name $SESSION
 #+END_SRC

*** Connecting the right pair / isocket

#+NAME: right_session_create
#+BEGIN_SRC shell :var session="zz-right" terminal_exec="xterm -e" user="zz" host="apisnoop.cncf.io" :session nil :results silent
  $terminal_exec \
      "ssh -att \
           -L /tmp/.$session.isocket:/tmp/.$session.isocket \
           -l $user \
           $host \
      tmate -S /tmp/.$session.isocket \
            new-session \
            -A \
            -s $session \
            -n misc" \
  &
#+END_SRC


 #+NAME: right_session_join
 #+BEGIN_SRC shell :results silent
 export SESSION=api-snoop
 export XTERM_EXEC="roxterm -e"
 $XTERM_EXEC ssh -Att root@apisnoop.cncf.io \
  tmate -S /tmp/.$SESSION.isocket \
   at \; sleep 9999
 #+END_SRC

 #+NAME: right_session_setup
 #+BEGIN_SRC shell :results verbatim
 export SESSION=api-snoop
 echo ssh -tt root@apisnoop.cncf.io \
  tmate -S /tmp/.$SESSION.isocket \
    new-window -n session \
     bash
 #+END_SRC

 #+NAME: right_session
 #+BEGIN_SRC shell :cache yes :wrap "SRC text :noeval" :results verbatim
 export SESSION=api-snoop
 ssh -tt root@apisnoop.cncf.io \
  tmate -S /tmp/.$SESSION.isocket display -p \'#{tmate_ssh}\'
 #+END_SRC

 #+RESULTS[dd96525b42bbbe741e292e99ad5f3592a7163025]: right_session
 #+BEGIN_SRC text :noeval
 ssh mJrsCgvGTOTOFagYpBKvRf7EE@sf2.tmate.io
 #+END_SRC





 #+NAME: give this to your pair
 #+BEGIN_SRC bash :noweb yes :var left_session=left_session() right_session=right_session()
 echo "ii pair session ready
 left: $left_session
 right: $right_session
 "
 #+END_SRC

 #+RESULTS: give this to your pair
 | ii     | pair | session | ready |
 | left:  | nil  |         |       |
 | right: | nil  |         |       |
 |        |      |         |       |

*** TODO Sharing your eyes

#+NAME: give this to your pair
#+BEGIN_SRC bash :noweb yes :var left_session=left_session() :var right_session=right_session()
echo "ii pair session ready
left: $left_session
right: $right_session
"
#+END_SRC
* Experiment
  :PROPERTIES:
  :header-args: :dir (concat (file-name-directory buffer-file-name) "client")
  :header-args:tmate: :socket "/tmp/.zz-right.isocket"
  :header-args:tmate: :session "zz-right"
  :END:

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
* Tasks
** NEXT Change front-end logic so it only pulls data from the necessary sunburst.
   Right now the we have an endpoint called /Releases, organized by Build name.  These correspond to the sunbursts.  We are pulling in the entire api, we should only do buildname.data.sunburst
*** [0/5] Subtasks
    - [ ] Remove excess noise from front-end for right now--the filters essentially.
    - [ ] Add URL path to each Release you click
    - [ ] Add fetchSunburst action to sunburst segment component, and pass it along the url params.
    - [ ] Query the api database based on the params and return just the sunburst data.`
** TODO Add logic to API to filter endpoints to only those touched by e2e.
   We are showing all.  It'll be faster, and simpler to only be ones whose useragents includes the regex string 'e2e.test'

** TODO change keypath logic so it only highlights if parent is on keypath.
** TODO change color of default to be gray, and apply color only if tested.
