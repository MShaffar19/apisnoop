#    -*- mode: org -*-


Archived entries from file /Users/Nelsonian/Projects/ii/apisnoop/webui/web_ui.org


* Tutorials
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-10-18 Thu 16:34
  :ARCHIVE_FILE: ~/Projects/ii/apisnoop/webui/web_ui.org
  :ARCHIVE_OLPATH: Footnotes/Process
  :ARCHIVE_CATEGORY: web_ui
  :END:
   I am going through some simple tutorials for connecting react to redux to feathers.  It's a slightly longer process, but it's going to set me up better for maintaining apisnoop.  My assumption is that this is not a one-and-done thing.  We will be continually adding features to apisnoop and these features will become increasingly more complex. In addition, we'll be needing to adapt apisnoop for different scenarios. So I want to understand the stack for our webapp entirely.

I am coming in with good html and css knowledge for building personal projects.  What we are building is a production level app.  No matter how simple we make it, we will be pinging different sites, manipulating the data within those sites, and then displaying visualizations of our manipulations.  There isn't really a way to do this casually.  Especially if we want it to be stury and testable.  So I am biting off the sizable task of 'build a full-stack production-ready app by myself'.  I want to have all the tools I can to do this.

So I am going to make a v. simple fullstack app and then add in our own customizations until we get to the point where I can hear a task and know exactly how to realize it in this code.

* buildJsonHierarchy
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-10-22 Mon 08:13
  :ARCHIVE_FILE: ~/apisnoop/webui/web_ui.org
  :ARCHIVE_OLPATH: Backend/Services/Sunburst/Hooks
  :ARCHIVE_CATEGORY: web_ui
  :END:

  The data coming into this hook looks like so:
  #+NAME: sunburst object structure
  #+BEGIN_SRC json :tangle no
    {starburst: {
      alpha: {
        settings {...},
        rbacauthorization {...},
        storage	{…},
        batch	{…},
        admissionregistration	{…},
        scheduling	{…},
        auditregistration	{…}
      },
      beta: {
        settings {...},
        rbacauthorization {...},
        storage	{…},
        batch	{…},
        admissionregistration	{…},
        scheduling	{…},
        auditregistration	{…}
      },
      stable: {
        settings {...},
        rbacauthorization {...},
        storage	{…},
        batch	{…},
        admissionregistration	{…},
        scheduling	{…},
        auditregistration	{…}
      }
    }
  #+END_SRC

  sample data from existing sunburst that works:
  #+NAME: What we want it to look like
  #+BEGIN_SRC json :tangle no
    {
      "tree": {
        "name": "root",
        "children": [
          {
            "name": "stable",
            "children": [
              {
                "name": "core",
                "children": [
                  {
                    "name": "get /api/",
                    "color": "category.core",
                    "url": "get /api/",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/",
                    "color": "category.core",
                    "url": "get /api/v1/",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/componentstatuses",
                    "color": "category.core",
                    "url": "get /api/v1/componentstatuses",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/configmaps",
                    "color": "category.core",
                    "url": "get /api/v1/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/configmaps",
                    "color": "category.core",
                    "url": "watch /api/v1/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/endpoints",
                    "color": "category.core",
                    "url": "get /api/v1/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/endpoints",
                    "color": "category.core",
                    "url": "watch /api/v1/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/limitranges",
                    "color": "category.core",
                    "url": "get /api/v1/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/limitranges",
                    "color": "category.core",
                    "url": "watch /api/v1/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/namespaces",
                    "color": "category.core",
                    "url": "watch /api/v1/namespaces",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "watch /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "put /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "color": "category.core",
                    "url": "put /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "watch /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "put /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "color": "category.core",
                    "url": "put /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/limitranges",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/limitranges",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces/{namespace}/limitranges",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces/{namespace}/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  }
  #+END_SRC

  We have some code now, that is using our audits.data to build out a sunburst.  It looks like this. This was based off the original hierarchy, but now using our new data structure.
  #+NAME: buildJsonHierarchy
  #+BEGIN_SRC js
    // Use this hook to manipulate incoming or outgoing data.
    // For more information on hooks see: http://docs.feathersjs.com/api/hooks.html

    // eslint-disable-next-line no-unused-vars
    module.exports = function (options = {}) {
      return async context => {
        context.data.formatted = 'hi'
        return context;
      };

      function formatForSunburst (data) {
        var json = buildHierarchy(data.data)
        return json
      }


      function buildHierarchy(csv) {
        var root = createNode('root')
        var parentNode;
        var levelNode;
        var categoryNode;
        for (var i = 0; i < csv.length; i++) {
          var level = csv[i]['level']
          var category = csv[i]['category']
          var method_url = csv[i]['method + url']
          var size = +csv[i]['count'];
          if (isNaN(size)) { // e.g. if this is a header row
            continue;
          }

          var node = findChild(root, level)
          if (node == null) {
            node = createNode(level, {
              'color': 'level.' + level
            })
            root['children'].push(node)
          }
          parentNode = levelNode = node

          node = findChild(parentNode, category)
          if (node == null) {
            node = createNode(category,  {
              'color': 'category.' + category
            })
            parentNode['children'].push(node)
          }
          parentNode = categoryNode = node

          node = findChild(parentNode, method_url)
          if (node == null) {
            if (method_url === 'unused') {
              method_url = 'untested'
              var attrs = {'color': 'category.unused'}
              categoryNode.untested += size
              levelNode.untested += size
              root.untested += size
            } else {
              attrs = {'color': 'category.' + category}
              categoryNode.tested += size
              levelNode.tested += size
              root.tested += size
            }
            categoryNode.total += size
            levelNode.total += size
            root.total += size
            attrs.url = method_url
            node = createEndNode(method_url, attrs)
            parentNode['children'].push(node)
          }
          node['size'] = size
        }
        return root;
      }

      function findChild(parentNode, nodeName) {
        var children = parentNode.children;
        for (var k = 0; k < children.length; k++) {
          if (children[k]["name"] === nodeName) {
            return children[k];
          }
        }
        return null
      }

      function createNode(name, attrs) {
        var node = {
          "name": name,
          "children": [],
          'tested': 0,
          'untested': 0,
          'total': 0,
        };
        if (attrs) {
          node = Object.assign(node, attrs)
        }
        return node
      }

      function createEndNode(name, attrs) {
        var node = {
          "name": name,
        };
        if (attrs) {
          node = Object.assign(node, attrs)
        }
        return node
      }

    };

  #+END_SRC


* buildJsonHierarchy
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-10-22 Mon 08:13
  :ARCHIVE_FILE: ~/apisnoop/webui/web_ui.org
  :ARCHIVE_OLPATH: Backend/Services/Sunburst/Hooks
  :ARCHIVE_CATEGORY: web_ui
  :END:

  The data coming into this hook looks like so:
  #+NAME: sunburst object structure
  #+BEGIN_SRC json :tangle no
    {starburst: {
      alpha: {
        settings {...},
        rbacauthorization {...},
        storage	{…},
        batch	{…},
        admissionregistration	{…},
        scheduling	{…},
        auditregistration	{…}
      },
      beta: {
        settings {...},
        rbacauthorization {...},
        storage	{…},
        batch	{…},
        admissionregistration	{…},
        scheduling	{…},
        auditregistration	{…}
      },
      stable: {
        settings {...},
        rbacauthorization {...},
        storage	{…},
        batch	{…},
        admissionregistration	{…},
        scheduling	{…},
        auditregistration	{…}
      }
    }
  #+END_SRC

  sample data from existing sunburst that works:
  #+NAME: What we want it to look like
  #+BEGIN_SRC json :tangle no
    {
      "tree": {
        "name": "root",
        "children": [
          {
            "name": "stable",
            "children": [
              {
                "name": "core",
                "children": [
                  {
                    "name": "get /api/",
                    "color": "category.core",
                    "url": "get /api/",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/",
                    "color": "category.core",
                    "url": "get /api/v1/",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/componentstatuses",
                    "color": "category.core",
                    "url": "get /api/v1/componentstatuses",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/configmaps",
                    "color": "category.core",
                    "url": "get /api/v1/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/configmaps",
                    "color": "category.core",
                    "url": "watch /api/v1/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/endpoints",
                    "color": "category.core",
                    "url": "get /api/v1/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/endpoints",
                    "color": "category.core",
                    "url": "watch /api/v1/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/limitranges",
                    "color": "category.core",
                    "url": "get /api/v1/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/limitranges",
                    "color": "category.core",
                    "url": "watch /api/v1/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/namespaces",
                    "color": "category.core",
                    "url": "watch /api/v1/namespaces",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "watch /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "put /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "color": "category.core",
                    "url": "put /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "watch /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "put /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "color": "category.core",
                    "url": "put /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/limitranges",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/limitranges",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces/{namespace}/limitranges",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces/{namespace}/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  }
  #+END_SRC

  We have some code now, that is using our audits.data to build out a sunburst.  It looks like this. This was based off the original hierarchy, but now using our new data structure.
  #+NAME: buildJsonHierarchy
  #+BEGIN_SRC js
    // Use this hook to manipulate incoming or outgoing data.
    // For more information on hooks see: http://docs.feathersjs.com/api/hooks.html

    // eslint-disable-next-line no-unused-vars
    module.exports = function (options = {}) {
      return async context => {
        context.data.formatted = 'hi'
        return context;
      };

      function formatForSunburst (data) {
        var json = buildHierarchy(data.data)
        return json
      }


      function buildHierarchy(csv) {
        var root = createNode('root')
        var parentNode;
        var levelNode;
        var categoryNode;
        for (var i = 0; i < csv.length; i++) {
          var level = csv[i]['level']
          var category = csv[i]['category']
          var method_url = csv[i]['method + url']
          var size = +csv[i]['count'];
          if (isNaN(size)) { // e.g. if this is a header row
            continue;
          }

          var node = findChild(root, level)
          if (node == null) {
            node = createNode(level, {
              'color': 'level.' + level
            })
            root['children'].push(node)
          }
          parentNode = levelNode = node

          node = findChild(parentNode, category)
          if (node == null) {
            node = createNode(category,  {
              'color': 'category.' + category
            })
            parentNode['children'].push(node)
          }
          parentNode = categoryNode = node

          node = findChild(parentNode, method_url)
          if (node == null) {
            if (method_url === 'unused') {
              method_url = 'untested'
              var attrs = {'color': 'category.unused'}
              categoryNode.untested += size
              levelNode.untested += size
              root.untested += size
            } else {
              attrs = {'color': 'category.' + category}
              categoryNode.tested += size
              levelNode.tested += size
              root.tested += size
            }
            categoryNode.total += size
            levelNode.total += size
            root.total += size
            attrs.url = method_url
            node = createEndNode(method_url, attrs)
            parentNode['children'].push(node)
          }
          node['size'] = size
        }
        return root;
      }

      function findChild(parentNode, nodeName) {
        var children = parentNode.children;
        for (var k = 0; k < children.length; k++) {
          if (children[k]["name"] === nodeName) {
            return children[k];
          }
        }
        return null
      }

      function createNode(name, attrs) {
        var node = {
          "name": name,
          "children": [],
          'tested': 0,
          'untested': 0,
          'total': 0,
        };
        if (attrs) {
          node = Object.assign(node, attrs)
        }
        return node
      }

      function createEndNode(name, attrs) {
        var node = {
          "name": name,
        };
        if (attrs) {
          node = Object.assign(node, attrs)
        }
        return node
      }

    };

  #+END_SRC


* buildJsonHierarchy
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-10-22 Mon 08:14
  :ARCHIVE_FILE: ~/apisnoop/webui/web_ui.org
  :ARCHIVE_OLPATH: Backend/Services/Sunburst/Hooks
  :ARCHIVE_CATEGORY: web_ui
  :END:

  The data coming into this hook looks like so:
  #+NAME: sunburst object structure
  #+BEGIN_SRC json :tangle no
    {starburst: {
      alpha: {
        settings {...},
        rbacauthorization {...},
        storage	{…},
        batch	{…},
        admissionregistration	{…},
        scheduling	{…},
        auditregistration	{…}
      },
      beta: {
        settings {...},
        rbacauthorization {...},
        storage	{…},
        batch	{…},
        admissionregistration	{…},
        scheduling	{…},
        auditregistration	{…}
      },
      stable: {
        settings {...},
        rbacauthorization {...},
        storage	{…},
        batch	{…},
        admissionregistration	{…},
        scheduling	{…},
        auditregistration	{…}
      }
    }
  #+END_SRC

  sample data from existing sunburst that works:
  #+NAME: What we want it to look like
  #+BEGIN_SRC json :tangle no
    {
      "tree": {
        "name": "root",
        "children": [
          {
            "name": "stable",
            "children": [
              {
                "name": "core",
                "children": [
                  {
                    "name": "get /api/",
                    "color": "category.core",
                    "url": "get /api/",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/",
                    "color": "category.core",
                    "url": "get /api/v1/",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/componentstatuses",
                    "color": "category.core",
                    "url": "get /api/v1/componentstatuses",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/configmaps",
                    "color": "category.core",
                    "url": "get /api/v1/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/configmaps",
                    "color": "category.core",
                    "url": "watch /api/v1/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/endpoints",
                    "color": "category.core",
                    "url": "get /api/v1/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/endpoints",
                    "color": "category.core",
                    "url": "watch /api/v1/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/limitranges",
                    "color": "category.core",
                    "url": "get /api/v1/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/limitranges",
                    "color": "category.core",
                    "url": "watch /api/v1/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/namespaces",
                    "color": "category.core",
                    "url": "watch /api/v1/namespaces",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/namespaces/{namespace}/configmaps",
                    "color": "category.core",
                    "url": "watch /api/v1/namespaces/{namespace}/configmaps",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "put /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "color": "category.core",
                    "url": "put /api/v1/namespaces/{namespace}/configmaps/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "watch /api/v1/namespaces/{namespace}/endpoints",
                    "color": "category.core",
                    "url": "watch /api/v1/namespaces/{namespace}/endpoints",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "put /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "color": "category.core",
                    "url": "put /api/v1/namespaces/{namespace}/endpoints/{name}",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "delete /api/v1/namespaces/{namespace}/limitranges",
                    "color": "category.core",
                    "url": "delete /api/v1/namespaces/{namespace}/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "get /api/v1/namespaces/{namespace}/limitranges",
                    "color": "category.core",
                    "url": "get /api/v1/namespaces/{namespace}/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  },
                  {
                    "name": "post /api/v1/namespaces/{namespace}/limitranges",
                    "color": "category.core",
                    "url": "post /api/v1/namespaces/{namespace}/limitranges",
                    "size": 1,
                    "style": {
                      "fillOpacity": 1
                    }
                  }
  #+END_SRC

  We have some code now, that is using our audits.data to build out a sunburst.  It looks like this. This was based off the original hierarchy, but now using our new data structure.
  #+NAME: buildJsonHierarchy
  #+BEGIN_SRC js
    // Use this hook to manipulate incoming or outgoing data.
    // For more information on hooks see: http://docs.feathersjs.com/api/hooks.html

    // eslint-disable-next-line no-unused-vars
    module.exports = function (options = {}) {
      return async context => {
        context.data.formatted = 'hi'
        return context;
      };

      function formatForSunburst (data) {
        var json = buildHierarchy(data.data)
        return json
      }


      function buildHierarchy(csv) {
        var root = createNode('root')
        var parentNode;
        var levelNode;
        var categoryNode;
        for (var i = 0; i < csv.length; i++) {
          var level = csv[i]['level']
          var category = csv[i]['category']
          var method_url = csv[i]['method + url']
          var size = +csv[i]['count'];
          if (isNaN(size)) { // e.g. if this is a header row
            continue;
          }

          var node = findChild(root, level)
          if (node == null) {
            node = createNode(level, {
              'color': 'level.' + level
            })
            root['children'].push(node)
          }
          parentNode = levelNode = node

          node = findChild(parentNode, category)
          if (node == null) {
            node = createNode(category,  {
              'color': 'category.' + category
            })
            parentNode['children'].push(node)
          }
          parentNode = categoryNode = node

          node = findChild(parentNode, method_url)
          if (node == null) {
            if (method_url === 'unused') {
              method_url = 'untested'
              var attrs = {'color': 'category.unused'}
              categoryNode.untested += size
              levelNode.untested += size
              root.untested += size
            } else {
              attrs = {'color': 'category.' + category}
              categoryNode.tested += size
              levelNode.tested += size
              root.tested += size
            }
            categoryNode.total += size
            levelNode.total += size
            root.total += size
            attrs.url = method_url
            node = createEndNode(method_url, attrs)
            parentNode['children'].push(node)
          }
          node['size'] = size
        }
        return root;
      }

      function findChild(parentNode, nodeName) {
        var children = parentNode.children;
        for (var k = 0; k < children.length; k++) {
          if (children[k]["name"] === nodeName) {
            return children[k];
          }
        }
        return null
      }

      function createNode(name, attrs) {
        var node = {
          "name": name,
          "children": [],
          'tested': 0,
          'untested': 0,
          'total': 0,
        };
        if (attrs) {
          node = Object.assign(node, attrs)
        }
        return node
      }

      function createEndNode(name, attrs) {
        var node = {
          "name": name,
        };
        if (attrs) {
          node = Object.assign(node, attrs)
        }
        return node
      }

    };

  #+END_SRC

* DONE rearrange data so it starts with stable instead of alpha.  This will make current visualization be  oriented the same as existing vis.
  CLOSED: [2018-10-30 Tue 11:51]
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-10-30 Tue 11:51
  :ARCHIVE_FILE: ~/Projects/ii/apisnoop/webui/web_ui.org
  :ARCHIVE_OLPATH: Tasks
  :ARCHIVE_CATEGORY: web_ui
  :ARCHIVE_TODO: DONE
  :END:
